{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/Users/apple/Desktop/react-js/my-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\n\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 2),\n  logicalAND: createBinop(\"&&\", 3),\n  bitwiseOR: createBinop(\"|\", 4),\n  bitwiseXOR: createBinop(\"^\", 5),\n  bitwiseAND: createBinop(\"&\", 6),\n  equality: createBinop(\"==/!=/===/!==\", 7),\n  relational: createBinop(\"</>/<=/>=\", 8),\n  bitShift: createBinop(\"<</>>/>>>\", 9),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 10,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 11,\n    startsExpr\n  }),\n  star: createBinop(\"*\", 11),\n  slash: createBinop(\"/\", 11),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 12,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 8\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 8\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\nconst SCOPE_OTHER = 0b0000000000,\n      SCOPE_PROGRAM = 0b0000000001,\n      SCOPE_FUNCTION = 0b0000000010,\n      SCOPE_ASYNC = 0b0000000100,\n      SCOPE_GENERATOR = 0b0000001000,\n      SCOPE_ARROW = 0b0000010000,\n      SCOPE_SIMPLE_CATCH = 0b0000100000,\n      SCOPE_SUPER = 0b0001000000,\n      SCOPE_DIRECT_SUPER = 0b0010000000,\n      SCOPE_CLASS = 0b0100000000,\n      SCOPE_TS_MODULE = 0b1000000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nfunction functionFlags(isAsync, isGenerator) {\n  return SCOPE_FUNCTION | (isAsync ? SCOPE_ASYNC : 0) | (isGenerator ? SCOPE_GENERATOR : 0);\n}\n\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (prop.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkDuplicatedProto(prop, protoRef) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\" && prop.kind === \"init\") {\n      if (protoRef.used && !protoRef.start) {\n        protoRef.start = key.start;\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.body.length > 0) {\n      for (let _i = 0, _node$body$body = node.body.body; _i < _node$body$body.length; _i++) {\n        const directive = _node$body$body[_i];\n\n        if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n          if (directive.expression.value === \"use strict\") return true;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    switch (this.state.type) {\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refShorthandDefaultPos);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value, isBinding, contextDescription);\n      return node;\n    }\n\n    return super.toAssignable(node, isBinding, contextDescription);\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, \"Object pattern can't contain methods\");\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n    }\n  }\n\n};\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\n\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed || this.state.value === \"yield\" && this.scope.inGenerator) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\nconst reservedWords = {\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nconst isReservedWord = (word, inModule) => {\n  return inModule && word === \"await\" || word === \"enum\";\n};\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n\n    var _this$flowParseTypeAn = this.flowParseTypeAndPredicateInitialiser();\n\n    var _this$flowParseTypeAn2 = _slicedToArray(_this$flowParseTypeAn, 2);\n\n    typeNode.returnType = _this$flowParseTypeAn2[0];\n    node.predicate = _this$flowParseTypeAn2[1];\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, \"`declare module` cannot be used inside another `declare module`\");\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    const errorMessage = \"Found both `declare module.exports` and `declare export` in the same module. \" + \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, errorMessage);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, \"Duplicate `declare module.exports` statement\");\n        }\n\n        if (kind === \"ES\") this.raise(bodyElement.start, errorMessage);\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        this.unexpected(this.state.start, `\\`declare export ${label}\\` is not supported. Use \\`${suggestion}\\` instead`);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, \"`_` is only allowed as a type argument to call or new\");\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n\n    if (declaration) {\n      this.raise(startLoc, `Cannot overwrite reserved type ${word}`);\n      return;\n    }\n\n    this.raise(startLoc, `Unexpected reserved type ${word}`);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\");\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        var _allowInexact;\n\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, (_allowInexact = allowInexact) != null ? _allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, \"Explicit inexact syntax must appear at the end of an inexact object\");\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear in class or interface definitions\");\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear inside an explicit exact object type\");\n        }\n\n        if (variance) {\n          this.raise(variance.start, \"Explicit inexact syntax cannot have variance\");\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, \"Spread operator cannot appear in class or interface definitions\");\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, \"Spread properties cannot have variance\");\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, `Unexpected token, expected \"number\" or \"bigint\"`);\n        }\n\n        this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n\n      var _this$flowParseTypeAn3 = this.flowParseTypeAndPredicateInitialiser();\n\n      var _this$flowParseTypeAn4 = _slicedToArray(_this$flowParseTypeAn3, 2);\n\n      typeNode.typeAnnotation = _this$flowParseTypeAn4[0];\n      node.predicate = _this$flowParseTypeAn4[1];\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n\n    let _this$tryParseConditi = this.tryParseConditionalConsequent(),\n        consequent = _this$tryParseConditi.consequent,\n        failed = _this$tryParseConditi.failed;\n\n    let _this$getArrowLikeExp = this.getArrowLikeExpressions(consequent),\n        _this$getArrowLikeExp2 = _slicedToArray(_this$getArrowLikeExp, 2),\n        valid = _this$getArrowLikeExp2[0],\n        invalid = _this$getArrowLikeExp2[1];\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        var _this$tryParseConditi2 = this.tryParseConditionalConsequent();\n\n        consequent = _this$tryParseConditi2.consequent;\n        failed = _this$tryParseConditi2.failed;\n\n        var _this$getArrowLikeExp3 = this.getArrowLikeExpressions(consequent);\n\n        var _this$getArrowLikeExp4 = _slicedToArray(_this$getArrowLikeExp3, 2);\n\n        valid = _this$getArrowLikeExp4[0];\n        invalid = _this$getArrowLikeExp4[1];\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\");\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n\n        var _this$tryParseConditi3 = this.tryParseConditionalConsequent();\n\n        consequent = _this$tryParseConditi3.consequent;\n        failed = _this$tryParseConditi3.failed;\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, true, \"arrow function parameters\", (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(functionFlags(false, false) | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n    } else {\n      return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, \"The type cast expression is expected to be wrapped with parenthesis\");\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, \"The `type` and `typeof` keywords on named imports can only be used on regular \" + \"`import` statements. It cannot be used with `import type` or `import typeof` statements\");\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const context = this.state.context;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (jsx && jsx.error || this.isRelational(\"<\")) {\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(() => {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        return arrowExpression;\n      }, state);\n      const arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n      if (!arrow.error && arrowExpression) return arrowExpression;\n\n      if (jsx && jsx.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n    }\n\n    return super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n\n        var _this$flowParseTypeAn5 = this.flowParseTypeAndPredicateInitialiser();\n\n        var _this$flowParseTypeAn6 = _slicedToArray(_this$flowParseTypeAn5, 2);\n\n        typeNode.typeAnnotation = _this$flowParseTypeAn6[0];\n        node.predicate = _this$flowParseTypeAn6[1];\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      this.expectPlugin(\"optionalChaining\");\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, \"Unterminated flow-comment\");\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, \"Cannot have a flow comment inside another flow comment\");\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, \"Unterminated comment\");\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const pos = this.state.pos;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, \"Unterminated comment\");\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` ` + `or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using ` + `\\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used ` + `before in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or ` + `consistently use literals (either booleans, numbers, or strings) for all member initializers.`);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    const suggestion = `Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in ` + `enum \\`${enumName}\\`.`;\n    const message = suppliedType === null ? `Supplied enum type is not valid. ${suggestion}` : `Enum type \\`${suppliedType}\\` is not valid. ${suggestion}`;\n    return this.raise(pos, message);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of ` + `\\`${memberName}\\` needs to be a ${explicitType} literal.`;\n        break;\n\n      case \"symbol\":\n        message = `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in ` + `enum \\`${enumName}\\`.`;\n        break;\n\n      default:\n        message = `The enum member initializer for \\`${memberName}\\` needs to be a literal (either ` + `a boolean, number, or string) in enum \\`${enumName}\\`.`;\n    }\n\n    return this.raise(pos, message);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, `String enum members need to consistently either all use initializers, or use no initializers, ` + `in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const explicitType = context.explicitType;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n\n      const _this$flowEnumMemberR = this.flowEnumMemberRaw(),\n            id = _this$flowEnumMemberR.id,\n            init = _this$flowEnumMemberR.init;\n\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const value = this.state.value;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated JSX contents\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <>\");\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. \" + \"Did you want a JSX fragment <>...</>?\");\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refShortHandDefaultPos) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refShortHandDefaultPos);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n};\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get inGenerator() {\n    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n  }\n\n  get inAsync() {\n    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, `Identifier '${name}' has already been declared`);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(allowedModifiers) {\n    const modifiers = Object.create(null);\n\n    while (true) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modifiers, modifier)) {\n        this.raise(startPos, `Duplicate modifier: '${modifier}'`);\n      }\n\n      modifiers[modifier] = true;\n    }\n\n    return modifiers;\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    while (true) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, \"Argument in a type import must be a string literal\");\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern,\" + `instead got ${pattern.type}`);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, \"A required element cannot follow an optional element.\");\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n      this.checkCommaAfterRest(93);\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, \"Template literal types cannot have any substitution\");\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n\n          if (this.lookahead().type !== types.num) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, \"'readonly' type modifier is only permitted on array and tuple literal types.\");\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, \"Escape sequence in keyword asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, `'${descriptor}' list cannot be empty.`);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      node.body = this.tsParseModuleBlock();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      node.body = this.tsParseModuleBlock();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, \"A parameter property may not be declared using a binding pattern.\");\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsync(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) && this.lookahead().type === types.eq) {\n      return this.tsParseImportEqualsDeclaration(node);\n    }\n\n    return super.parseImport(node);\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const modifiers = this.tsParseModifiers([\"abstract\", \"readonly\", \"declare\"]);\n    Object.assign(member, modifiers);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (modifiers.abstract) {\n        this.raise(member.start, \"Index signatures cannot have the 'abstract' modifier\");\n      }\n\n      if (isStatic) {\n        this.raise(member.start, \"Index signatures cannot have the 'static' modifier\");\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, `Index signatures cannot have an accessibility modifier ('${member.accessibility}')`);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, \"Class methods cannot have the 'readonly' modifier\");\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, \"Class methods cannot have the 'declare' modifier\");\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, \"'declare' class fields cannot have an initializer\");\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, \"Private elements cannot have the 'abstract' modifier.\");\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, `Private elements cannot have an accessibility modifier ('${node.accessibility}')`);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const context = this.state.context;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if (jsx && jsx.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if (typeCast && typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if (jsx && jsx.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if (typeCast && typeCast.thrown) throw typeCast.error;\n    throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refShorthandDefaultPos);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isBinding, contextDescription);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n        return node;\n\n      default:\n        return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList, isBinding) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!isBinding) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, \"Unexpected type cast in parameter position.\");\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr._exprListItem && expr.type === \"TsTypeCastExpression\") {\n        this.raise(expr.start, \"Did not expect a type annotation here.\");\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n};\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const specifiers = node.specifiers;\n\n    if (specifiers && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode], true);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nclass LocationParser extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, message, {\n    missingPluginNames,\n    code\n  } = {}) {\n    const loc = this.getLocationForPosition(pos);\n    message += ` (${loc.line}:${loc.column})`;\n    const err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n\n    if (code !== undefined) {\n      err.code = code;\n    }\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.inClassProperty = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.classLevel = 0;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.tokens = [];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.containsOctal = false;\n    this.octalPosition = null;\n    this.exportedIdentifiers = [];\n    this.invalidTemplateEscapePosition = null;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.state.tokens.push(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.state.tokens.push(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, \"Unterminated comment\");\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, \"Unexpected digit after hash token\");\n    }\n\n    if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) {\n      ++this.state.pos;\n      this.finishToken(types.hash);\n      return;\n    } else if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      this.finishOp(types.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, \"Unexpected character '#'\");\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== 33) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        ++this.state.pos;\n        this.finishToken(types.bracketL);\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        ++this.state.pos;\n        this.finishToken(types.braceL);\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, `Unexpected character '${String.fromCodePoint(code)}'`);\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === 95) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\");\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, \"Expected number in radix \" + radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n\n    let octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, \"Legacy octal literals are not allowed in strict mode\");\n      }\n\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, \"Numeric separator can not be used after leading 0\");\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === 110) {\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition;\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated template\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          const codePos = this.state.pos - 1;\n          this.state.invalidTemplateEscapePosition = codePos;\n          return null;\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, \"Invalid Unicode escape\");\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, `Invalid identifier ${word}`);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, `Escape sequence in keyword ${kw}`);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nconst literal = /^('|\")((?:\\\\?.)*?)\\1/;\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const next = this.nextTokenStart();\n\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  eatRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling the parser plugin: '${name}'`, {\n        missingPluginNames: [name]\n      });\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`, {\n        missingPluginNames: names\n      });\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n  strictDirective(start) {\n    for (;;) {\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      const match = literal.exec(this.input.slice(start));\n      if (!match) break;\n      if (match[2] === \"use strict\") return true;\n      start += match[0].length;\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n\n      if (this.input[start] === \";\") {\n        start++;\n      }\n    }\n\n    return false;\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isBinding, contextDescription) {\n    var _node$extra2;\n\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            var _node$extra;\n\n            const prop = node.properties[i];\n            const isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n\n            if (isLast && prop.type === \"RestElement\" && ((_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma)) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            const arg = node.argument;\n            this.toAssignable(arg, isBinding, contextDescription);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding, contextDescription, (_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isBinding, contextDescription);\n          break;\n\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n      }\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isBinding, contextDescription);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\");\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, `${bindingType === BIND_NONE ? \"Assigning to\" : \"Binding\"} '${expr.name}' in strict mode`);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, \"Argument name clash\");\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\");\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, \"Binding member expression\");\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          const message = (bindingType === BIND_NONE ? \"Invalid\" : \"Binding invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n          this.raise(expr.start, message);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, \"Invalid rest operator's argument\");\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, `Rest element must be last element`);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, `Unexpected trailing comma after rest element`);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass ExpressionParser extends LValParser {\n  checkDuplicatedProto(prop, protoRef) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used && !protoRef.start) {\n        protoRef.start = key.start;\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  getExpression() {\n    this.scope.enter(SCOPE_PROGRAM);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.scope.inGenerator) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let failOnShorthandAssign;\n\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = {\n        start: 0\n      };\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n\n      if (refShorthandDefaultPos.start >= node.left.start) {\n        refShorthandDefaultPos.start = 0;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      const maybePattern = unwrapParenthesizedExpression(left);\n      let patternErrorMsg;\n\n      if (maybePattern.type === \"ObjectPattern\") {\n        patternErrorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (maybePattern.type === \"ArrayPattern\") {\n        patternErrorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n\n      if (patternErrorMsg && (left.extra && left.extra.parenthesized || left.type === \"ParenthesizedExpression\")) {\n        this.raise(maybePattern.start, `You're trying to assign to a parenthesized expression, eg. instead of ${patternErrorMsg}`);\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    const prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n        }\n\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (op === types.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.scope.inAsync) {\n            throw this.raise(this.state.start, `Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal`);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n\n        if (op === types.nullishCoalescing) {\n          if (left.type === \"LogicalExpression\" && left.operator !== \"??\" && !(left.extra && left.extra.parenthesized)) {\n            throw this.raise(left.start, `Nullish coalescing operator(??) requires parens when mixing with logical operators`);\n          } else if (node.right.type === \"LogicalExpression\" && node.right.operator !== \"??\" && !(node.right.extra && node.right.extra.parenthesized)) {\n            throw this.raise(node.right.start, `Nullish coalescing operator(??) requires parens when mixing with logical operators`);\n          }\n        }\n\n        this.finishNode(node, op === types.logicalOR || op === types.logicalAND || op === types.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, \"Deleting local variable in strict mode\");\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.match(types.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(types.bracketL)) {\n        node.object = base;\n        node.property = this.parseExpression();\n        node.computed = true;\n        node.optional = true;\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else if (this.eat(types.parenL)) {\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else {\n        node.object = base;\n        node.property = this.parseIdentifier(true);\n        node.computed = false;\n        node.optional = true;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseMaybePrivateName();\n      node.computed = false;\n\n      if (node.property.type === \"PrivateName\" && node.object.type === \"Super\") {\n        this.raise(startPos, \"Private fields can't be accessed on super\");\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(types.bracketR);\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, \"Tagged Template Literals are not allowed in optionalChain\");\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      } else {\n        const importArg = node.arguments[0];\n\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, \"... is not allowed in import()\");\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, \"Trailing comma is disallowed inside import(...) arguments\");\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super() is only valid inside a class constructor of a subclass. \" + \"Maybe a typo in the method name ('constructor') or not extending another class?\");\n        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super is only allowed in object methods and classes\");\n        }\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.raise(node.start, \"super can only be used with function calls (i.e. super()) or \" + \"in property accesses (i.e. super.prop or super[prop])\");\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        this.expectPlugin(\"dynamicImport\", node.start);\n\n        if (!this.match(types.parenL)) {\n          this.unexpected(null, types.parenL);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseFunction(node, undefined, true);\n          } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.parseArrowExpression(node, params, true);\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          node.body = this.parseBlock();\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos, node);\n\n          if (!this.state.maybeInArrowParameters) {\n            this.toReferencedList(node.elements);\n          }\n\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"ArrayExpression\");\n        }\n\n      case types.braceL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(false, refShorthandDefaultPos);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, \"Binding should be performed on object property.\");\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\");\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, `Topic reference was used in a lexical context without topic binding`);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName() {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.scope.inGenerator && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, `The only valid meta property for ${meta.name} is ${meta.name}.${propertyName}`);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(types.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raise(id.start, `import.meta may appear only with 'sourceType: \"module\"'`, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, `Dynamic imports require a parameter: import('a.js')`);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n        let error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\");\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\");\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\");\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(isPattern, refShorthandDefaultPos) {\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(types.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refShorthandDefaultPos);\n      if (!isPattern) this.checkDuplicatedProto(prop, propHash);\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    if (!this.match(types.eq) && propHash.start !== undefined) {\n      this.raise(propHash.start, \"Redefinition of __proto__ property\");\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  }\n\n  isAsyncProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n  }\n\n  parseObjectMember(isPattern, refShorthandDefaultPos) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\");\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(types.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.parseFunctionParams(node, allowModifiers);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    if (params) this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    this.parseFunctionBody(node, true);\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, true, \"arrow function parameters\", trailingCommaPos);\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (let _i2 = 0, _node$body$directives = node.body.directives; _i2 < _node$body$directives.length; _i2++) {\n        const directive = _node$body$directives[_i2];\n\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldStrict = this.state.strict;\n    let useStrict = false;\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const nonSimple = !this.isSimpleParamList(node.params);\n\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.state.end);\n\n        if (useStrict && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        }\n      }\n\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (useStrict) this.state.strict = true;\n      this.checkParams(node, !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple, allowExpression, !oldStrict && useStrict);\n      node.body = this.parseBlock(true, false);\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n\n    if (this.state.strict && node.id) {\n      this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, !oldStrict && useStrict);\n    }\n\n    this.state.strict = oldStrict;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refShorthandDefaultPos, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, \"Unexpected argument placeholder\");\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      if ((name === \"class\" || name === \"function\") && (this.state.lastTokEnd !== this.state.lastTokStart + 1 || this.input.charCodeAt(this.state.lastTokStart) !== 46)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.scope.inGenerator && word === \"yield\") {\n      this.raise(startLoc, \"Can not use 'yield' as identifier inside a generator\");\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.scope.inAsync) {\n        this.raise(startLoc, \"Can not use 'await' as identifier inside an async function\");\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInArrowParameters || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.state.inClassProperty && word === \"arguments\") {\n      this.raise(startLoc, \"'arguments' is not allowed in class field initializer\");\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, `Unexpected keyword '${word}'`);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.scope.inAsync && word === \"await\") {\n        this.raise(startLoc, \"Can not use keyword 'await' outside an async function\");\n      } else {\n        this.raise(startLoc, `Unexpected reserved word '${word}'`);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.scope.inAsync;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) return this.inModule;\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"await is not allowed in async function parameters\");\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, `Pipeline head should not be a comma-separated sequence expression`);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, `Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized`);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, `Pipeline body may not be a comma-separated sequence expression`);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, `Pipeline is in topic style but does not use topic reference`);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw new Error(`Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const _Array$from$_i = _slicedToArray(_Array$from[_i], 1),\n              name = _Array$from$_i[0];\n\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, `Export '${name}' is not defined`);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.state.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, \"In strict mode code, functions can only be declared at top level or inside a block\");\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, \"In non-strict mode code, functions can only be declared at top level, \" + \"inside a block, or as the body of an if statement\");\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, \"Lexical declaration cannot appear in a single-statement context\");\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, \"Async functions can only be declared at the top level or inside a block\");\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, `'import' and 'export' may appear only with 'sourceType: \"module\"'`, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. \" + \"Please use `export @dec class` instead.\");\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const init = this.parseExpression(true, refShorthandDefaultPos);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.scope.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, `Label '${maybeName}' is already declared`);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end) {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, `${isForIn ? \"for-in\" : \"for-of\"} loop variable declaration may not have an initializer`);\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, \"Generators can only be declared at the top level or inside a block\");\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInClassProperty = this.state.inClassProperty;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.inClassProperty = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(functionFlags(node.async, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inClassProperty = oldInClassProperty;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper) {\n    this.state.classLevel++;\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, \"You have trailing decorators with no method\");\n    }\n\n    this.state.classLevel--;\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(types.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        const method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return;\n      } else if (this.isClassProperty()) {\n        const prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't be an async function\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't have get/set modifier\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, \"Classes may not have static property named prototype\");\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, \"Classes may not have a private field named '#constructor'\");\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, \"Classes may not have a field named 'constructor'\");\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true));\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    this.state.inClassProperty = true;\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.state.inClassProperty = true;\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, `Unexpected token, expected \"function\"`);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n          const specifier = _node$specifiers[_i3];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n            const declaration = _node$declaration$dec[_i4];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n        const prop = _node$properties[_i5];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n        const elem = _node$elements[_i6];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : `\\`${name}\\` has already been exported. Exported identifiers must be unique.`);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, \"ES2015 named imports do not destructure. \" + \"Use another statement for destructuring after the import.\");\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.scope.enter(SCOPE_PROGRAM);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n\n    const _ref = Array.isArray(plugin) ? plugin : [plugin, {}],\n          _ref2 = _slicedToArray(_ref, 2),\n          name = _ref2[0],\n          options = _ref2[1];\n\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;","map":{"version":3,"sources":["/Users/apple/Desktop/react-js/my-app/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","TokenType","constructor","label","conf","keyword","rightAssociative","binop","updateContext","keywords","Map","createKeyword","name","options","token","set","createBinop","types","num","bigint","regexp","string","eof","bracketL","bracketR","braceL","braceBarL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","template","ellipsis","backQuote","dollarBraceL","at","hash","interpreterDirective","eq","assign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","relational","bitShift","plusMin","modulo","star","slash","exponent","_break","_case","_catch","_continue","_debugger","_default","_do","_else","_finally","_for","_function","_if","_return","_switch","_throw","_try","_var","_const","_while","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_in","_instanceof","_typeof","_void","_delete","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ASYNC","SCOPE_GENERATOR","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_TS_MODULE","SCOPE_VAR","functionFlags","isAsync","isGenerator","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","isSimpleProperty","node","type","kind","method","estree","superClass","estreeParseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","start","loc","expression","raw","extra","finishNodeAt","end","slice","initFunction","checkDeclaration","checkGetterSetterParams","prop","paramCount","params","length","raise","checkLVal","expr","bindingType","checkClashes","contextDescription","disallowLetBinding","properties","forEach","checkDuplicatedProto","protoRef","computed","shorthand","key","String","used","isStrictBody","isBlockStatement","body","_i","_node$body$body","isValidDirective","parenthesized","stmtToDirective","parseBlockBody","allowDirectives","topLevel","directiveStatements","directives","map","d","concat","pushClassMethod","classBody","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parseExprAtom","refShorthandDefaultPos","state","startPos","startLoc","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","finishNode","parseObjectMethod","isPattern","containsEsc","parseObjectProperty","toAssignable","isBinding","toAssignableObjectExpressionProp","isLast","lineBreak","lineBreakG","source","isNewLine","code","skipWhiteSpace","isWhitespace","TokContext","isExpr","preserveSpace","override","types$1","braceStatement","braceExpression","templateQuasi","parenStatement","parenExpression","p","readTmplToken","functionExpression","functionStatement","context","exprAllowed","out","pop","curContext","prevType","allowed","scope","inGenerator","isIterator","braceIsBlock","statementParens","test","input","lastTokEnd","b_stat","reservedWords","strict","strictBind","reservedWordsStrictSet","Set","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","keywordRelationalOperator","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","pos","i","isIdentifierStart","fromCharCode","isIteratorStart","current","next","isIdentifierChar","reservedTypes","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","undefined","shouldParseTypes","getPluginOption","shouldParseEnums","finishToken","val","addComment","comment","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","inType","expect","flowParseType","flowParsePredicate","moduloLoc","moduloPos","checksLoc","expectContextual","line","column","eat","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","match","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","id","parseIdentifier","typeNode","typeContainer","isRelational","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","returnType","typeAnnotation","resetEndLocation","semicolon","flowParseDeclare","insideModule","flowParseDeclareVariable","eatContextual","flowParseDeclareModuleExports","lastTokStart","flowParseDeclareModule","isContextual","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","unexpected","flowParseTypeAnnotatableIdentifier","declareName","enter","bodyNode","parseImport","exit","hasModuleExport","errorMessage","default","isLet","suggestion","parseExport","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStart","variance","flowParseVariance","ident","bound","jsxTagStart","defaultRequired","typeParameter","expectRelational","oldNoAnonFunctionType","noAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","lookahead","flowParseObjectTypeInternalSlot","optional","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","_allowInexact","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","property","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","lh","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","createIdentifier","flowParsePostfixType","canInsertSemicolon","elementType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","noIn","refNeedsArrowPos","result","tryParse","error","failState","clone","originalNoArrowAt","noArrowAt","tryParseConditionalConsequent","consequent","failed","getArrowLikeExpressions","valid","invalid","alternate","parseMaybeAssign","noArrowParamsConversionAt","disallowInvalid","stack","arrows","finishArrowValidation","every","isAssignable","_node$extra","toAssignableList","trailingComma","checkParams","parse","indexOf","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","specifiers","parseExportSpecifiers","parseExportFrom","eatExportStar","arguments","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","getTokenFromCode","charCodeAt","finishOp","readWord","last","elements","element","operator","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","parseClassProperty","parseClassPrivateProperty","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","parsePropertyName","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdentLoc","firstIdent","specifierTypeKind","isLookaheadContextual","as_ident","imported","__clone","nodeIsTypeImport","specifierIsTypeImport","checkReservedWord","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","hasPlugin","j_oTag","j_expr","arrowExpression","resetStartLocationFromNode","thrown","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","noCalls","callee","parseCallExpressionArguments","abort","parseAsyncArrowWithTypeParameters","aborted","parseSubscript","subscriptState","isLookaheadRelational","expectPlugin","optionalChainMember","stop","typeArguments","finishCallExpression","parseNewArguments","targs","parseArrowExpression","readToken_mult_modulo","hasFlowComment","nextToken","readToken_pipe_amp","parseTopLevel","file","program","fileNode","skipBlockComment","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","includes","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","message","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","parseBooleanLiteral","flowEnumMemberRaw","init","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","memberNode","add","flowEnumStringMembers","initializedMembers","member","_i2","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","_i3","_members$defaultedMem","_i4","_members$defaultedMem2","entities","quot","amp","apos","lt","gt","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","j_cTag","jsxName","jsxText","jsxTagEnd","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","chunkStart","ch","jsxReadEntity","jsxReadNewLine","normalizeCRLF","curLine","lineStart","jsxReadString","quote","str","count","entity","substr","fromCodePoint","parseInt","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","newNode","jsxParseAttributeValue","jsxParseExpressionContainer","jsxParseEmptyExpression","lastTokEndLoc","jsxParseSpreadChild","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","refShortHandDefaultPos","inPropertyName","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","inFunction","currentVarScope","inAsync","allowSuper","currentThisScope","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","checkRedeclarationInScope","maybeExportDefined","delete","isRedeclaredInScope","checkLocalExport","TypeScriptScope","args","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","keywordTypeFromName","typescript","getScopeHandler","tsIsIdentifier","tsNextTokenCanFollowModifier","hasPrecedingLineBreak","tsParseModifier","allowedModifiers","modifier","tsTryParse","bind","tsParseModifiers","modifiers","create","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","tsParseDelimitedListWorker","expectSuccess","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","startNodeAtNode","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","parseIdentifierName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","elementNode","restNode","tsParseType","checkCommaAfterRest","optionalTypeNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","templateNode","parseTemplate","expressions","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","lookaheadCharCode","parseMaybeUnary","tsParseArrayTypeOrHigher","objectType","indexType","tsParseTypeOperator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","find","kw","tsParseUnionOrIntersectionType","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","asserts","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","isLineTerminator","starttype","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminatorAndMatch","cls","abstract","tokenType","tsTryParseGenericAsyncArrowFunction","tsIsDeclarationStart","parseAssignableListItem","decorators","accessibility","parseAccessModifier","elt","pp","parameter","bodilessType","registerFunctionStatementId","nonNullExpression","atPossibleAsync","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","checkKeywords","checkDuplicateExports","isAbstractClass","parseStatementContent","ahead","parseClassMember","constructorAllowsSuper","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","resetStartLocation","parseClassPropertyAnnotation","definite","equal","typeCast","parseBindingAtom","parseMaybeDecoratorArguments","isInParens","_exprListItem","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","placeholder","placeholders","parsePlaceholder","expectedNode","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","parseClassBody","exported","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","identifier","plugins","some","plugin","Array","isArray","option","PIPELINE_PROPOSALS","validatePlugins","decoratorsBeforeExport","join","mixinPlugins","mixinPluginNames","keys","defaultOptions","sourceType","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","strictMode","ranges","tokens","createParenthesizedExpressions","errorRecovery","getOptions","opts","_Object$keys","Position","col","SourceLocation","getLineInfo","offset","lastIndex","index","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","get","CommentsParser","filename","trailingComments","leadingComments","adjustCommentsAfterTrailingComma","takeAllComments","lastElement","j","commentPreviousNode","splice","newTrailingComments","leadingComment","processComment","commentStack","firstChild","lastChild","lastInStack","innerComments","LocationParser","getLocationForPosition","lastTokStartLoc","endLoc","missingPluginNames","err","SyntaxError","missingPlugin","isLookahead","errors","State","potentialArrowAt","inParameters","maybeInArrowParameters","inPipeline","inClassProperty","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","classLevel","labels","decoratorStack","yieldPos","awaitPos","comments","containsOctal","octalPosition","exportedIdentifiers","invalidTemplateEscapePosition","curPosition","skipArrays","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","checkKeywordEscapes","old","curr","nextTokenStart","thisTokEnd","skip","setStrict","lastIndexOf","skipSpace","codePointAt","pushComment","block","text","skipLineComment","startSkip","loop","readToken_numberSign","readToken_interpreter","nextPos","readToken_dot","readNumber","readToken_slash","readRegexp","width","readToken_caret","readToken_plus_min","readToken_lt_gt","size","readToken_eq_excl","readToken_question","next2","readRadixNumber","readString","escaped","inClass","charAt","content","mods","char","charCode","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","total","Infinity","prev","Number","isNaN","isBigInt","replace","startsWithDot","isFloat","isNonOctalDecimalInt","octal","underscorePos","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","readEscapedChar","containsInvalid","inTemplate","octalStr","n","readWord1","escStart","identifierCheck","esc","parent","update","UtilParser","addExtra","op","afterNext","eatRelational","isUnparsedContextual","nameStart","nameEnd","messageOrType","expectOnePlugin","names","checkYieldAwaitInDefaultParams","strictDirective","fn","oldState","abortSignal","Node","parser","range","NodeUtils","locationNode","LValParser","_node$extra2","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","parseRestBinding","parseObj","close","closeCharCode","allowEmpty","elts","first","parseDecorator","strictModeChanged","_expr$properties","_expr$elements","elem","unwrapParenthesizedExpression","ExpressionParser","getExpression","parseYield","failOnShorthandAssign","parseMaybeConditional","maybePattern","patternErrorMsg","parseExprOps","prec","checkPipelineAtInfixOperator","parseExprOpRightExpr","withTopicPermittingContext","parseSmartPipelineBody","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","isAwaitAllowed","parseAwait","parseExprSubscripts","maybeAsyncArrow","parseNoCallExpr","parseMaybePrivateName","oldMaybeInArrowParameters","oldYieldPos","oldAwaitPos","tag","quasi","importArg","possibleAsyncArrow","dynamicImport","allowPlaceholder","nodeForExtra","innerParenStart","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseImportMetaProperty","parseFunction","oldLabels","parseExprList","ret","parseFunctionExpression","parseDecorators","parseNew","primaryTopicReferenceIsAllowedInCurrentTopicContext","registerTopicReference","isPrivate","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenStart","metaProp","parseTemplateElement","isTagged","cooked","tail","curElt","quasis","propHash","parseObjectMember","isAsyncProp","isGetterOrSetterMethod","oldInPropertyName","generator","async","_node$body$directives","isExpression","oldStrict","useStrict","oldInParameters","nonSimple","isSimpleParamList","errorPos","nameHash","identifierName","reservedTest","delegate","childExpression","pipelineStyle","checkSmartPipelineBodyStyle","checkSmartPipelineBodyEarlyErrors","parseSmartPipelineBodyInStyle","topicReferenceWasUsedInCurrentTopicContext","isSimpleReference","callback","outerContextTopicState","withTopicForbiddingContext","outerContextSoloAwaitState","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","StatementParser","interpreter","parseInterpreterDirective","_Array$from","from","nextCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","parseVar","declarations","parseForIn","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","handler","clause","simple","finalizer","_this$state$labels","statementStart","createNewLexicalScope","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","oldInClassProperty","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassPropertyName","isSimple","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","checkNames","isDefault","isFrom","_node$specifiers","_node$declaration$dec","_i5","_node$properties","_i6","_node$elements","nodes","parseNext","Parser","pluginsMap","pluginMap","getParser","ast","_unused","moduleError","_unused2","getParserClass","parserClassCache","pluginsFromOptions","pluginList","tokTypes"],"mappings":"AAAA;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AAEA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,UAAU,GAAG,IAAnB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAG,IAAjB;AACA,MAAMC,MAAM,GAAG,IAAf;AACA,MAAMC,OAAO,GAAG,IAAhB;;AACA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAI,GAAG,EAAf,EAAmB;AAC5B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,OAAL,GAAeD,IAAI,CAACC,OAApB;AACA,SAAKV,UAAL,GAAkB,CAAC,CAACS,IAAI,CAACT,UAAzB;AACA,SAAKC,UAAL,GAAkB,CAAC,CAACQ,IAAI,CAACR,UAAzB;AACA,SAAKU,gBAAL,GAAwB,CAAC,CAACF,IAAI,CAACE,gBAA/B;AACA,SAAKT,MAAL,GAAc,CAAC,CAACO,IAAI,CAACP,MAArB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAACM,IAAI,CAACN,QAAvB;AACA,SAAKC,MAAL,GAAc,CAAC,CAACK,IAAI,CAACL,MAArB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACI,IAAI,CAACJ,OAAtB;AACA,SAAKO,KAAL,GAAaH,IAAI,CAACG,KAAL,IAAc,IAAd,GAAqBH,IAAI,CAACG,KAA1B,GAAkC,IAA/C;AACA,SAAKC,aAAL,GAAqB,IAArB;AACD;;AAba;;AAgBhB,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,OAAO,GAAG,EAAvC,EAA2C;AACzCA,EAAAA,OAAO,CAACR,OAAR,GAAkBO,IAAlB;AACA,QAAME,KAAK,GAAG,IAAIb,SAAJ,CAAcW,IAAd,EAAoBC,OAApB,CAAd;AACAJ,EAAAA,QAAQ,CAACM,GAAT,CAAaH,IAAb,EAAmBE,KAAnB;AACA,SAAOA,KAAP;AACD;;AAED,SAASE,WAAT,CAAqBJ,IAArB,EAA2BL,KAA3B,EAAkC;AAChC,SAAO,IAAIN,SAAJ,CAAcW,IAAd,EAAoB;AACzBjB,IAAAA,UADyB;AAEzBY,IAAAA;AAFyB,GAApB,CAAP;AAID;;AAED,MAAMU,KAAK,GAAG;AACZC,EAAAA,GAAG,EAAE,IAAIjB,SAAJ,CAAc,KAAd,EAAqB;AACxBL,IAAAA;AADwB,GAArB,CADO;AAIZuB,EAAAA,MAAM,EAAE,IAAIlB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAJI;AAOZwB,EAAAA,MAAM,EAAE,IAAInB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAPI;AAUZyB,EAAAA,MAAM,EAAE,IAAIpB,SAAJ,CAAc,QAAd,EAAwB;AAC9BL,IAAAA;AAD8B,GAAxB,CAVI;AAaZgB,EAAAA,IAAI,EAAE,IAAIX,SAAJ,CAAc,MAAd,EAAsB;AAC1BL,IAAAA;AAD0B,GAAtB,CAbM;AAgBZ0B,EAAAA,GAAG,EAAE,IAAIrB,SAAJ,CAAc,KAAd,CAhBO;AAiBZsB,EAAAA,QAAQ,EAAE,IAAItB,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA,UAD2B;AAE3BC,IAAAA;AAF2B,GAAnB,CAjBE;AAqBZ4B,EAAAA,QAAQ,EAAE,IAAIvB,SAAJ,CAAc,GAAd,CArBE;AAsBZwB,EAAAA,MAAM,EAAE,IAAIxB,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CAtBI;AA0BZ8B,EAAAA,SAAS,EAAE,IAAIzB,SAAJ,CAAc,IAAd,EAAoB;AAC7BN,IAAAA,UAD6B;AAE7BC,IAAAA;AAF6B,GAApB,CA1BC;AA8BZ+B,EAAAA,MAAM,EAAE,IAAI1B,SAAJ,CAAc,GAAd,CA9BI;AA+BZ2B,EAAAA,SAAS,EAAE,IAAI3B,SAAJ,CAAc,IAAd,CA/BC;AAgCZ4B,EAAAA,MAAM,EAAE,IAAI5B,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAnB,CAhCI;AAoCZkC,EAAAA,MAAM,EAAE,IAAI7B,SAAJ,CAAc,GAAd,CApCI;AAqCZ8B,EAAAA,KAAK,EAAE,IAAI9B,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CArCK;AAwCZqC,EAAAA,IAAI,EAAE,IAAI/B,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA;AADuB,GAAnB,CAxCM;AA2CZsC,EAAAA,KAAK,EAAE,IAAIhC,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA;AADwB,GAAnB,CA3CK;AA8CZuC,EAAAA,WAAW,EAAE,IAAIjC,SAAJ,CAAc,IAAd,EAAoB;AAC/BN,IAAAA;AAD+B,GAApB,CA9CD;AAiDZwC,EAAAA,GAAG,EAAE,IAAIlC,SAAJ,CAAc,GAAd,CAjDO;AAkDZmC,EAAAA,QAAQ,EAAE,IAAInC,SAAJ,CAAc,GAAd,EAAmB;AAC3BN,IAAAA;AAD2B,GAAnB,CAlDE;AAqDZ0C,EAAAA,WAAW,EAAE,IAAIpC,SAAJ,CAAc,IAAd,CArDD;AAsDZqC,EAAAA,KAAK,EAAE,IAAIrC,SAAJ,CAAc,IAAd,EAAoB;AACzBN,IAAAA;AADyB,GAApB,CAtDK;AAyDZ4C,EAAAA,QAAQ,EAAE,IAAItC,SAAJ,CAAc,UAAd,CAzDE;AA0DZuC,EAAAA,QAAQ,EAAE,IAAIvC,SAAJ,CAAc,KAAd,EAAqB;AAC7BN,IAAAA;AAD6B,GAArB,CA1DE;AA6DZ8C,EAAAA,SAAS,EAAE,IAAIxC,SAAJ,CAAc,GAAd,EAAmB;AAC5BL,IAAAA;AAD4B,GAAnB,CA7DC;AAgEZ8C,EAAAA,YAAY,EAAE,IAAIzC,SAAJ,CAAc,IAAd,EAAoB;AAChCN,IAAAA,UADgC;AAEhCC,IAAAA;AAFgC,GAApB,CAhEF;AAoEZ+C,EAAAA,EAAE,EAAE,IAAI1C,SAAJ,CAAc,GAAd,CApEQ;AAqEZ2C,EAAAA,IAAI,EAAE,IAAI3C,SAAJ,CAAc,GAAd,EAAmB;AACvBL,IAAAA;AADuB,GAAnB,CArEM;AAwEZiD,EAAAA,oBAAoB,EAAE,IAAI5C,SAAJ,CAAc,OAAd,CAxEV;AAyEZ6C,EAAAA,EAAE,EAAE,IAAI7C,SAAJ,CAAc,GAAd,EAAmB;AACrBN,IAAAA,UADqB;AAErBG,IAAAA;AAFqB,GAAnB,CAzEQ;AA6EZiD,EAAAA,MAAM,EAAE,IAAI9C,SAAJ,CAAc,IAAd,EAAoB;AAC1BN,IAAAA,UAD0B;AAE1BG,IAAAA;AAF0B,GAApB,CA7EI;AAiFZkD,EAAAA,MAAM,EAAE,IAAI/C,SAAJ,CAAc,OAAd,EAAuB;AAC7BF,IAAAA,MAD6B;AAE7BC,IAAAA,OAF6B;AAG7BJ,IAAAA;AAH6B,GAAvB,CAjFI;AAsFZqD,EAAAA,IAAI,EAAE,IAAIhD,SAAJ,CAAc,GAAd,EAAmB;AACvBN,IAAAA,UADuB;AAEvBI,IAAAA,MAFuB;AAGvBH,IAAAA;AAHuB,GAAnB,CAtFM;AA2FZsD,EAAAA,KAAK,EAAE,IAAIjD,SAAJ,CAAc,GAAd,EAAmB;AACxBN,IAAAA,UADwB;AAExBI,IAAAA,MAFwB;AAGxBH,IAAAA;AAHwB,GAAnB,CA3FK;AAgGZuD,EAAAA,QAAQ,EAAEnC,WAAW,CAAC,IAAD,EAAO,CAAP,CAhGT;AAiGZoC,EAAAA,iBAAiB,EAAEpC,WAAW,CAAC,IAAD,EAAO,CAAP,CAjGlB;AAkGZqC,EAAAA,SAAS,EAAErC,WAAW,CAAC,IAAD,EAAO,CAAP,CAlGV;AAmGZsC,EAAAA,UAAU,EAAEtC,WAAW,CAAC,IAAD,EAAO,CAAP,CAnGX;AAoGZuC,EAAAA,SAAS,EAAEvC,WAAW,CAAC,GAAD,EAAM,CAAN,CApGV;AAqGZwC,EAAAA,UAAU,EAAExC,WAAW,CAAC,GAAD,EAAM,CAAN,CArGX;AAsGZyC,EAAAA,UAAU,EAAEzC,WAAW,CAAC,GAAD,EAAM,CAAN,CAtGX;AAuGZ0C,EAAAA,QAAQ,EAAE1C,WAAW,CAAC,eAAD,EAAkB,CAAlB,CAvGT;AAwGZ2C,EAAAA,UAAU,EAAE3C,WAAW,CAAC,WAAD,EAAc,CAAd,CAxGX;AAyGZ4C,EAAAA,QAAQ,EAAE5C,WAAW,CAAC,WAAD,EAAc,CAAd,CAzGT;AA0GZ6C,EAAAA,OAAO,EAAE,IAAI5D,SAAJ,CAAc,KAAd,EAAqB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,EAFqB;AAG5BR,IAAAA,MAH4B;AAI5BH,IAAAA;AAJ4B,GAArB,CA1GG;AAgHZkE,EAAAA,MAAM,EAAE,IAAI7D,SAAJ,CAAc,GAAd,EAAmB;AACzBN,IAAAA,UADyB;AAEzBY,IAAAA,KAAK,EAAE,EAFkB;AAGzBX,IAAAA;AAHyB,GAAnB,CAhHI;AAqHZmE,EAAAA,IAAI,EAAE/C,WAAW,CAAC,GAAD,EAAM,EAAN,CArHL;AAsHZgD,EAAAA,KAAK,EAAEhD,WAAW,CAAC,GAAD,EAAM,EAAN,CAtHN;AAuHZiD,EAAAA,QAAQ,EAAE,IAAIhE,SAAJ,CAAc,IAAd,EAAoB;AAC5BN,IAAAA,UAD4B;AAE5BY,IAAAA,KAAK,EAAE,EAFqB;AAG5BD,IAAAA,gBAAgB,EAAE;AAHU,GAApB,CAvHE;AA4HZ4D,EAAAA,MAAM,EAAEvD,aAAa,CAAC,OAAD,CA5HT;AA6HZwD,EAAAA,KAAK,EAAExD,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CA7HR;AAgIZyE,EAAAA,MAAM,EAAEzD,aAAa,CAAC,OAAD,CAhIT;AAiIZ0D,EAAAA,SAAS,EAAE1D,aAAa,CAAC,UAAD,CAjIZ;AAkIZ2D,EAAAA,SAAS,EAAE3D,aAAa,CAAC,UAAD,CAlIZ;AAmIZ4D,EAAAA,QAAQ,EAAE5D,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAnIX;AAsIZ6E,EAAAA,GAAG,EAAE7D,aAAa,CAAC,IAAD,EAAO;AACvBd,IAAAA,MADuB;AAEvBF,IAAAA;AAFuB,GAAP,CAtIN;AA0IZ8E,EAAAA,KAAK,EAAE9D,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA;AAD2B,GAAT,CA1IR;AA6IZ+E,EAAAA,QAAQ,EAAE/D,aAAa,CAAC,SAAD,CA7IX;AA8IZgE,EAAAA,IAAI,EAAEhE,aAAa,CAAC,KAAD,EAAQ;AACzBd,IAAAA;AADyB,GAAR,CA9IP;AAiJZ+E,EAAAA,SAAS,EAAEjE,aAAa,CAAC,UAAD,EAAa;AACnCf,IAAAA;AADmC,GAAb,CAjJZ;AAoJZiF,EAAAA,GAAG,EAAElE,aAAa,CAAC,IAAD,CApJN;AAqJZmE,EAAAA,OAAO,EAAEnE,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA;AAD+B,GAAX,CArJV;AAwJZoF,EAAAA,OAAO,EAAEpE,aAAa,CAAC,QAAD,CAxJV;AAyJZqE,EAAAA,MAAM,EAAErE,aAAa,CAAC,OAAD,EAAU;AAC7BhB,IAAAA,UAD6B;AAE7BI,IAAAA,MAF6B;AAG7BH,IAAAA;AAH6B,GAAV,CAzJT;AA8JZqF,EAAAA,IAAI,EAAEtE,aAAa,CAAC,KAAD,CA9JP;AA+JZuE,EAAAA,IAAI,EAAEvE,aAAa,CAAC,KAAD,CA/JP;AAgKZwE,EAAAA,MAAM,EAAExE,aAAa,CAAC,OAAD,CAhKT;AAiKZyE,EAAAA,MAAM,EAAEzE,aAAa,CAAC,OAAD,EAAU;AAC7Bd,IAAAA;AAD6B,GAAV,CAjKT;AAoKZwF,EAAAA,KAAK,EAAE1E,aAAa,CAAC,MAAD,CApKR;AAqKZ2E,EAAAA,IAAI,EAAE3E,aAAa,CAAC,KAAD,EAAQ;AACzBhB,IAAAA,UADyB;AAEzBC,IAAAA;AAFyB,GAAR,CArKP;AAyKZ2F,EAAAA,KAAK,EAAE5E,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CAzKR;AA4KZ4F,EAAAA,MAAM,EAAE7E,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA5KT;AA+KZ6F,EAAAA,MAAM,EAAE9E,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA/KT;AAkLZ8F,EAAAA,QAAQ,EAAE/E,aAAa,CAAC,SAAD,EAAY;AACjChB,IAAAA;AADiC,GAAZ,CAlLX;AAqLZgG,EAAAA,OAAO,EAAEhF,aAAa,CAAC,QAAD,CArLV;AAsLZiF,EAAAA,OAAO,EAAEjF,aAAa,CAAC,QAAD,EAAW;AAC/Bf,IAAAA;AAD+B,GAAX,CAtLV;AAyLZiG,EAAAA,KAAK,EAAElF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CAzLR;AA4LZkG,EAAAA,KAAK,EAAEnF,aAAa,CAAC,MAAD,EAAS;AAC3Bf,IAAAA;AAD2B,GAAT,CA5LR;AA+LZmG,EAAAA,MAAM,EAAEpF,aAAa,CAAC,OAAD,EAAU;AAC7Bf,IAAAA;AAD6B,GAAV,CA/LT;AAkMZoG,EAAAA,GAAG,EAAErF,aAAa,CAAC,IAAD,EAAO;AACvBhB,IAAAA,UADuB;AAEvBY,IAAAA,KAAK,EAAE;AAFgB,GAAP,CAlMN;AAsMZ0F,EAAAA,WAAW,EAAEtF,aAAa,CAAC,YAAD,EAAe;AACvChB,IAAAA,UADuC;AAEvCY,IAAAA,KAAK,EAAE;AAFgC,GAAf,CAtMd;AA0MZ2F,EAAAA,OAAO,EAAEvF,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX,CA1MV;AA+MZuG,EAAAA,KAAK,EAAExF,aAAa,CAAC,MAAD,EAAS;AAC3BhB,IAAAA,UAD2B;AAE3BI,IAAAA,MAF2B;AAG3BH,IAAAA;AAH2B,GAAT,CA/MR;AAoNZwG,EAAAA,OAAO,EAAEzF,aAAa,CAAC,QAAD,EAAW;AAC/BhB,IAAAA,UAD+B;AAE/BI,IAAAA,MAF+B;AAG/BH,IAAAA;AAH+B,GAAX;AApNV,CAAd;AA2NA,MAAMyG,WAAW,GAAG,YAApB;AAAA,MACMC,aAAa,GAAG,YADtB;AAAA,MAEMC,cAAc,GAAG,YAFvB;AAAA,MAGMC,WAAW,GAAG,YAHpB;AAAA,MAIMC,eAAe,GAAG,YAJxB;AAAA,MAKMC,WAAW,GAAG,YALpB;AAAA,MAMMC,kBAAkB,GAAG,YAN3B;AAAA,MAOMC,WAAW,GAAG,YAPpB;AAAA,MAQMC,kBAAkB,GAAG,YAR3B;AAAA,MASMC,WAAW,GAAG,YATpB;AAAA,MAUMC,eAAe,GAAG,YAVxB;AAAA,MAWMC,SAAS,GAAGV,aAAa,GAAGC,cAAhB,GAAiCQ,eAXnD;;AAYA,SAASE,aAAT,CAAuBC,OAAvB,EAAgCC,WAAhC,EAA6C;AAC3C,SAAOZ,cAAc,IAAIW,OAAO,GAAGV,WAAH,GAAiB,CAA5B,CAAd,IAAgDW,WAAW,GAAGV,eAAH,GAAqB,CAAhF,CAAP;AACD;;AACD,MAAMW,eAAe,GAAG,aAAxB;AAAA,MACMC,cAAc,GAAG,aADvB;AAAA,MAEMC,cAAc,GAAG,aAFvB;AAAA,MAGMC,kBAAkB,GAAG,aAH3B;AAAA,MAIMC,mBAAmB,GAAG,aAJ5B;AAAA,MAKMC,eAAe,GAAG,aALxB;AAAA,MAMMC,gBAAgB,GAAG,aANzB;AAAA,MAOMC,kBAAkB,GAAG,aAP3B;AAAA,MAQMC,wBAAwB,GAAG,aARjC;AAAA,MASMC,yBAAyB,GAAG,aATlC;AAUA,MAAMC,UAAU,GAAGV,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDG,gBAA3E;AAAA,MACMK,YAAY,GAAGX,eAAe,GAAG,CAAlB,GAAsBG,kBAAtB,GAA2C,CADhE;AAAA,MAEMS,QAAQ,GAAGZ,eAAe,GAAG,CAAlB,GAAsBE,cAAtB,GAAuC,CAFxD;AAAA,MAGMW,aAAa,GAAGb,eAAe,GAAG,CAAlB,GAAsBI,mBAAtB,GAA4C,CAHlE;AAAA,MAIMU,iBAAiB,GAAG,IAAIb,cAAJ,GAAqB,CAArB,GAAyBK,gBAJnD;AAAA,MAKMS,YAAY,GAAG,IAAId,cAAJ,GAAqB,CAArB,GAAyB,CAL9C;AAAA,MAMMe,YAAY,GAAGhB,eAAe,GAAGC,cAAlB,GAAmCE,kBAAnC,GAAwDI,kBAN7E;AAAA,MAOMU,eAAe,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYR,yBAPpC;AAAA,MAQMS,SAAS,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYb,eAR9B;AAAA,MASMc,YAAY,GAAGnB,eAAe,GAAG,CAAlB,GAAsB,CAAtB,GAA0BK,eAT/C;AAAA,MAUMe,kBAAkB,GAAGJ,YAAY,GAAGR,wBAV1C;AAAA,MAWMa,iBAAiB,GAAG,IAAI,CAAJ,GAAQ,CAAR,GAAYZ,yBAXtC;;AAaA,SAASa,gBAAT,CAA0BC,IAA1B,EAAgC;AAC9B,SAAOA,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACC,IAAL,KAAc,UAA9B,IAA4CD,IAAI,CAACE,IAAL,KAAc,MAA1D,IAAoEF,IAAI,CAACG,MAAL,KAAgB,KAA3F;AACD;;AAED,IAAIC,MAAM,GAAIC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACnDC,EAAAA,wBAAwB,CAAC;AACvBC,IAAAA,OADuB;AAEvBC,IAAAA;AAFuB,GAAD,EAGrB;AACD,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAI;AACFA,MAAAA,KAAK,GAAG,IAAIC,MAAJ,CAAWH,OAAX,EAAoBC,KAApB,CAAR;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU,CAAE;;AAEd,UAAMX,IAAI,GAAG,KAAKY,kBAAL,CAAwBH,KAAxB,CAAb;AACAT,IAAAA,IAAI,CAACS,KAAL,GAAa;AACXF,MAAAA,OADW;AAEXC,MAAAA;AAFW,KAAb;AAIA,WAAOR,IAAP;AACD;;AAEDY,EAAAA,kBAAkB,CAAC7J,KAAD,EAAQ;AACxB,WAAO,KAAK8J,YAAL,CAAkB9J,KAAlB,EAAyB,SAAzB,CAAP;AACD;;AAED+J,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAMC,gBAAgB,GAAGD,SAAS,CAAChK,KAAnC;AACA,UAAMkK,IAAI,GAAG,KAAKC,WAAL,CAAiBH,SAAS,CAACI,KAA3B,EAAkCJ,SAAS,CAACK,GAAV,CAAcD,KAAhD,CAAb;AACA,UAAME,UAAU,GAAG,KAAKH,WAAL,CAAiBF,gBAAgB,CAACG,KAAlC,EAAyCH,gBAAgB,CAACI,GAAjB,CAAqBD,KAA9D,CAAnB;AACAE,IAAAA,UAAU,CAACtK,KAAX,GAAmBiK,gBAAgB,CAACjK,KAApC;AACAsK,IAAAA,UAAU,CAACC,GAAX,GAAiBN,gBAAgB,CAACO,KAAjB,CAAuBD,GAAxC;AACAL,IAAAA,IAAI,CAACI,UAAL,GAAkB,KAAKG,YAAL,CAAkBH,UAAlB,EAA8B,SAA9B,EAAyCL,gBAAgB,CAACS,GAA1D,EAA+DT,gBAAgB,CAACI,GAAjB,CAAqBK,GAApF,CAAlB;AACAR,IAAAA,IAAI,CAACF,SAAL,GAAiBC,gBAAgB,CAACO,KAAjB,CAAuBD,GAAvB,CAA2BI,KAA3B,CAAiC,CAAjC,EAAoC,CAAC,CAArC,CAAjB;AACA,WAAO,KAAKF,YAAL,CAAkBP,IAAlB,EAAwB,qBAAxB,EAA+CF,SAAS,CAACU,GAAzD,EAA8DV,SAAS,CAACK,GAAV,CAAcK,GAA5E,CAAP;AACD;;AAEDE,EAAAA,YAAY,CAAC3B,IAAD,EAAOzB,OAAP,EAAgB;AAC1B,UAAMoD,YAAN,CAAmB3B,IAAnB,EAAyBzB,OAAzB;AACAyB,IAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAlB;AACD;;AAEDO,EAAAA,gBAAgB,CAAC5B,IAAD,EAAO;AACrB,QAAID,gBAAgB,CAACC,IAAD,CAApB,EAA4B;AAC1B,WAAK4B,gBAAL,CAAsB5B,IAAI,CAACjJ,KAA3B;AACD,KAFD,MAEO;AACL,YAAM6K,gBAAN,CAAuB5B,IAAvB;AACD;AACF;;AAED6B,EAAAA,uBAAuB,CAAC1B,MAAD,EAAS;AAC9B,UAAM2B,IAAI,GAAG3B,MAAb;AACA,UAAM4B,UAAU,GAAGD,IAAI,CAAC5B,IAAL,KAAc,KAAd,GAAsB,CAAtB,GAA0B,CAA7C;AACA,UAAMiB,KAAK,GAAGW,IAAI,CAACX,KAAnB;;AAEA,QAAIW,IAAI,CAAC/K,KAAL,CAAWiL,MAAX,CAAkBC,MAAlB,KAA6BF,UAAjC,EAA6C;AAC3C,UAAID,IAAI,CAAC5B,IAAL,KAAc,KAAlB,EAAyB;AACvB,aAAKgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;AACD,OAFD,MAEO;AACL,aAAKe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;AACD;AACF,KAND,MAMO,IAAIW,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAC/K,KAAL,CAAWiL,MAAX,CAAkB,CAAlB,EAAqB/B,IAArB,KAA8B,aAAzD,EAAwE;AAC7E,WAAKiC,KAAL,CAAWf,KAAX,EAAkB,uDAAlB;AACD;AACF;;AAEDgB,EAAAA,SAAS,CAACC,IAAD,EAAOC,WAAW,GAAG1C,SAArB,EAAgC2C,YAAhC,EAA8CC,kBAA9C,EAAkEC,kBAAlE,EAAsF;AAC7F,YAAQJ,IAAI,CAACnC,IAAb;AACE,WAAK,eAAL;AACEmC,QAAAA,IAAI,CAACK,UAAL,CAAgBC,OAAhB,CAAwBZ,IAAI,IAAI;AAC9B,eAAKK,SAAL,CAAeL,IAAI,CAAC7B,IAAL,KAAc,UAAd,GAA2B6B,IAAI,CAAC/K,KAAhC,GAAwC+K,IAAvD,EAA6DO,WAA7D,EAA0EC,YAA1E,EAAwF,8BAAxF,EAAwHE,kBAAxH;AACD,SAFD;AAGA;;AAEF;AACE,cAAML,SAAN,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,kBAAjD,EAAqEC,kBAArE;AARJ;AAUD;;AAEDG,EAAAA,oBAAoB,CAACb,IAAD,EAAOc,QAAP,EAAiB;AACnC,QAAId,IAAI,CAAC7B,IAAL,KAAc,eAAd,IAAiC6B,IAAI,CAACe,QAAtC,IAAkDf,IAAI,CAAC3B,MAAvD,IAAiE2B,IAAI,CAACgB,SAA1E,EAAqF;AACnF;AACD;;AAED,UAAMC,GAAG,GAAGjB,IAAI,CAACiB,GAAjB;AACA,UAAM9K,IAAI,GAAG8K,GAAG,CAAC9C,IAAJ,KAAa,YAAb,GAA4B8C,GAAG,CAAC9K,IAAhC,GAAuC+K,MAAM,CAACD,GAAG,CAAChM,KAAL,CAA1D;;AAEA,QAAIkB,IAAI,KAAK,WAAT,IAAwB6J,IAAI,CAAC5B,IAAL,KAAc,MAA1C,EAAkD;AAChD,UAAI0C,QAAQ,CAACK,IAAT,IAAiB,CAACL,QAAQ,CAACzB,KAA/B,EAAsC;AACpCyB,QAAAA,QAAQ,CAACzB,KAAT,GAAiB4B,GAAG,CAAC5B,KAArB;AACD;;AAEDyB,MAAAA,QAAQ,CAACK,IAAT,GAAgB,IAAhB;AACD;AACF;;AAEDC,EAAAA,YAAY,CAAClD,IAAD,EAAO;AACjB,UAAMmD,gBAAgB,GAAGnD,IAAI,CAACoD,IAAL,CAAUnD,IAAV,KAAmB,gBAA5C;;AAEA,QAAIkD,gBAAgB,IAAInD,IAAI,CAACoD,IAAL,CAAUA,IAAV,CAAenB,MAAf,GAAwB,CAAhD,EAAmD;AACjD,WAAK,IAAIoB,EAAE,GAAG,CAAT,EAAYC,eAAe,GAAGtD,IAAI,CAACoD,IAAL,CAAUA,IAA7C,EAAmDC,EAAE,GAAGC,eAAe,CAACrB,MAAxE,EAAgFoB,EAAE,EAAlF,EAAsF;AACpF,cAAMtC,SAAS,GAAGuC,eAAe,CAACD,EAAD,CAAjC;;AAEA,YAAItC,SAAS,CAACd,IAAV,KAAmB,qBAAnB,IAA4Cc,SAAS,CAACM,UAAV,CAAqBpB,IAArB,KAA8B,SAA9E,EAAyF;AACvF,cAAIc,SAAS,CAACM,UAAV,CAAqBtK,KAArB,KAA+B,YAAnC,EAAiD,OAAO,IAAP;AAClD,SAFD,MAEO;AACL;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;;AAEDwM,EAAAA,gBAAgB,CAACtC,IAAD,EAAO;AACrB,WAAOA,IAAI,CAAChB,IAAL,KAAc,qBAAd,IAAuCgB,IAAI,CAACI,UAAL,CAAgBpB,IAAhB,KAAyB,SAAhE,IAA6E,OAAOgB,IAAI,CAACI,UAAL,CAAgBtK,KAAvB,KAAiC,QAA9G,KAA2H,CAACkK,IAAI,CAACI,UAAL,CAAgBE,KAAjB,IAA0B,CAACN,IAAI,CAACI,UAAL,CAAgBE,KAAhB,CAAsBiC,aAA5K,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACxC,IAAD,EAAO;AACpB,UAAMF,SAAS,GAAG,MAAM0C,eAAN,CAAsBxC,IAAtB,CAAlB;AACA,UAAMlK,KAAK,GAAGkK,IAAI,CAACI,UAAL,CAAgBtK,KAA9B;AACAgK,IAAAA,SAAS,CAAChK,KAAV,CAAgBA,KAAhB,GAAwBA,KAAxB;AACA,WAAOgK,SAAP;AACD;;AAED2C,EAAAA,cAAc,CAAC1D,IAAD,EAAO2D,eAAP,EAAwBC,QAAxB,EAAkCnC,GAAlC,EAAuC;AACnD,UAAMiC,cAAN,CAAqB1D,IAArB,EAA2B2D,eAA3B,EAA4CC,QAA5C,EAAsDnC,GAAtD;AACA,UAAMoC,mBAAmB,GAAG7D,IAAI,CAAC8D,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAAI,KAAKlD,eAAL,CAAqBkD,CAArB,CAAzB,CAA5B;AACAhE,IAAAA,IAAI,CAACoD,IAAL,GAAYS,mBAAmB,CAACI,MAApB,CAA2BjE,IAAI,CAACoD,IAAhC,CAAZ;AACA,WAAOpD,IAAI,CAAC8D,UAAZ;AACD;;AAEDI,EAAAA,eAAe,CAACC,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C6F,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,SAAKC,WAAL,CAAiBnE,MAAjB,EAAyB3B,WAAzB,EAAsCD,OAAtC,EAA+C6F,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG;;AAEA,QAAIlE,MAAM,CAACoE,cAAX,EAA2B;AACzBpE,MAAAA,MAAM,CAACpJ,KAAP,CAAawN,cAAb,GAA8BpE,MAAM,CAACoE,cAArC;AACA,aAAOpE,MAAM,CAACoE,cAAd;AACD;;AAEDJ,IAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoBrE,MAApB;AACD;;AAEDsE,EAAAA,aAAa,CAACC,sBAAD,EAAyB;AACpC,YAAQ,KAAKC,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACG,MAAX;AACE,eAAO,KAAK6H,wBAAL,CAA8B,KAAKqE,KAAL,CAAW5N,KAAzC,CAAP;;AAEF,WAAKuB,KAAK,CAACC,GAAX;AACA,WAAKD,KAAK,CAACI,MAAX;AACE,eAAO,KAAKkI,kBAAL,CAAwB,KAAK+D,KAAL,CAAW5N,KAAnC,CAAP;;AAEF,WAAKuB,KAAK,CAAC4E,KAAX;AACE,eAAO,KAAK0D,kBAAL,CAAwB,IAAxB,CAAP;;AAEF,WAAKtI,KAAK,CAAC6E,KAAX;AACE,eAAO,KAAKyD,kBAAL,CAAwB,IAAxB,CAAP;;AAEF,WAAKtI,KAAK,CAAC8E,MAAX;AACE,eAAO,KAAKwD,kBAAL,CAAwB,KAAxB,CAAP;;AAEF;AACE,eAAO,MAAM6D,aAAN,CAAoBC,sBAApB,CAAP;AAlBJ;AAoBD;;AAED7D,EAAAA,YAAY,CAAC9J,KAAD,EAAQkJ,IAAR,EAAc2E,QAAd,EAAwBC,QAAxB,EAAkC;AAC5C,UAAM7E,IAAI,GAAG,MAAMa,YAAN,CAAmB9J,KAAnB,EAA0BkJ,IAA1B,EAAgC2E,QAAhC,EAA0CC,QAA1C,CAAb;AACA7E,IAAAA,IAAI,CAACsB,GAAL,GAAWtB,IAAI,CAACuB,KAAL,CAAWD,GAAtB;AACA,WAAOtB,IAAI,CAACuB,KAAZ;AACA,WAAOvB,IAAP;AACD;;AAED8E,EAAAA,iBAAiB,CAAC9E,IAAD,EAAO+E,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMF,iBAAN,CAAwB9E,IAAxB,EAA8B+E,eAA9B,EAA+CC,QAA/C;AACAhF,IAAAA,IAAI,CAACqB,UAAL,GAAkBrB,IAAI,CAACoD,IAAL,CAAUnD,IAAV,KAAmB,gBAArC;AACD;;AAEDqE,EAAAA,WAAW,CAACtE,IAAD,EAAOxB,WAAP,EAAoBD,OAApB,EAA6B6F,aAA7B,EAA4Ca,gBAA5C,EAA8DhF,IAA9D,EAAoEiF,YAAY,GAAG,KAAnF,EAA0F;AACnG,QAAIC,QAAQ,GAAG,KAAKC,SAAL,EAAf;AACAD,IAAAA,QAAQ,CAACjF,IAAT,GAAgBF,IAAI,CAACE,IAArB;AACAiF,IAAAA,QAAQ,GAAG,MAAMb,WAAN,CAAkBa,QAAlB,EAA4B3G,WAA5B,EAAyCD,OAAzC,EAAkD6F,aAAlD,EAAiEa,gBAAjE,EAAmFhF,IAAnF,EAAyFiF,YAAzF,CAAX;AACAC,IAAAA,QAAQ,CAAClF,IAAT,GAAgB,oBAAhB;AACA,WAAOkF,QAAQ,CAACjF,IAAhB;AACAF,IAAAA,IAAI,CAACjJ,KAAL,GAAaoO,QAAb;AACAlF,IAAAA,IAAI,GAAGA,IAAI,KAAK,aAAT,GAAyB,kBAAzB,GAA8CA,IAArD;AACA,WAAO,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;AAEDqF,EAAAA,iBAAiB,CAACxD,IAAD,EAAOtD,WAAP,EAAoBD,OAApB,EAA6BgH,SAA7B,EAAwCC,WAAxC,EAAqD;AACpE,UAAMxF,IAAI,GAAG,MAAMsF,iBAAN,CAAwBxD,IAAxB,EAA8BtD,WAA9B,EAA2CD,OAA3C,EAAoDgH,SAApD,EAA+DC,WAA/D,CAAb;;AAEA,QAAIxF,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACC,IAAL,GAAY,UAAZ;AACA,UAAID,IAAI,CAACE,IAAL,KAAc,QAAlB,EAA4BF,IAAI,CAACE,IAAL,GAAY,MAAZ;AAC5BF,MAAAA,IAAI,CAAC8C,SAAL,GAAiB,KAAjB;AACD;;AAED,WAAO9C,IAAP;AACD;;AAEDyF,EAAAA,mBAAmB,CAAC3D,IAAD,EAAO8C,QAAP,EAAiBC,QAAjB,EAA2BU,SAA3B,EAAsCb,sBAAtC,EAA8D;AAC/E,UAAM1E,IAAI,GAAG,MAAMyF,mBAAN,CAA0B3D,IAA1B,EAAgC8C,QAAhC,EAA0CC,QAA1C,EAAoDU,SAApD,EAA+Db,sBAA/D,CAAb;;AAEA,QAAI1E,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACE,IAAL,GAAY,MAAZ;AACAF,MAAAA,IAAI,CAACC,IAAL,GAAY,UAAZ;AACD;;AAED,WAAOD,IAAP;AACD;;AAED0F,EAAAA,YAAY,CAAC1F,IAAD,EAAO2F,SAAP,EAAkBpD,kBAAlB,EAAsC;AAChD,QAAIxC,gBAAgB,CAACC,IAAD,CAApB,EAA4B;AAC1B,WAAK0F,YAAL,CAAkB1F,IAAI,CAACjJ,KAAvB,EAA8B4O,SAA9B,EAAyCpD,kBAAzC;AACA,aAAOvC,IAAP;AACD;;AAED,WAAO,MAAM0F,YAAN,CAAmB1F,IAAnB,EAAyB2F,SAAzB,EAAoCpD,kBAApC,CAAP;AACD;;AAEDqD,EAAAA,gCAAgC,CAAC9D,IAAD,EAAO6D,SAAP,EAAkBE,MAAlB,EAA0B;AACxD,QAAI/D,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAC5B,IAAL,KAAc,KAAzC,EAAgD;AAC9C,YAAM,KAAKgC,KAAL,CAAWJ,IAAI,CAACiB,GAAL,CAAS5B,KAApB,EAA2B,+CAA3B,CAAN;AACD,KAFD,MAEO,IAAIW,IAAI,CAAC3B,MAAT,EAAiB;AACtB,YAAM,KAAK+B,KAAL,CAAWJ,IAAI,CAACiB,GAAL,CAAS5B,KAApB,EAA2B,sCAA3B,CAAN;AACD,KAFM,MAEA;AACL,YAAMyE,gCAAN,CAAuC9D,IAAvC,EAA6C6D,SAA7C,EAAwDE,MAAxD;AACD;AACF;;AAlOkD,CAArD;;AAsOA,MAAMC,SAAS,GAAG,wBAAlB;AACA,MAAMC,UAAU,GAAG,IAAIrF,MAAJ,CAAWoF,SAAS,CAACE,MAArB,EAA6B,GAA7B,CAAnB;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,UAAQA,IAAR;AACE,SAAK,EAAL;AACA,SAAK,EAAL;AACA,SAAK,IAAL;AACA,SAAK,IAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AARJ;AAUD;;AACD,MAAMC,cAAc,GAAG,+BAAvB;;AACA,SAASC,YAAT,CAAsBF,IAAtB,EAA4B;AAC1B,UAAQA,IAAR;AACE,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,EAAL;AACA,SAAK,GAAL;AACA,SAAK,IAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACA,SAAK,MAAL;AACE,aAAO,IAAP;;AAEF;AACE,aAAO,KAAP;AAzBJ;AA2BD;;AAED,MAAMG,UAAN,CAAiB;AACf9O,EAAAA,WAAW,CAACY,KAAD,EAAQmO,MAAR,EAAgBC,aAAhB,EAA+BC,QAA/B,EAAyC;AAClD,SAAKrO,KAAL,GAAaA,KAAb;AACA,SAAKmO,MAAL,GAAc,CAAC,CAACA,MAAhB;AACA,SAAKC,aAAL,GAAqB,CAAC,CAACA,aAAvB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AANc;;AASjB,MAAMC,OAAO,GAAG;AACdC,EAAAA,cAAc,EAAE,IAAIL,UAAJ,CAAe,GAAf,EAAoB,KAApB,CADF;AAEdM,EAAAA,eAAe,EAAE,IAAIN,UAAJ,CAAe,GAAf,EAAoB,IAApB,CAFH;AAGdO,EAAAA,aAAa,EAAE,IAAIP,UAAJ,CAAe,IAAf,EAAqB,KAArB,CAHD;AAIdQ,EAAAA,cAAc,EAAE,IAAIR,UAAJ,CAAe,GAAf,EAAoB,KAApB,CAJF;AAKdS,EAAAA,eAAe,EAAE,IAAIT,UAAJ,CAAe,GAAf,EAAoB,IAApB,CALH;AAMdzM,EAAAA,QAAQ,EAAE,IAAIyM,UAAJ,CAAe,GAAf,EAAoB,IAApB,EAA0B,IAA1B,EAAgCU,CAAC,IAAIA,CAAC,CAACC,aAAF,EAArC,CANI;AAOdC,EAAAA,kBAAkB,EAAE,IAAIZ,UAAJ,CAAe,UAAf,EAA2B,IAA3B,CAPN;AAQda,EAAAA,iBAAiB,EAAE,IAAIb,UAAJ,CAAe,UAAf,EAA2B,KAA3B;AARL,CAAhB;;AAWA/N,KAAK,CAACa,MAAN,CAAatB,aAAb,GAA6BS,KAAK,CAACU,MAAN,CAAanB,aAAb,GAA6B,YAAY;AACpE,MAAI,KAAK8M,KAAL,CAAWwC,OAAX,CAAmBlF,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,SAAK0C,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACA;AACD;;AAED,MAAIC,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAV;;AAEA,MAAID,GAAG,KAAKZ,OAAO,CAACC,cAAhB,IAAkC,KAAKa,UAAL,GAAkBpP,KAAlB,KAA4B,UAAlE,EAA8E;AAC5EkP,IAAAA,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAN;AACD;;AAED,OAAK3C,KAAL,CAAWyC,WAAX,GAAyB,CAACC,GAAG,CAACf,MAA9B;AACD,CAbD;;AAeAhO,KAAK,CAACL,IAAN,CAAWJ,aAAX,GAA2B,UAAU2P,QAAV,EAAoB;AAC7C,MAAIC,OAAO,GAAG,KAAd;;AAEA,MAAID,QAAQ,KAAKlP,KAAK,CAACkB,GAAvB,EAA4B;AAC1B,QAAI,KAAKmL,KAAL,CAAW5N,KAAX,KAAqB,IAArB,IAA6B,CAAC,KAAK4N,KAAL,CAAWyC,WAAzC,IAAwD,KAAKzC,KAAL,CAAW5N,KAAX,KAAqB,OAArB,IAAgC,KAAK2Q,KAAL,CAAWC,WAAvG,EAAoH;AAClHF,MAAAA,OAAO,GAAG,IAAV;AACD;AACF;;AAED,OAAK9C,KAAL,CAAWyC,WAAX,GAAyBK,OAAzB;;AAEA,MAAI,KAAK9C,KAAL,CAAWiD,UAAf,EAA2B;AACzB,SAAKjD,KAAL,CAAWiD,UAAX,GAAwB,KAAxB;AACD;AACF,CAdD;;AAgBAtP,KAAK,CAACQ,MAAN,CAAajB,aAAb,GAA6B,UAAU2P,QAAV,EAAoB;AAC/C,OAAK7C,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwB,KAAKqD,YAAL,CAAkBL,QAAlB,IAA8Bf,OAAO,CAACC,cAAtC,GAAuDD,OAAO,CAACE,eAAvF;AACA,OAAKhC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACD,CAHD;;AAKA9O,KAAK,CAACyB,YAAN,CAAmBlC,aAAnB,GAAmC,YAAY;AAC7C,OAAK8M,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACG,aAAhC;AACA,OAAKjC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACD,CAHD;;AAKA9O,KAAK,CAACY,MAAN,CAAarB,aAAb,GAA6B,UAAU2P,QAAV,EAAoB;AAC/C,QAAMM,eAAe,GAAGN,QAAQ,KAAKlP,KAAK,CAAC4D,GAAnB,IAA0BsL,QAAQ,KAAKlP,KAAK,CAAC0D,IAA7C,IAAqDwL,QAAQ,KAAKlP,KAAK,CAACoE,KAAxE,IAAiF8K,QAAQ,KAAKlP,KAAK,CAACmE,MAA5H;AACA,OAAKkI,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBsD,eAAe,GAAGrB,OAAO,CAACI,cAAX,GAA4BJ,OAAO,CAACK,eAA3E;AACA,OAAKnC,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACD,CAJD;;AAMA9O,KAAK,CAAC+B,MAAN,CAAaxC,aAAb,GAA6B,YAAY,CAAE,CAA3C;;AAEAS,KAAK,CAAC2D,SAAN,CAAgBpE,aAAhB,GAAgCS,KAAK,CAACwE,MAAN,CAAajF,aAAb,GAA6B,UAAU2P,QAAV,EAAoB;AAC/E,MAAIA,QAAQ,CAACxQ,UAAT,IAAuBwQ,QAAQ,KAAKlP,KAAK,CAACe,IAA1C,IAAkDmO,QAAQ,KAAKlP,KAAK,CAACwD,KAArE,IAA8E,EAAE0L,QAAQ,KAAKlP,KAAK,CAAC6D,OAAnB,IAA8B2J,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWxD,KAAnD,CAAf,CAAhC,CAA9E,IAA4L,EAAE,CAACqG,QAAQ,KAAKlP,KAAK,CAACgB,KAAnB,IAA4BkO,QAAQ,KAAKlP,KAAK,CAACQ,MAAhD,KAA2D,KAAKyO,UAAL,OAAsBd,OAAO,CAACyB,MAA3F,CAAhM,EAAoS;AAClS,SAAKvD,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACQ,kBAAhC;AACD,GAFD,MAEO;AACL,SAAKtC,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACS,iBAAhC;AACD;;AAED,OAAKvC,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD,CARD;;AAUA9O,KAAK,CAACwB,SAAN,CAAgBjC,aAAhB,GAAgC,YAAY;AAC1C,MAAI,KAAK0P,UAAL,OAAsBd,OAAO,CAAC7M,QAAlC,EAA4C;AAC1C,SAAK+K,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;AACD,GAFD,MAEO;AACL,SAAK3C,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAAC7M,QAAhC;AACD;;AAED,OAAK+K,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD,CARD;;AAUA,MAAMe,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAE,CAAC,YAAD,EAAe,WAAf,EAA4B,KAA5B,EAAmC,SAAnC,EAA8C,SAA9C,EAAyD,WAAzD,EAAsE,QAAtE,EAAgF,QAAhF,EAA0F,OAA1F,CADY;AAEpBC,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT;AAFQ,CAAtB;AAIA,MAAMC,sBAAsB,GAAG,IAAIC,GAAJ,CAAQJ,aAAa,CAACC,MAAtB,CAA/B;AACA,MAAMI,0BAA0B,GAAG,IAAID,GAAJ,CAAQJ,aAAa,CAACE,UAAtB,CAAnC;;AACA,MAAMI,cAAc,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AACzC,SAAOA,QAAQ,IAAID,IAAI,KAAK,OAArB,IAAgCA,IAAI,KAAK,MAAhD;AACD,CAFD;;AAGA,SAASE,oBAAT,CAA8BF,IAA9B,EAAoCC,QAApC,EAA8C;AAC5C,SAAOF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAAd,IAAkCL,sBAAsB,CAACO,GAAvB,CAA2BH,IAA3B,CAAzC;AACD;;AACD,SAASI,4BAAT,CAAsCJ,IAAtC,EAA4C;AAC1C,SAAOF,0BAA0B,CAACK,GAA3B,CAA+BH,IAA/B,CAAP;AACD;;AACD,SAASK,wBAAT,CAAkCL,IAAlC,EAAwCC,QAAxC,EAAkD;AAChD,SAAOC,oBAAoB,CAACF,IAAD,EAAOC,QAAP,CAApB,IAAwCG,4BAA4B,CAACJ,IAAD,CAA3E;AACD;;AACD,SAASM,SAAT,CAAmBN,IAAnB,EAAyB;AACvB,SAAO5Q,QAAQ,CAAC+Q,GAAT,CAAaH,IAAb,CAAP;AACD;;AACD,MAAMO,yBAAyB,GAAG,iBAAlC;AACA,IAAIC,4BAA4B,GAAG,urIAAnC;AACA,IAAIC,uBAAuB,GAAG,kiFAA9B;AACA,MAAMC,uBAAuB,GAAG,IAAI1I,MAAJ,CAAW,MAAMwI,4BAAN,GAAqC,GAAhD,CAAhC;AACA,MAAMG,kBAAkB,GAAG,IAAI3I,MAAJ,CAAW,MAAMwI,4BAAN,GAAqCC,uBAArC,GAA+D,GAA1E,CAA3B;AACAD,4BAA4B,GAAGC,uBAAuB,GAAG,IAAzD;AACA,MAAMG,0BAA0B,GAAG,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,EAAX,EAAe,CAAf,EAAkB,EAAlB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,EAA/B,EAAmC,CAAnC,EAAsC,EAAtC,EAA0C,EAA1C,EAA8C,GAA9C,EAAmD,EAAnD,EAAuD,EAAvD,EAA2D,GAA3D,EAAgE,EAAhE,EAAoE,CAApE,EAAuE,EAAvE,EAA2E,EAA3E,EAA+E,EAA/E,EAAmF,EAAnF,EAAuF,EAAvF,EAA2F,CAA3F,EAA8F,EAA9F,EAAkG,EAAlG,EAAsG,EAAtG,EAA0G,CAA1G,EAA6G,EAA7G,EAAiH,CAAjH,EAAoH,CAApH,EAAuH,CAAvH,EAA0H,CAA1H,EAA6H,EAA7H,EAAiI,GAAjI,EAAsI,EAAtI,EAA0I,EAA1I,EAA8I,CAA9I,EAAiJ,EAAjJ,EAAqJ,CAArJ,EAAwJ,EAAxJ,EAA4J,CAA5J,EAA+J,EAA/J,EAAmK,GAAnK,EAAwK,GAAxK,EAA6K,EAA7K,EAAiL,EAAjL,EAAqL,EAArL,EAAyL,CAAzL,EAA4L,GAA5L,EAAiM,CAAjM,EAAoM,CAApM,EAAuM,CAAvM,EAA0M,CAA1M,EAA6M,EAA7M,EAAiN,CAAjN,EAAoN,CAApN,EAAuN,CAAvN,EAA0N,CAA1N,EAA6N,CAA7N,EAAgO,EAAhO,EAAoO,EAApO,EAAwO,EAAxO,EAA4O,EAA5O,EAAgP,EAAhP,EAAoP,EAApP,EAAwP,EAAxP,EAA4P,CAA5P,EAA+P,CAA/P,EAAkQ,EAAlQ,EAAsQ,EAAtQ,EAA0Q,EAA1Q,EAA8Q,EAA9Q,EAAkR,EAAlR,EAAsR,EAAtR,EAA0R,CAA1R,EAA6R,CAA7R,EAAgS,EAAhS,EAAoS,CAApS,EAAuS,EAAvS,EAA2S,CAA3S,EAA8S,CAA9S,EAAiT,CAAjT,EAAoT,CAApT,EAAuT,EAAvT,EAA2T,EAA3T,EAA+T,EAA/T,EAAmU,CAAnU,EAAsU,EAAtU,EAA0U,EAA1U,EAA8U,CAA9U,EAAiV,CAAjV,EAAoV,EAApV,EAAwV,EAAxV,EAA4V,EAA5V,EAAgW,EAAhW,EAAoW,EAApW,EAAwW,EAAxW,EAA4W,EAA5W,EAAgX,EAAhX,EAAoX,EAApX,EAAwX,GAAxX,EAA6X,EAA7X,EAAiY,EAAjY,EAAqY,EAArY,EAAyY,EAAzY,EAA6Y,EAA7Y,EAAiZ,EAAjZ,EAAqZ,EAArZ,EAAyZ,GAAzZ,EAA8Z,EAA9Z,EAAka,EAAla,EAAsa,CAAta,EAAya,CAAza,EAA4a,EAA5a,EAAgb,GAAhb,EAAqb,EAArb,EAAyb,EAAzb,EAA6b,EAA7b,EAAic,EAAjc,EAAqc,EAArc,EAAyc,EAAzc,EAA6c,EAA7c,EAAid,EAAjd,EAAqd,EAArd,EAAyd,EAAzd,EAA6d,CAA7d,EAAge,EAAhe,EAAoe,EAApe,EAAwe,CAAxe,EAA2e,CAA3e,EAA8e,EAA9e,EAAkf,EAAlf,EAAsf,EAAtf,EAA0f,CAA1f,EAA6f,EAA7f,EAAigB,CAAjgB,EAAogB,CAApgB,EAAugB,CAAvgB,EAA0gB,EAA1gB,EAA8gB,EAA9gB,EAAkhB,CAAlhB,EAAqhB,EAArhB,EAAyhB,EAAzhB,EAA6hB,CAA7hB,EAAgiB,CAAhiB,EAAmiB,CAAniB,EAAsiB,CAAtiB,EAAyiB,CAAziB,EAA4iB,CAA5iB,EAA+iB,EAA/iB,EAAmjB,CAAnjB,EAAsjB,CAAtjB,EAAyjB,CAAzjB,EAA4jB,EAA5jB,EAAgkB,EAAhkB,EAAokB,CAApkB,EAAukB,CAAvkB,EAA0kB,CAA1kB,EAA6kB,CAA7kB,EAAglB,EAAhlB,EAAolB,CAAplB,EAAulB,CAAvlB,EAA0lB,CAA1lB,EAA6lB,CAA7lB,EAAgmB,CAAhmB,EAAmmB,CAAnmB,EAAsmB,CAAtmB,EAAymB,CAAzmB,EAA4mB,EAA5mB,EAAgnB,CAAhnB,EAAmnB,EAAnnB,EAAunB,CAAvnB,EAA0nB,GAA1nB,EAA+nB,EAA/nB,EAAmoB,EAAnoB,EAAuoB,CAAvoB,EAA0oB,EAA1oB,EAA8oB,CAA9oB,EAAipB,EAAjpB,EAAqpB,EAArpB,EAAypB,EAAzpB,EAA6pB,CAA7pB,EAAgqB,CAAhqB,EAAmqB,CAAnqB,EAAsqB,GAAtqB,EAA2qB,EAA3qB,EAA+qB,EAA/qB,EAAmrB,CAAnrB,EAAsrB,EAAtrB,EAA0rB,EAA1rB,EAA8rB,EAA9rB,EAAksB,CAAlsB,EAAqsB,EAArsB,EAAysB,EAAzsB,EAA6sB,EAA7sB,EAAitB,CAAjtB,EAAotB,EAAptB,EAAwtB,EAAxtB,EAA4tB,GAA5tB,EAAiuB,EAAjuB,EAAquB,GAAruB,EAA0uB,EAA1uB,EAA8uB,EAA9uB,EAAkvB,CAAlvB,EAAqvB,GAArvB,EAA0vB,CAA1vB,EAA6vB,CAA7vB,EAAgwB,EAAhwB,EAAowB,EAApwB,EAAwwB,CAAxwB,EAA2wB,CAA3wB,EAA8wB,CAA9wB,EAAixB,EAAjxB,EAAqxB,CAArxB,EAAwxB,EAAxxB,EAA4xB,EAA5xB,EAAgyB,CAAhyB,EAAmyB,CAAnyB,EAAsyB,EAAtyB,EAA0yB,CAA1yB,EAA6yB,EAA7yB,EAAizB,EAAjzB,EAAqzB,EAArzB,EAAyzB,CAAzzB,EAA4zB,EAA5zB,EAAg0B,EAAh0B,EAAo0B,GAAp0B,EAAy0B,CAAz0B,EAA40B,CAA50B,EAA+0B,EAA/0B,EAAm1B,EAAn1B,EAAu1B,CAAv1B,EAA01B,EAA11B,EAA81B,EAA91B,EAAk2B,GAAl2B,EAAu2B,CAAv2B,EAA02B,CAA12B,EAA62B,CAA72B,EAAg3B,CAAh3B,EAAm3B,EAAn3B,EAAu3B,EAAv3B,EAA23B,CAA33B,EAA83B,EAA93B,EAAk4B,CAAl4B,EAAq4B,CAAr4B,EAAw4B,CAAx4B,EAA24B,CAA34B,EAA84B,EAA94B,EAAk5B,EAAl5B,EAAs5B,CAAt5B,EAAy5B,GAAz5B,EAA85B,EAA95B,EAAk6B,GAAl6B,EAAu6B,GAAv6B,EAA46B,GAA56B,EAAi7B,GAAj7B,EAAs7B,EAAt7B,EAA07B,GAA17B,EAA+7B,IAA/7B,EAAq8B,IAAr8B,EAA28B,IAA38B,EAAi9B,GAAj9B,EAAs9B,IAAt9B,EAA49B,GAA59B,EAAi+B,CAAj+B,EAAo+B,EAAp+B,EAAw+B,GAAx+B,EAA6+B,EAA7+B,EAAi/B,EAAj/B,EAAq/B,EAAr/B,EAAy/B,EAAz/B,EAA6/B,CAA7/B,EAAggC,EAAhgC,EAAogC,EAApgC,EAAwgC,CAAxgC,EAA2gC,EAA3gC,EAA+gC,GAA/gC,EAAohC,EAAphC,EAAwhC,GAAxhC,EAA6hC,EAA7hC,EAAiiC,CAAjiC,EAAoiC,CAApiC,EAAuiC,EAAviC,EAA2iC,EAA3iC,EAA+iC,EAA/iC,EAAmjC,CAAnjC,EAAsjC,CAAtjC,EAAyjC,CAAzjC,EAA4jC,EAA5jC,EAAgkC,IAAhkC,EAAskC,CAAtkC,EAAykC,GAAzkC,EAA8kC,IAA9kC,EAAolC,GAAplC,EAAylC,EAAzlC,EAA6lC,CAA7lC,EAAgmC,EAAhmC,EAAomC,CAApmC,EAAumC,CAAvmC,EAA0mC,GAA1mC,EAA+mC,IAA/mC,EAAqnC,GAArnC,EAA0nC,CAA1nC,EAA6nC,EAA7nC,EAAioC,CAAjoC,EAAooC,CAApoC,EAAuoC,CAAvoC,EAA0oC,CAA1oC,EAA6oC,IAA7oC,EAAmpC,EAAnpC,EAAupC,CAAvpC,EAA0pC,EAA1pC,EAA8pC,CAA9pC,EAAiqC,CAAjqC,EAAoqC,CAApqC,EAAuqC,CAAvqC,EAA0qC,CAA1qC,EAA6qC,CAA7qC,EAAgrC,CAAhrC,EAAmrC,CAAnrC,EAAsrC,CAAtrC,EAAyrC,EAAzrC,EAA6rC,CAA7rC,EAAgsC,CAAhsC,EAAmsC,CAAnsC,EAAssC,CAAtsC,EAAysC,CAAzsC,EAA4sC,EAA5sC,EAAgtC,CAAhtC,EAAmtC,CAAntC,EAAstC,CAAttC,EAAytC,CAAztC,EAA4tC,CAA5tC,EAA+tC,CAA/tC,EAAkuC,CAAluC,EAAquC,EAAruC,EAAyuC,CAAzuC,EAA4uC,CAA5uC,EAA+uC,CAA/uC,EAAkvC,CAAlvC,EAAqvC,CAArvC,EAAwvC,CAAxvC,EAA2vC,CAA3vC,EAA8vC,CAA9vC,EAAiwC,CAAjwC,EAAowC,GAApwC,EAAywC,CAAzwC,EAA4wC,EAA5wC,EAAgxC,CAAhxC,EAAmxC,EAAnxC,EAAuxC,CAAvxC,EAA0xC,EAA1xC,EAA8xC,CAA9xC,EAAiyC,EAAjyC,EAAqyC,CAAryC,EAAwyC,EAAxyC,EAA4yC,CAA5yC,EAA+yC,EAA/yC,EAAmzC,CAAnzC,EAAszC,EAAtzC,EAA0zC,CAA1zC,EAA6zC,EAA7zC,EAAi0C,CAAj0C,EAAo0C,EAAp0C,EAAw0C,CAAx0C,EAA20C,EAA30C,EAA+0C,CAA/0C,EAAk1C,CAAl1C,EAAq1C,IAAr1C,EAA21C,EAA31C,EAA+1C,EAA/1C,EAAm2C,CAAn2C,EAAs2C,EAAt2C,EAA02C,CAA12C,EAA62C,GAA72C,EAAk3C,EAAl3C,EAAs3C,IAAt3C,EAA43C,GAA53C,EAAi4C,EAAj4C,EAAq4C,EAAr4C,EAAy4C,CAAz4C,EAA44C,CAA54C,EAA+4C,IAA/4C,EAAq5C,CAAr5C,EAAw5C,CAAx5C,EAA25C,EAA35C,EAA+5C,CAA/5C,EAAk6C,CAAl6C,EAAq6C,CAAr6C,EAAw6C,CAAx6C,EAA26C,CAA36C,EAA86C,CAA96C,EAAi7C,CAAj7C,EAAo7C,CAAp7C,EAAu7C,CAAv7C,EAA07C,CAA17C,EAA67C,CAA77C,EAAg8C,CAAh8C,EAAm8C,CAAn8C,EAAs8C,CAAt8C,EAAy8C,CAAz8C,EAA48C,CAA58C,EAA+8C,CAA/8C,EAAk9C,CAAl9C,EAAq9C,CAAr9C,EAAw9C,CAAx9C,EAA29C,CAA39C,EAA89C,CAA99C,EAAi+C,CAAj+C,EAAo+C,CAAp+C,EAAu+C,CAAv+C,EAA0+C,CAA1+C,EAA6+C,CAA7+C,EAAg/C,CAAh/C,EAAm/C,CAAn/C,EAAs/C,CAAt/C,EAAy/C,CAAz/C,EAA4/C,CAA5/C,EAA+/C,CAA//C,EAAkgD,CAAlgD,EAAqgD,CAArgD,EAAwgD,CAAxgD,EAA2gD,CAA3gD,EAA8gD,CAA9gD,EAAihD,CAAjhD,EAAohD,CAAphD,EAAuhD,CAAvhD,EAA0hD,CAA1hD,EAA6hD,CAA7hD,EAAgiD,CAAhiD,EAAmiD,CAAniD,EAAsiD,CAAtiD,EAAyiD,CAAziD,EAA4iD,CAA5iD,EAA+iD,CAA/iD,EAAkjD,CAAljD,EAAqjD,CAArjD,EAAwjD,CAAxjD,EAA2jD,CAA3jD,EAA8jD,CAA9jD,EAAikD,CAAjkD,EAAokD,EAApkD,EAAwkD,CAAxkD,EAA2kD,CAA3kD,EAA8kD,CAA9kD,EAAilD,CAAjlD,EAAolD,CAAplD,EAAulD,EAAvlD,EAA2lD,IAA3lD,EAAimD,KAAjmD,EAAwmD,EAAxmD,EAA4mD,IAA5mD,EAAknD,EAAlnD,EAAsnD,GAAtnD,EAA2nD,CAA3nD,EAA8nD,IAA9nD,EAAooD,EAApoD,EAAwoD,IAAxoD,EAA8oD,IAA9oD,EAAopD,GAAppD,CAAnC;AACA,MAAMC,qBAAqB,GAAG,CAAC,GAAD,EAAM,CAAN,EAAS,GAAT,EAAc,CAAd,EAAiB,GAAjB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EAAiC,IAAjC,EAAuC,CAAvC,EAA0C,CAA1C,EAA6C,CAA7C,EAAgD,CAAhD,EAAmD,CAAnD,EAAsD,EAAtD,EAA0D,CAA1D,EAA6D,CAA7D,EAAgE,CAAhE,EAAmE,GAAnE,EAAwE,CAAxE,EAA2E,GAA3E,EAAgF,CAAhF,EAAmF,CAAnF,EAAsF,CAAtF,EAAyF,GAAzF,EAA8F,EAA9F,EAAkG,GAAlG,EAAuG,CAAvG,EAA0G,EAA1G,EAA8G,EAA9G,EAAkH,EAAlH,EAAsH,CAAtH,EAAyH,EAAzH,EAA6H,CAA7H,EAAgI,EAAhI,EAAoI,EAApI,EAAwI,EAAxI,EAA4I,CAA5I,EAA+I,CAA/I,EAAkJ,CAAlJ,EAAqJ,EAArJ,EAAyJ,EAAzJ,EAA6J,CAA7J,EAAgK,CAAhK,EAAmK,CAAnK,EAAsK,CAAtK,EAAyK,EAAzK,EAA6K,CAA7K,EAAgL,EAAhL,EAAoL,CAApL,EAAuL,EAAvL,EAA2L,EAA3L,EAA+L,CAA/L,EAAkM,CAAlM,EAAqM,CAArM,EAAwM,CAAxM,EAA2M,EAA3M,EAA+M,EAA/M,EAAmN,CAAnN,EAAsN,CAAtN,EAAyN,GAAzN,EAA8N,EAA9N,EAAkO,CAAlO,EAAqO,CAArO,EAAwO,CAAxO,EAA2O,CAA3O,EAA8O,EAA9O,EAAkP,CAAlP,EAAqP,CAArP,EAAwP,CAAxP,EAA2P,CAA3P,EAA8P,CAA9P,EAAiQ,CAAjQ,EAAoQ,CAApQ,EAAuQ,EAAvQ,EAA2Q,CAA3Q,EAA8Q,EAA9Q,EAAkR,CAAlR,EAAqR,CAArR,EAAwR,CAAxR,EAA2R,CAA3R,EAA8R,CAA9R,EAAiS,GAAjS,EAAsS,EAAtS,EAA0S,EAA1S,EAA8S,CAA9S,EAAiT,CAAjT,EAAoT,CAApT,EAAuT,EAAvT,EAA2T,EAA3T,EAA+T,EAA/T,EAAmU,CAAnU,EAAsU,GAAtU,EAA2U,CAA3U,EAA8U,CAA9U,EAAiV,CAAjV,EAAoV,EAApV,EAAwV,CAAxV,EAA2V,EAA3V,EAA+V,EAA/V,EAAmW,EAAnW,EAAuW,CAAvW,EAA0W,EAA1W,EAA8W,EAA9W,EAAkX,CAAlX,EAAqX,CAArX,EAAwX,EAAxX,EAA4X,EAA5X,EAAgY,CAAhY,EAAmY,CAAnY,EAAsY,GAAtY,EAA2Y,EAA3Y,EAA+Y,GAA/Y,EAAoZ,CAApZ,EAAuZ,GAAvZ,EAA4Z,CAA5Z,EAA+Z,CAA/Z,EAAka,CAAla,EAAqa,CAAra,EAAwa,CAAxa,EAA2a,EAA3a,EAA+a,CAA/a,EAAkb,EAAlb,EAAsb,CAAtb,EAAyb,CAAzb,EAA4b,CAA5b,EAA+b,CAA/b,EAAkc,CAAlc,EAAqc,EAArc,EAAyc,EAAzc,EAA6c,EAA7c,EAAid,EAAjd,EAAqd,GAArd,EAA0d,CAA1d,EAA6d,CAA7d,EAAge,CAAhe,EAAme,EAAne,EAAue,CAAve,EAA0e,EAA1e,EAA8e,EAA9e,EAAkf,CAAlf,EAAqf,EAArf,EAAyf,GAAzf,EAA8f,CAA9f,EAAigB,CAAjgB,EAAogB,CAApgB,EAAugB,CAAvgB,EAA0gB,CAA1gB,EAA6gB,CAA7gB,EAAghB,CAAhhB,EAAmhB,CAAnhB,EAAshB,CAAthB,EAAyhB,CAAzhB,EAA4hB,CAA5hB,EAA+hB,EAA/hB,EAAmiB,CAAniB,EAAsiB,CAAtiB,EAAyiB,CAAziB,EAA4iB,CAA5iB,EAA+iB,CAA/iB,EAAkjB,CAAljB,EAAqjB,CAArjB,EAAwjB,GAAxjB,EAA6jB,CAA7jB,EAAgkB,KAAhkB,EAAukB,CAAvkB,EAA0kB,GAA1kB,EAA+kB,CAA/kB,EAAklB,EAAllB,EAAslB,CAAtlB,EAAylB,EAAzlB,EAA6lB,CAA7lB,EAAgmB,IAAhmB,EAAsmB,CAAtmB,EAAymB,CAAzmB,EAA4mB,EAA5mB,EAAgnB,CAAhnB,EAAmnB,CAAnnB,EAAsnB,KAAtnB,EAA6nB,CAA7nB,EAAgoB,IAAhoB,EAAsoB,CAAtoB,EAAyoB,CAAzoB,EAA4oB,CAA5oB,EAA+oB,CAA/oB,EAAkpB,CAAlpB,EAAqpB,CAArpB,EAAwpB,CAAxpB,EAA2pB,EAA3pB,EAA+pB,CAA/pB,EAAkqB,GAAlqB,EAAuqB,CAAvqB,EAA0qB,IAA1qB,EAAgrB,EAAhrB,EAAorB,GAAprB,EAAyrB,EAAzrB,EAA6rB,CAA7rB,EAAgsB,EAAhsB,EAAosB,CAApsB,EAAusB,CAAvsB,EAA0sB,EAA1sB,EAA8sB,CAA9sB,EAAitB,EAAjtB,EAAqtB,CAArtB,EAAwtB,CAAxtB,EAA2tB,EAA3tB,EAA+tB,IAA/tB,EAAquB,CAAruB,EAAwuB,CAAxuB,EAA2uB,EAA3uB,EAA+uB,CAA/uB,EAAkvB,CAAlvB,EAAqvB,CAArvB,EAAwvB,CAAxvB,EAA2vB,CAA3vB,EAA8vB,CAA9vB,EAAiwB,GAAjwB,EAAswB,CAAtwB,EAAywB,EAAzwB,EAA6wB,CAA7wB,EAAgxB,GAAhxB,EAAqxB,EAArxB,EAAyxB,IAAzxB,EAA+xB,CAA/xB,EAAkyB,GAAlyB,EAAuyB,CAAvyB,EAA0yB,CAA1yB,EAA6yB,CAA7yB,EAAgzB,MAAhzB,EAAwzB,GAAxzB,CAA9B;;AAEA,SAASC,aAAT,CAAuBtD,IAAvB,EAA6B9N,GAA7B,EAAkC;AAChC,MAAIqR,GAAG,GAAG,OAAV;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWzH,MAAM,GAAG7J,GAAG,CAAC6J,MAA7B,EAAqCyH,CAAC,GAAGzH,MAAzC,EAAiDyH,CAAC,IAAI,CAAtD,EAAyD;AACvDD,IAAAA,GAAG,IAAIrR,GAAG,CAACsR,CAAD,CAAV;AACA,QAAID,GAAG,GAAGvD,IAAV,EAAgB,OAAO,KAAP;AAChBuD,IAAAA,GAAG,IAAIrR,GAAG,CAACsR,CAAC,GAAG,CAAL,CAAV;AACA,QAAID,GAAG,IAAIvD,IAAX,EAAiB,OAAO,IAAP;AAClB;;AAED,SAAO,KAAP;AACD;;AAED,SAASyD,iBAAT,CAA2BzD,IAA3B,EAAiC;AAC/B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgBkD,uBAAuB,CAACrB,IAAxB,CAA6B/E,MAAM,CAAC4G,YAAP,CAAoB1D,IAApB,CAA7B,CAAvB;AACD;;AAED,SAAOsD,aAAa,CAACtD,IAAD,EAAOoD,0BAAP,CAApB;AACD;;AACD,SAASO,eAAT,CAAyBC,OAAzB,EAAkCC,IAAlC,EAAwC;AACtC,SAAOD,OAAO,KAAK,EAAZ,IAAkBC,IAAI,KAAK,EAAlC;AACD;;AACD,SAASC,gBAAT,CAA0B9D,IAA1B,EAAgC;AAC9B,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,IAAP;AACf,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAO,KAAP;AACf,MAAIA,IAAI,IAAI,EAAZ,EAAgB,OAAO,IAAP;AAChB,MAAIA,IAAI,GAAG,EAAX,EAAe,OAAOA,IAAI,KAAK,EAAhB;AACf,MAAIA,IAAI,IAAI,GAAZ,EAAiB,OAAO,IAAP;;AAEjB,MAAIA,IAAI,IAAI,MAAZ,EAAoB;AAClB,WAAOA,IAAI,IAAI,IAAR,IAAgBmD,kBAAkB,CAACtB,IAAnB,CAAwB/E,MAAM,CAAC4G,YAAP,CAAoB1D,IAApB,CAAxB,CAAvB;AACD;;AAED,SAAOsD,aAAa,CAACtD,IAAD,EAAOoD,0BAAP,CAAb,IAAmDE,aAAa,CAACtD,IAAD,EAAOqD,qBAAP,CAAvE;AACD;;AAED,MAAMU,aAAa,GAAG,IAAI1B,GAAJ,CAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,EAAqB,SAArB,EAAgC,OAAhC,EAAyC,SAAzC,EAAoD,OAApD,EAA6D,WAA7D,EAA0E,OAA1E,EAAmF,MAAnF,EAA2F,QAA3F,EAAqG,QAArG,EAA+G,QAA/G,EAAyH,MAAzH,EAAiI,QAAjI,EAA2I,MAA3I,CAAR,CAAtB;;AAEA,SAAS2B,cAAT,CAAwBC,WAAxB,EAAqC;AACnC,SAAOA,WAAW,CAAClK,IAAZ,KAAqB,6BAArB,IAAsDkK,WAAW,CAAClK,IAAZ,KAAqB,0BAArB,KAAoD,CAACkK,WAAW,CAACC,WAAb,IAA4BD,WAAW,CAACC,WAAZ,CAAwBnK,IAAxB,KAAiC,WAAjC,IAAgDkK,WAAW,CAACC,WAAZ,CAAwBnK,IAAxB,KAAiC,sBAAjK,CAA7D;AACD;;AAED,SAASoK,iBAAT,CAA2BrK,IAA3B,EAAiC;AAC/B,SAAOA,IAAI,CAACsK,UAAL,KAAoB,MAApB,IAA8BtK,IAAI,CAACsK,UAAL,KAAoB,QAAzD;AACD;;AAED,SAASC,oBAAT,CAA8B5F,KAA9B,EAAqC;AACnC,SAAO,CAACA,KAAK,CAAC1E,IAAN,KAAe3H,KAAK,CAACL,IAArB,IAA6B,CAAC,CAAC0M,KAAK,CAAC1E,IAAN,CAAWvI,OAA3C,KAAuDiN,KAAK,CAAC5N,KAAN,KAAgB,MAA9E;AACD;;AAED,MAAMyT,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,oBADiB;AAExBC,EAAAA,GAAG,EAAE,oBAFmB;AAGxBzK,EAAAA,IAAI,EAAE,aAHkB;AAIxB0K,EAAAA,SAAS,EAAE;AAJa,CAA1B;;AAOA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB9C,IAAzB,EAA+B;AAC7B,QAAM+C,KAAK,GAAG,EAAd;AACA,QAAMC,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmB,IAAI,CAAC5I,MAAzB,EAAiCyH,CAAC,EAAlC,EAAsC;AACpC,KAAC3B,IAAI,CAAC8C,IAAI,CAACnB,CAAD,CAAL,EAAUA,CAAV,EAAamB,IAAb,CAAJ,GAAyBC,KAAzB,GAAiCC,KAAlC,EAAyCvG,IAAzC,CAA8CqG,IAAI,CAACnB,CAAD,CAAlD;AACD;;AAED,SAAO,CAACoB,KAAD,EAAQC,KAAR,CAAP;AACD;;AAED,MAAMC,iBAAiB,GAAG,wBAA1B;;AACA,IAAIC,IAAI,GAAI5K,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACjD9I,EAAAA,WAAW,CAACW,OAAD,EAAU8P,KAAV,EAAiB;AAC1B,UAAM9P,OAAN,EAAe8P,KAAf;AACA,SAAKkD,UAAL,GAAkBC,SAAlB;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKC,eAAL,CAAqB,MAArB,EAA6B,KAA7B,KAAuC,KAAKH,UAAL,KAAoB,MAAlE;AACD;;AAEDI,EAAAA,gBAAgB,GAAG;AACjB,WAAO,CAAC,CAAC,KAAKD,eAAL,CAAqB,MAArB,EAA6B,OAA7B,CAAT;AACD;;AAEDE,EAAAA,WAAW,CAACtL,IAAD,EAAOuL,GAAP,EAAY;AACrB,QAAIvL,IAAI,KAAK3H,KAAK,CAACI,MAAf,IAAyBuH,IAAI,KAAK3H,KAAK,CAACe,IAAxC,IAAgD4G,IAAI,KAAK3H,KAAK,CAAC4B,oBAAnE,EAAyF;AACvF,UAAI,KAAKgR,UAAL,KAAoBC,SAAxB,EAAmC;AACjC,aAAKD,UAAL,GAAkB,IAAlB;AACD;AACF;;AAED,WAAO,MAAMK,WAAN,CAAkBtL,IAAlB,EAAwBuL,GAAxB,CAAP;AACD;;AAEDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAKR,UAAL,KAAoBC,SAAxB,EAAmC;AACjC,YAAMQ,OAAO,GAAGX,iBAAiB,CAACY,IAAlB,CAAuBF,OAAO,CAAC3U,KAA/B,CAAhB;AAEA,UAAI,CAAC4U,OAAL,EAAc,CAAd,KAAqB,IAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,MAAnB,EAA2B;AAC9C,aAAKT,UAAL,GAAkB,MAAlB;AACD,OAFoB,MAEd,IAAIS,OAAO,CAAC,CAAD,CAAP,KAAe,QAAnB,EAA6B;AAClC,aAAKT,UAAL,GAAkB,QAAlB;AACD,OAFM,MAEA;AACL,cAAM,IAAIW,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF;;AAED,WAAO,MAAMJ,UAAN,CAAiBC,OAAjB,CAAP;AACD;;AAEDI,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,UAAMC,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,SAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAYH,GAAG,IAAIzT,KAAK,CAACgB,KAAzB;AACA,UAAM2G,IAAI,GAAG,KAAKkM,aAAL,EAAb;AACA,SAAKxH,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,WAAO/L,IAAP;AACD;;AAEDmM,EAAAA,kBAAkB,GAAG;AACnB,UAAMpM,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAMiH,SAAS,GAAG,KAAK1H,KAAL,CAAWE,QAA7B;AACA,UAAMyH,SAAS,GAAG,KAAK3H,KAAL,CAAWxD,KAA7B;AACA,SAAK+K,MAAL,CAAY5T,KAAK,CAAC6C,MAAlB;AACA,UAAMoR,SAAS,GAAG,KAAK5H,KAAL,CAAWE,QAA7B;AACA,SAAK2H,gBAAL,CAAsB,QAAtB;;AAEA,QAAIH,SAAS,CAACI,IAAV,KAAmBF,SAAS,CAACE,IAA7B,IAAqCJ,SAAS,CAACK,MAAV,KAAqBH,SAAS,CAACG,MAAV,GAAmB,CAAjF,EAAoF;AAClF,WAAKxK,KAAL,CAAWoK,SAAX,EAAsB,uDAAtB;AACD;;AAED,QAAI,KAAKK,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAJ,EAA4B;AAC1B8G,MAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK6V,eAAL,EAAb;AACA,WAAKV,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,aAAO,KAAKkM,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD,KAJD,MAIO;AACL,aAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;AACF;;AAED6M,EAAAA,oCAAoC,GAAG;AACrC,UAAMb,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,SAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,SAAKC,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACA,QAAI2G,IAAI,GAAG,IAAX;AACA,QAAI6M,SAAS,GAAG,IAAhB;;AAEA,QAAI,KAAKC,KAAL,CAAWzU,KAAK,CAAC6C,MAAjB,CAAJ,EAA8B;AAC5B,WAAKwJ,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACAc,MAAAA,SAAS,GAAG,KAAKV,kBAAL,EAAZ;AACD,KAHD,MAGO;AACLnM,MAAAA,IAAI,GAAG,KAAKkM,aAAL,EAAP;AACA,WAAKxH,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;;AAEA,UAAI,KAAKe,KAAL,CAAWzU,KAAK,CAAC6C,MAAjB,CAAJ,EAA8B;AAC5B2R,QAAAA,SAAS,GAAG,KAAKV,kBAAL,EAAZ;AACD;AACF;;AAED,WAAO,CAACnM,IAAD,EAAO6M,SAAP,CAAP;AACD;;AAEDE,EAAAA,qBAAqB,CAAChN,IAAD,EAAO;AAC1B,SAAK+J,IAAL;AACA,SAAKkD,qBAAL,CAA2BjN,IAA3B,EAAiC,IAAjC;AACA,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDkN,EAAAA,wBAAwB,CAAClN,IAAD,EAAO;AAC7B,SAAK+J,IAAL;AACA,UAAMoD,EAAE,GAAGnN,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAArB;AACA,UAAMC,QAAQ,GAAG,KAAKjI,SAAL,EAAjB;AACA,UAAMkI,aAAa,GAAG,KAAKlI,SAAL,EAAtB;;AAEA,QAAI,KAAKmI,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BF,MAAAA,QAAQ,CAAC9I,cAAT,GAA0B,KAAKiJ,iCAAL,EAA1B;AACD,KAFD,MAEO;AACLH,MAAAA,QAAQ,CAAC9I,cAAT,GAA0B,IAA1B;AACD;;AAED,SAAK2H,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA,UAAMuU,GAAG,GAAG,KAAKC,2BAAL,EAAZ;AACAL,IAAAA,QAAQ,CAACrL,MAAT,GAAkByL,GAAG,CAACzL,MAAtB;AACAqL,IAAAA,QAAQ,CAACM,IAAT,GAAgBF,GAAG,CAACE,IAApB;AACA,SAAKzB,MAAL,CAAY5T,KAAK,CAACa,MAAlB;;AAhB6B,gCAiBW,KAAK0T,oCAAL,EAjBX;;AAAA;;AAiB5BQ,IAAAA,QAAQ,CAACO,UAjBmB;AAiBP5N,IAAAA,IAAI,CAAC8M,SAjBE;AAkB7BQ,IAAAA,aAAa,CAACO,cAAd,GAA+B,KAAKxI,UAAL,CAAgBgI,QAAhB,EAA0B,wBAA1B,CAA/B;AACAF,IAAAA,EAAE,CAACU,cAAH,GAAoB,KAAKxI,UAAL,CAAgBiI,aAAhB,EAA+B,gBAA/B,CAApB;AACA,SAAKQ,gBAAL,CAAsBX,EAAtB;AACA,SAAKY,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDgO,EAAAA,gBAAgB,CAAChO,IAAD,EAAOiO,YAAP,EAAqB;AACnC,QAAI,KAAKlB,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAJ,EAA8B;AAC5B,aAAO,KAAKkQ,qBAAL,CAA2BhN,IAA3B,CAAP;AACD,KAFD,MAEO,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,CAAJ,EAAiC;AACtC,aAAO,KAAKiR,wBAAL,CAA8BlN,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACiE,IAAjB,CAAJ,EAA4B;AACjC,aAAO,KAAK2R,wBAAL,CAA8BlO,IAA9B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKmO,aAAL,CAAmB,QAAnB,CAAJ,EAAkC;AACvC,UAAI,KAAKpB,KAAL,CAAWzU,KAAK,CAACkB,GAAjB,CAAJ,EAA2B;AACzB,eAAO,KAAK4U,6BAAL,CAAmCpO,IAAnC,CAAP;AACD,OAFD,MAEO;AACL,YAAIiO,YAAJ,EAAkB;AAChB,eAAK/L,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,iEAApC;AACD;;AAED,eAAO,KAAKC,sBAAL,CAA4BtO,IAA5B,CAAP;AACD;AACF,KAVM,MAUA,IAAI,KAAKuO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpC,aAAO,KAAKC,yBAAL,CAA+BxO,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAKuO,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtC,aAAO,KAAKE,0BAAL,CAAgCzO,IAAhC,CAAP;AACD,KAFM,MAEA,IAAI,KAAKuO,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzC,aAAO,KAAKG,yBAAL,CAA+B1O,IAA/B,CAAP;AACD,KAFM,MAEA,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAAC0E,OAAjB,CAAJ,EAA+B;AACpC,aAAO,KAAK2R,iCAAL,CAAuC3O,IAAvC,EAA6CiO,YAA7C,CAAP;AACD,KAFM,MAEA;AACL,YAAM,KAAKW,UAAL,EAAN;AACD;AACF;;AAEDV,EAAAA,wBAAwB,CAAClO,IAAD,EAAO;AAC7B,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK0B,kCAAL,CAAwC,IAAxC,CAAV;AACA,SAAKnH,KAAL,CAAWoH,WAAX,CAAuB9O,IAAI,CAACmN,EAAL,CAAQlV,IAA/B,EAAqCoH,QAArC,EAA+CW,IAAI,CAACmN,EAAL,CAAQhM,KAAvD;AACA,SAAK4M,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDsO,EAAAA,sBAAsB,CAACtO,IAAD,EAAO;AAC3B,SAAK0H,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;;AAEA,QAAI,KAAKqP,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAJ,EAA8B;AAC5BsH,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK1I,aAAL,EAAV;AACD,KAFD,MAEO;AACLzE,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACD;;AAED,UAAM4B,QAAQ,GAAGhP,IAAI,CAACoD,IAAL,GAAY,KAAKgC,SAAL,EAA7B;AACA,UAAMhC,IAAI,GAAG4L,QAAQ,CAAC5L,IAAT,GAAgB,EAA7B;AACA,SAAK8I,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;;AAEA,WAAO,CAAC,KAAKiU,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAR,EAAkC;AAChC,UAAIgW,QAAQ,GAAG,KAAK5J,SAAL,EAAf;;AAEA,UAAI,KAAK2H,KAAL,CAAWzU,KAAK,CAAC2E,OAAjB,CAAJ,EAA+B;AAC7B,aAAK8M,IAAL;;AAEA,YAAI,CAAC,KAAKwE,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKxB,KAAL,CAAWzU,KAAK,CAACiF,OAAjB,CAAnC,EAA8D;AAC5D,eAAK2E,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,wFAApC;AACD;;AAED,aAAKY,WAAL,CAAiBD,QAAjB;AACD,OARD,MAQO;AACL,aAAKxC,gBAAL,CAAsB,SAAtB,EAAiC,kEAAjC;AACAwC,QAAAA,QAAQ,GAAG,KAAKhB,gBAAL,CAAsBgB,QAAtB,EAAgC,IAAhC,CAAX;AACD;;AAED5L,MAAAA,IAAI,CAACoB,IAAL,CAAUwK,QAAV;AACD;;AAED,SAAKtH,KAAL,CAAWwH,IAAX;AACA,SAAKhD,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,SAAKqM,UAAL,CAAgB2J,QAAhB,EAA0B,gBAA1B;AACA,QAAI9O,IAAI,GAAG,IAAX;AACA,QAAIiP,eAAe,GAAG,KAAtB;AACA,UAAMC,YAAY,GAAG,kFAAkF,0FAAvG;AACAhM,IAAAA,IAAI,CAACV,OAAL,CAAayH,WAAW,IAAI;AAC1B,UAAID,cAAc,CAACC,WAAD,CAAlB,EAAiC;AAC/B,YAAIjK,IAAI,KAAK,UAAb,EAAyB;AACvB,eAAKgC,KAAL,CAAWiI,WAAW,CAAChJ,KAAvB,EAA8BiO,YAA9B;AACD;;AAEDlP,QAAAA,IAAI,GAAG,IAAP;AACD,OAND,MAMO,IAAIiK,WAAW,CAAClK,IAAZ,KAAqB,sBAAzB,EAAiD;AACtD,YAAIkP,eAAJ,EAAqB;AACnB,eAAKjN,KAAL,CAAWiI,WAAW,CAAChJ,KAAvB,EAA8B,8CAA9B;AACD;;AAED,YAAIjB,IAAI,KAAK,IAAb,EAAmB,KAAKgC,KAAL,CAAWiI,WAAW,CAAChJ,KAAvB,EAA8BiO,YAA9B;AACnBlP,QAAAA,IAAI,GAAG,UAAP;AACAiP,QAAAA,eAAe,GAAG,IAAlB;AACD;AACF,KAhBD;AAiBAnP,IAAAA,IAAI,CAACE,IAAL,GAAYA,IAAI,IAAI,UAApB;AACA,WAAO,KAAKmF,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED2O,EAAAA,iCAAiC,CAAC3O,IAAD,EAAOiO,YAAP,EAAqB;AACpD,SAAK/B,MAAL,CAAY5T,KAAK,CAAC0E,OAAlB;;AAEA,QAAI,KAAK2P,GAAL,CAASrU,KAAK,CAACsD,QAAf,CAAJ,EAA8B;AAC5B,UAAI,KAAKmR,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,KAA+B,KAAK8Q,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAnC,EAA6D;AAC3DkD,QAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAK4D,gBAAL,CAAsB,KAAK5I,SAAL,EAAtB,CAAnB;AACD,OAFD,MAEO;AACLpF,QAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAK+B,aAAL,EAAnB;AACA,aAAK4B,SAAL;AACD;;AAED/N,MAAAA,IAAI,CAACqP,OAAL,GAAe,IAAf;AACA,aAAO,KAAKhK,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KAVD,MAUO;AACL,UAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACkE,MAAjB,KAA4B,KAAK8S,KAAL,EAA5B,IAA4C,CAAC,KAAKf,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA9B,KAAiE,CAACN,YAAlH,EAAgI;AAC9H,cAAMzW,KAAK,GAAG,KAAKmN,KAAL,CAAW5N,KAAzB;AACA,cAAMwY,UAAU,GAAG/E,iBAAiB,CAAChT,KAAD,CAApC;AACA,aAAKoX,UAAL,CAAgB,KAAKjK,KAAL,CAAWxD,KAA3B,EAAmC,oBAAmB3J,KAAM,8BAA6B+X,UAAW,YAApG;AACD;;AAED,UAAI,KAAKxC,KAAL,CAAWzU,KAAK,CAACiE,IAAjB,KAA0B,KAAKwQ,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,CAA1B,IAAyD,KAAK8Q,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAzD,IAAqF,KAAKyR,YAAL,CAAkB,QAAlB,CAAzF,EAAsH;AAClHvO,QAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAK4D,gBAAL,CAAsB,KAAK5I,SAAL,EAAtB,CAAnB;AACApF,QAAAA,IAAI,CAACqP,OAAL,GAAe,KAAf;AACA,eAAO,KAAKhK,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD,OAJH,MAIS,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,KAA0B,KAAK2R,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAA1B,IAAsD,KAAKyV,YAAL,CAAkB,WAAlB,CAAtD,IAAwF,KAAKA,YAAL,CAAkB,MAAlB,CAAxF,IAAqH,KAAKA,YAAL,CAAkB,QAAlB,CAAzH,EAAsJ;AAC3JvO,QAAAA,IAAI,GAAG,KAAKwP,WAAL,CAAiBxP,IAAjB,CAAP;;AAEA,YAAIA,IAAI,CAACC,IAAL,KAAc,wBAAlB,EAA4C;AAC1CD,UAAAA,IAAI,CAACC,IAAL,GAAY,mBAAZ;AACAD,UAAAA,IAAI,CAACqP,OAAL,GAAe,KAAf;AACA,iBAAOrP,IAAI,CAACyP,UAAZ;AACD;;AAEDzP,QAAAA,IAAI,CAACC,IAAL,GAAY,YAAYD,IAAI,CAACC,IAA7B;AACA,eAAOD,IAAP;AACD;AACJ;;AAED,UAAM,KAAK4O,UAAL,EAAN;AACD;;AAEDR,EAAAA,6BAA6B,CAACpO,IAAD,EAAO;AAClC,SAAK+J,IAAL;AACA,SAAKyC,gBAAL,CAAsB,SAAtB;AACAxM,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK6B,uBAAL,EAAtB;AACA,SAAK3B,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDwO,EAAAA,yBAAyB,CAACxO,IAAD,EAAO;AAC9B,SAAK+J,IAAL;AACA,SAAK4F,kBAAL,CAAwB3P,IAAxB;AACAA,IAAAA,IAAI,CAACC,IAAL,GAAY,kBAAZ;AACA,WAAOD,IAAP;AACD;;AAEDyO,EAAAA,0BAA0B,CAACzO,IAAD,EAAO;AAC/B,SAAK+J,IAAL;AACA,SAAK6F,mBAAL,CAAyB5P,IAAzB,EAA+B,IAA/B;AACAA,IAAAA,IAAI,CAACC,IAAL,GAAY,mBAAZ;AACA,WAAOD,IAAP;AACD;;AAED0O,EAAAA,yBAAyB,CAAC1O,IAAD,EAAO;AAC9B,SAAK+J,IAAL;AACA,SAAKkD,qBAAL,CAA2BjN,IAA3B;AACA,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDiN,EAAAA,qBAAqB,CAACjN,IAAD,EAAO6P,OAAO,GAAG,KAAjB,EAAwB;AAC3C7P,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK2C,6BAAL,CAAmC,CAACD,OAApC,EAA6C,IAA7C,CAAV;AACA,SAAKnI,KAAL,CAAWoH,WAAX,CAAuB9O,IAAI,CAACmN,EAAL,CAAQlV,IAA/B,EAAqC4X,OAAO,GAAGvQ,aAAH,GAAmBF,YAA/D,EAA6EY,IAAI,CAACmN,EAAL,CAAQhM,KAArF;;AAEA,QAAI,KAAKoM,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACD;;AAEDvE,IAAAA,IAAI,CAAC+P,OAAL,GAAe,EAAf;AACA/P,IAAAA,IAAI,CAACgQ,UAAL,GAAkB,EAAlB;AACAhQ,IAAAA,IAAI,CAACiQ,MAAL,GAAc,EAAd;;AAEA,QAAI,KAAKtD,GAAL,CAASrU,KAAK,CAACyE,QAAf,CAAJ,EAA8B;AAC5B,SAAG;AACDiD,QAAAA,IAAI,CAAC+P,OAAL,CAAavL,IAAb,CAAkB,KAAK0L,yBAAL,EAAlB;AACD,OAFD,QAES,CAACL,OAAD,IAAY,KAAKlD,GAAL,CAASrU,KAAK,CAACc,KAAf,CAFrB;AAGD;;AAED,QAAI,KAAKmV,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/B,WAAKxE,IAAL;;AAEA,SAAG;AACD/J,QAAAA,IAAI,CAACiQ,MAAL,CAAYzL,IAAZ,CAAiB,KAAK0L,yBAAL,EAAjB;AACD,OAFD,QAES,KAAKvD,GAAL,CAASrU,KAAK,CAACc,KAAf,CAFT;AAGD;;AAED,QAAI,KAAKmV,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAKxE,IAAL;;AAEA,SAAG;AACD/J,QAAAA,IAAI,CAACgQ,UAAL,CAAgBxL,IAAhB,CAAqB,KAAK0L,yBAAL,EAArB;AACD,OAFD,QAES,KAAKvD,GAAL,CAASrU,KAAK,CAACc,KAAf,CAFT;AAGD;;AAED4G,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAK+M,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAEP,OADsB;AAEnCQ,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAEV,OAJuB;AAKnCW,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOD;;AAEDN,EAAAA,yBAAyB,GAAG;AAC1B,UAAMlQ,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKsD,gCAAL,EAAV;;AAEA,QAAI,KAAKlD,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKmM,mCAAL,EAAtB;AACD,KAFD,MAEO;AACL1Q,MAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACD;;AAED,WAAO,KAAKc,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED2Q,EAAAA,kBAAkB,CAAC3Q,IAAD,EAAO;AACvB,SAAKiN,qBAAL,CAA2BjN,IAA3B;AACA,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED4Q,EAAAA,kBAAkB,CAAClI,IAAD,EAAO;AACvB,QAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAKxG,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,uDAA7B;AACD;AACF;;AAED0P,EAAAA,iBAAiB,CAACnI,IAAD,EAAO7D,QAAP,EAAiBuF,WAAjB,EAA8B;AAC7C,QAAI,CAACH,aAAa,CAACpB,GAAd,CAAkBH,IAAlB,CAAL,EAA8B;;AAE9B,QAAI0B,WAAJ,EAAiB;AACf,WAAKlI,KAAL,CAAW2C,QAAX,EAAsB,kCAAiC6D,IAAK,EAA5D;AACA;AACD;;AAED,SAAKxG,KAAL,CAAW2C,QAAX,EAAsB,4BAA2B6D,IAAK,EAAtD;AACD;;AAEDoH,EAAAA,6BAA6B,CAACgB,OAAD,EAAU1G,WAAV,EAAuB;AAClD,SAAKyG,iBAAL,CAAuB,KAAKlM,KAAL,CAAW5N,KAAlC,EAAyC,KAAK4N,KAAL,CAAWxD,KAApD,EAA2DiJ,WAA3D;AACA,WAAO,KAAKgD,eAAL,CAAqB0D,OAArB,CAAP;AACD;;AAEDnB,EAAAA,kBAAkB,CAAC3P,IAAD,EAAO;AACvBA,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK2C,6BAAL,CAAmC,KAAnC,EAA0C,IAA1C,CAAV;AACA,SAAKpI,KAAL,CAAWoH,WAAX,CAAuB9O,IAAI,CAACmN,EAAL,CAAQlV,IAA/B,EAAqCmH,YAArC,EAAmDY,IAAI,CAACmN,EAAL,CAAQhM,KAA3D;;AAEA,QAAI,KAAKoM,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACD;;AAEDvE,IAAAA,IAAI,CAAC+Q,KAAL,GAAa,KAAKjF,wBAAL,CAA8BxT,KAAK,CAAC6B,EAApC,CAAb;AACA,SAAK4T,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAED4P,EAAAA,mBAAmB,CAAC5P,IAAD,EAAOgR,OAAP,EAAgB;AACjC,SAAKxE,gBAAL,CAAsB,MAAtB;AACAxM,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK2C,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAAV;AACA,SAAKpI,KAAL,CAAWoH,WAAX,CAAuB9O,IAAI,CAACmN,EAAL,CAAQlV,IAA/B,EAAqCmH,YAArC,EAAmDY,IAAI,CAACmN,EAAL,CAAQhM,KAA3D;;AAEA,QAAI,KAAKoM,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD,KAFD,MAEO;AACLxN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACD;;AAEDvE,IAAAA,IAAI,CAACiR,SAAL,GAAiB,IAAjB;;AAEA,QAAI,KAAKlE,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B0G,MAAAA,IAAI,CAACiR,SAAL,GAAiB,KAAKnF,wBAAL,CAA8BxT,KAAK,CAACgB,KAApC,CAAjB;AACD;;AAED0G,IAAAA,IAAI,CAACkR,QAAL,GAAgB,IAAhB;;AAEA,QAAI,CAACF,OAAL,EAAc;AACZhR,MAAAA,IAAI,CAACkR,QAAL,GAAgB,KAAKpF,wBAAL,CAA8BxT,KAAK,CAAC6B,EAApC,CAAhB;AACD;;AAED,SAAK4T,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDmR,EAAAA,sBAAsB,CAACC,cAAc,GAAG,KAAlB,EAAyB;AAC7C,UAAMC,SAAS,GAAG,KAAK1M,KAAL,CAAWxD,KAA7B;AACA,UAAMnB,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAMkM,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAMC,KAAK,GAAG,KAAK3C,kCAAL,EAAd;AACA7O,IAAAA,IAAI,CAAC/H,IAAL,GAAYuZ,KAAK,CAACvZ,IAAlB;AACA+H,IAAAA,IAAI,CAACsR,QAAL,GAAgBA,QAAhB;AACAtR,IAAAA,IAAI,CAACyR,KAAL,GAAaD,KAAK,CAAC3D,cAAnB;;AAEA,QAAI,KAAKd,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,CAAJ,EAA0B;AACxB,WAAKwS,GAAL,CAASrU,KAAK,CAAC6B,EAAf;AACA6F,MAAAA,IAAI,CAACqP,OAAL,GAAe,KAAKlD,aAAL,EAAf;AACD,KAHD,MAGO;AACL,UAAIiF,cAAJ,EAAoB;AAClB,aAAKlP,KAAL,CAAWmP,SAAX,EAAsB,yGAAtB;AACD;AACF;;AAED,WAAO,KAAKhM,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDwN,EAAAA,iCAAiC,GAAG;AAClC,UAAMxB,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,UAAMjM,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACgC,MAAL,GAAc,EAAd;AACA,SAAK2C,KAAL,CAAWsH,MAAX,GAAoB,IAApB;;AAEA,QAAI,KAAKsB,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWzU,KAAK,CAACoZ,WAAjB,CAA9B,EAA6D;AAC3D,WAAK3H,IAAL;AACD,KAFD,MAEO;AACL,WAAK6E,UAAL;AACD;;AAED,QAAI+C,eAAe,GAAG,KAAtB;;AAEA,OAAG;AACD,YAAMC,aAAa,GAAG,KAAKT,sBAAL,CAA4BQ,eAA5B,CAAtB;AACA3R,MAAAA,IAAI,CAACgC,MAAL,CAAYwC,IAAZ,CAAiBoN,aAAjB;;AAEA,UAAIA,aAAa,CAACvC,OAAlB,EAA2B;AACzBsC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAED,UAAI,CAAC,KAAKpE,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKrB,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF,KAXD,QAWS,CAAC,KAAKmU,YAAL,CAAkB,GAAlB,CAXV;;AAaA,SAAKsE,gBAAL,CAAsB,GAAtB;AACA,SAAKlN,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAK3G,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED0Q,EAAAA,mCAAmC,GAAG;AACpC,UAAM1Q,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAM4G,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACAjM,IAAAA,IAAI,CAACgC,MAAL,GAAc,EAAd;AACA,SAAK2C,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,SAAK4F,gBAAL,CAAsB,GAAtB;AACA,UAAMC,qBAAqB,GAAG,KAAKnN,KAAL,CAAWoN,kBAAzC;AACA,SAAKpN,KAAL,CAAWoN,kBAAX,GAAgC,KAAhC;;AAEA,WAAO,CAAC,KAAKxE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BvN,MAAAA,IAAI,CAACgC,MAAL,CAAYwC,IAAZ,CAAiB,KAAK2H,aAAL,EAAjB;;AAEA,UAAI,CAAC,KAAKoB,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKrB,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF;;AAED,SAAKuL,KAAL,CAAWoN,kBAAX,GAAgCD,qBAAhC;AACA,SAAKD,gBAAL,CAAsB,GAAtB;AACA,SAAKlN,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAK3G,UAAL,CAAgBrF,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAEDgS,EAAAA,4CAA4C,GAAG;AAC7C,UAAMhS,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAM4G,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACAjM,IAAAA,IAAI,CAACgC,MAAL,GAAc,EAAd;AACA,SAAK2C,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,SAAK4F,gBAAL,CAAsB,GAAtB;;AAEA,WAAO,CAAC,KAAKtE,YAAL,CAAkB,GAAlB,CAAR,EAAgC;AAC9BvN,MAAAA,IAAI,CAACgC,MAAL,CAAYwC,IAAZ,CAAiB,KAAKyN,oCAAL,EAAjB;;AAEA,UAAI,CAAC,KAAK1E,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAKrB,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF;;AAED,SAAKyY,gBAAL,CAAsB,GAAtB;AACA,SAAKlN,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,WAAO,KAAK3G,UAAL,CAAgBrF,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAEDkS,EAAAA,sBAAsB,GAAG;AACvB,UAAMlS,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKoH,gBAAL,CAAsB,WAAtB;AACAxM,IAAAA,IAAI,CAAC+P,OAAL,GAAe,EAAf;;AAEA,QAAI,KAAKpD,GAAL,CAASrU,KAAK,CAACyE,QAAf,CAAJ,EAA8B;AAC5B,SAAG;AACDiD,QAAAA,IAAI,CAAC+P,OAAL,CAAavL,IAAb,CAAkB,KAAK0L,yBAAL,EAAlB;AACD,OAFD,QAES,KAAKvD,GAAL,CAASrU,KAAK,CAACc,KAAf,CAFT;AAGD;;AAED4G,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAK+M,mBAAL,CAAyB;AACnCC,MAAAA,WAAW,EAAE,KADsB;AAEnCC,MAAAA,UAAU,EAAE,KAFuB;AAGnCC,MAAAA,WAAW,EAAE,KAHsB;AAInCC,MAAAA,UAAU,EAAE,KAJuB;AAKnCC,MAAAA,YAAY,EAAE;AALqB,KAAzB,CAAZ;AAOA,WAAO,KAAKnL,UAAL,CAAgBrF,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAEDmS,EAAAA,0BAA0B,GAAG;AAC3B,WAAO,KAAKpF,KAAL,CAAWzU,KAAK,CAACC,GAAjB,KAAyB,KAAKwU,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAzB,GAAoD,KAAK+L,aAAL,EAApD,GAA2E,KAAK2I,eAAL,CAAqB,IAArB,CAAlF;AACD;;AAEDgF,EAAAA,0BAA0B,CAACpS,IAAD,EAAOqS,QAAP,EAAiBf,QAAjB,EAA2B;AACnDtR,IAAAA,IAAI,CAACsS,MAAL,GAAcD,QAAd;;AAEA,QAAI,KAAKE,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAACgB,KAApC,EAA2C;AACzC0G,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKgF,0BAAL,EAAV;AACAnS,MAAAA,IAAI,CAAC+C,GAAL,GAAW,KAAK+I,wBAAL,EAAX;AACD,KAHD,MAGO;AACL9L,MAAAA,IAAI,CAACmN,EAAL,GAAU,IAAV;AACAnN,MAAAA,IAAI,CAAC+C,GAAL,GAAW,KAAKoJ,aAAL,EAAX;AACD;;AAED,SAAKD,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACAmH,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK+U,wBAAL,EAAb;AACA9L,IAAAA,IAAI,CAACsR,QAAL,GAAgBA,QAAhB;AACA,WAAO,KAAKjM,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDwS,EAAAA,+BAA+B,CAACxS,IAAD,EAAOqS,QAAP,EAAiB;AAC9CrS,IAAAA,IAAI,CAACsS,MAAL,GAAcD,QAAd;AACArS,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKgF,0BAAL,EAAV;AACA,SAAKjG,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACA,SAAKqT,MAAL,CAAY5T,KAAK,CAACO,QAAlB;;AAEA,QAAI,KAAK0U,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA9B,EAAwD;AACtD8G,MAAAA,IAAI,CAACG,MAAL,GAAc,IAAd;AACAH,MAAAA,IAAI,CAACyS,QAAL,GAAgB,KAAhB;AACAzS,MAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK2b,4BAAL,CAAkC,KAAKxR,WAAL,CAAiBlB,IAAI,CAACmB,KAAtB,EAA6BnB,IAAI,CAACoB,GAAL,CAASD,KAAtC,CAAlC,CAAb;AACD,KAJD,MAIO;AACLnB,MAAAA,IAAI,CAACG,MAAL,GAAc,KAAd;;AAEA,UAAI,KAAKwM,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BuG,QAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACD;;AAEDzS,MAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK+U,wBAAL,EAAb;AACD;;AAED,WAAO,KAAKzG,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED0S,EAAAA,4BAA4B,CAAC1S,IAAD,EAAO;AACjCA,IAAAA,IAAI,CAACgC,MAAL,GAAc,EAAd;AACAhC,IAAAA,IAAI,CAAC2N,IAAL,GAAY,IAAZ;AACA3N,IAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;;AAEA,QAAI,KAAKgJ,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD;;AAED,SAAKtB,MAAL,CAAY5T,KAAK,CAACY,MAAlB;;AAEA,WAAO,CAAC,KAAK6T,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAD,IAA6B,CAAC,KAAK4T,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAArC,EAAiE;AAC/DmG,MAAAA,IAAI,CAACgC,MAAL,CAAYwC,IAAZ,CAAiB,KAAKmO,0BAAL,EAAjB;;AAEA,UAAI,CAAC,KAAK5F,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAL,EAA+B;AAC7B,aAAK+S,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF;;AAED,QAAI,KAAKuT,GAAL,CAASrU,KAAK,CAACuB,QAAf,CAAJ,EAA8B;AAC5BmG,MAAAA,IAAI,CAAC2N,IAAL,GAAY,KAAKgF,0BAAL,EAAZ;AACD;;AAED,SAAKzG,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA6G,IAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAK9B,wBAAL,EAAlB;AACA,WAAO,KAAKzG,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED4S,EAAAA,+BAA+B,CAAC5S,IAAD,EAAOqS,QAAP,EAAiB;AAC9C,UAAMQ,SAAS,GAAG,KAAKzN,SAAL,EAAlB;AACApF,IAAAA,IAAI,CAACsS,MAAL,GAAcD,QAAd;AACArS,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK2b,4BAAL,CAAkCG,SAAlC,CAAb;AACA,WAAO,KAAKxN,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDmQ,EAAAA,mBAAmB,CAAC;AAClBC,IAAAA,WADkB;AAElBC,IAAAA,UAFkB;AAGlBC,IAAAA,WAHkB;AAIlBC,IAAAA,UAJkB;AAKlBC,IAAAA;AALkB,GAAD,EAMhB;AACD,UAAMxE,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,SAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,UAAMoF,SAAS,GAAG,KAAKjM,SAAL,EAAlB;AACAiM,IAAAA,SAAS,CAACyB,cAAV,GAA2B,EAA3B;AACAzB,IAAAA,SAAS,CAAC5O,UAAV,GAAuB,EAAvB;AACA4O,IAAAA,SAAS,CAAC0B,QAAV,GAAqB,EAArB;AACA1B,IAAAA,SAAS,CAAC2B,aAAV,GAA0B,EAA1B;AACA,QAAIC,QAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAI9C,UAAU,IAAI,KAAKtD,KAAL,CAAWzU,KAAK,CAACS,SAAjB,CAAlB,EAA+C;AAC7C,WAAKmT,MAAL,CAAY5T,KAAK,CAACS,SAAlB;AACAka,MAAAA,QAAQ,GAAG3a,KAAK,CAACW,SAAjB;AACAia,MAAAA,KAAK,GAAG,IAAR;AACD,KAJD,MAIO;AACL,WAAKhH,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACAma,MAAAA,QAAQ,GAAG3a,KAAK,CAACU,MAAjB;AACAka,MAAAA,KAAK,GAAG,KAAR;AACD;;AAED7B,IAAAA,SAAS,CAAC6B,KAAV,GAAkBA,KAAlB;;AAEA,WAAO,CAAC,KAAKnG,KAAL,CAAWkG,QAAX,CAAR,EAA8B;AAC5B,UAAIZ,QAAQ,GAAG,KAAf;AACA,UAAIe,UAAU,GAAG,IAAjB;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,YAAMrT,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,UAAImL,UAAU,IAAI,KAAKhC,YAAL,CAAkB,OAAlB,CAAlB,EAA8C;AAC5C,cAAMgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACgB,KAAzB,IAAkCiZ,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACmB,QAA/D,EAAyE;AACvE,eAAKsQ,IAAL;AACAqJ,UAAAA,UAAU,GAAG,KAAKzO,KAAL,CAAWxD,KAAxB;AACAiP,UAAAA,WAAW,GAAG,KAAd;AACD;AACF;;AAED,UAAIA,WAAW,IAAI,KAAK7B,YAAL,CAAkB,QAAlB,CAAnB,EAAgD;AAC9C,cAAMgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,YAAIA,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACgB,KAAzB,IAAkCiZ,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACmB,QAA/D,EAAyE;AACvE,eAAKsQ,IAAL;AACAsI,UAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,YAAMf,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;;AAEA,UAAI,KAAK5E,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAJ,EAA8B;AAC5B,YAAIwa,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKxE,UAAL,CAAgBwE,UAAhB;AACD;;AAED,YAAI,KAAKzG,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAJ,EAA8B;AAC5B,cAAI0Y,QAAJ,EAAc;AACZ,iBAAK1C,UAAL,CAAgB0C,QAAQ,CAACnQ,KAAzB;AACD;;AAEDkQ,UAAAA,SAAS,CAAC2B,aAAV,CAAwBxO,IAAxB,CAA6B,KAAKgO,+BAAL,CAAqCxS,IAArC,EAA2CqS,QAA3C,CAA7B;AACD,SAND,MAMO;AACLhB,UAAAA,SAAS,CAAC0B,QAAV,CAAmBvO,IAAnB,CAAwB,KAAK4N,0BAAL,CAAgCpS,IAAhC,EAAsCqS,QAAtC,EAAgDf,QAAhD,CAAxB;AACD;AACF,OAdD,MAcO,IAAI,KAAKvE,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAKqU,YAAL,CAAkB,GAAlB,CAAhC,EAAwD;AAC7D,YAAI6F,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKxE,UAAL,CAAgBwE,UAAhB;AACD;;AAED,YAAI9B,QAAJ,EAAc;AACZ,eAAK1C,UAAL,CAAgB0C,QAAQ,CAACnQ,KAAzB;AACD;;AAEDkQ,QAAAA,SAAS,CAACyB,cAAV,CAAyBtO,IAAzB,CAA8B,KAAKoO,+BAAL,CAAqC5S,IAArC,EAA2CqS,QAA3C,CAA9B;AACD,OAVM,MAUA;AACL,YAAIiB,aAAJ;;AAEA,YAAIpT,IAAI,GAAG,MAAX;;AAEA,YAAI,KAAKqO,YAAL,CAAkB,KAAlB,KAA4B,KAAKA,YAAL,CAAkB,KAAlB,CAAhC,EAA0D;AACxD,gBAAMgE,SAAS,GAAG,KAAKA,SAAL,EAAlB;;AAEA,cAAIA,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACL,IAAzB,IAAiCsa,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACI,MAA1D,IAAoE6Z,SAAS,CAACtS,IAAV,KAAmB3H,KAAK,CAACC,GAAjG,EAAsG;AACpG2H,YAAAA,IAAI,GAAG,KAAKyE,KAAL,CAAW5N,KAAlB;AACA,iBAAKgT,IAAL;AACD;AACF;;AAED,cAAMwJ,aAAa,GAAG,KAAKC,2BAAL,CAAiCxT,IAAjC,EAAuCqS,QAAvC,EAAiDe,UAAjD,EAA6D9B,QAA7D,EAAuEpR,IAAvE,EAA6EoQ,WAA7E,EAA0F,CAACgD,aAAa,GAAG9C,YAAjB,KAAkC,IAAlC,GAAyC8C,aAAzC,GAAyD,CAACJ,KAApJ,CAAtB;;AAEA,YAAIK,aAAa,KAAK,IAAtB,EAA4B;AAC1BJ,UAAAA,OAAO,GAAG,IAAV;AACAE,UAAAA,YAAY,GAAG,KAAK1O,KAAL,CAAW0J,YAA1B;AACD,SAHD,MAGO;AACLgD,UAAAA,SAAS,CAAC5O,UAAV,CAAqB+B,IAArB,CAA0B+O,aAA1B;AACD;AACF;;AAED,WAAKE,uBAAL;;AAEA,UAAIJ,YAAY,IAAI,CAAC,KAAKtG,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAjB,IAA6C,CAAC,KAAK+T,KAAL,CAAWzU,KAAK,CAACW,SAAjB,CAAlD,EAA+E;AAC7E,aAAKiJ,KAAL,CAAWmR,YAAX,EAAyB,qEAAzB;AACD;AACF;;AAED,SAAKnH,MAAL,CAAY+G,QAAZ;;AAEA,QAAI3C,WAAJ,EAAiB;AACfe,MAAAA,SAAS,CAAC8B,OAAV,GAAoBA,OAApB;AACD;;AAED,UAAM9L,GAAG,GAAG,KAAKhC,UAAL,CAAgBgM,SAAhB,EAA2B,sBAA3B,CAAZ;AACA,SAAK1M,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,WAAO3E,GAAP;AACD;;AAEDmM,EAAAA,2BAA2B,CAACxT,IAAD,EAAOqS,QAAP,EAAiBe,UAAjB,EAA6B9B,QAA7B,EAAuCpR,IAAvC,EAA6CoQ,WAA7C,EAA0DE,YAA1D,EAAwE;AACjG,QAAI,KAAK7D,GAAL,CAASrU,KAAK,CAACuB,QAAf,CAAJ,EAA8B;AAC5B,YAAM6Z,cAAc,GAAG,KAAK3G,KAAL,CAAWzU,KAAK,CAACc,KAAjB,KAA2B,KAAK2T,KAAL,CAAWzU,KAAK,CAACe,IAAjB,CAA3B,IAAqD,KAAK0T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAArD,IAAiF,KAAK+T,KAAL,CAAWzU,KAAK,CAACW,SAAjB,CAAxG;;AAEA,UAAIya,cAAJ,EAAoB;AAClB,YAAI,CAACpD,WAAL,EAAkB;AAChB,eAAKpO,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,yEAApC;AACD,SAFD,MAEO,IAAI,CAACmC,YAAL,EAAmB;AACxB,eAAKtO,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,4EAApC;AACD;;AAED,YAAIiD,QAAJ,EAAc;AACZ,eAAKpP,KAAL,CAAWoP,QAAQ,CAACnQ,KAApB,EAA2B,8CAA3B;AACD;;AAED,eAAO,IAAP;AACD;;AAED,UAAI,CAACmP,WAAL,EAAkB;AAChB,aAAKpO,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,iEAApC;AACD;;AAED,UAAI+E,UAAU,IAAI,IAAlB,EAAwB;AACtB,aAAKxE,UAAL,CAAgBwE,UAAhB;AACD;;AAED,UAAI9B,QAAJ,EAAc;AACZ,aAAKpP,KAAL,CAAWoP,QAAQ,CAACnQ,KAApB,EAA2B,wCAA3B;AACD;;AAEDnB,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKxH,aAAL,EAAhB;AACA,aAAO,KAAK9G,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD,KA/BD,MA+BO;AACLA,MAAAA,IAAI,CAAC+C,GAAL,GAAW,KAAKoP,0BAAL,EAAX;AACAnS,MAAAA,IAAI,CAACsS,MAAL,GAAcD,QAAd;AACArS,MAAAA,IAAI,CAAC4T,KAAL,GAAaR,UAAU,IAAI,IAA3B;AACApT,MAAAA,IAAI,CAACE,IAAL,GAAYA,IAAZ;AACA,UAAIuS,QAAQ,GAAG,KAAf;;AAEA,UAAI,KAAKlF,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA9B,EAAwD;AACtD8G,QAAAA,IAAI,CAACG,MAAL,GAAc,IAAd;;AAEA,YAAIiT,UAAU,IAAI,IAAlB,EAAwB;AACtB,eAAKxE,UAAL,CAAgBwE,UAAhB;AACD;;AAED,YAAI9B,QAAJ,EAAc;AACZ,eAAK1C,UAAL,CAAgB0C,QAAQ,CAACnQ,KAAzB;AACD;;AAEDnB,QAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK2b,4BAAL,CAAkC,KAAKxR,WAAL,CAAiBlB,IAAI,CAACmB,KAAtB,EAA6BnB,IAAI,CAACoB,GAAL,CAASD,KAAtC,CAAlC,CAAb;;AAEA,YAAIjB,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA/B,EAAsC;AACpC,eAAK2T,2BAAL,CAAiC7T,IAAjC;AACD;AACF,OAhBD,MAgBO;AACL,YAAIE,IAAI,KAAK,MAAb,EAAqB,KAAK0O,UAAL;AACrB5O,QAAAA,IAAI,CAACG,MAAL,GAAc,KAAd;;AAEA,YAAI,KAAKwM,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BgZ,UAAAA,QAAQ,GAAG,IAAX;AACD;;AAEDzS,QAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK+U,wBAAL,EAAb;AACA9L,QAAAA,IAAI,CAACsR,QAAL,GAAgBA,QAAhB;AACD;;AAEDtR,MAAAA,IAAI,CAACyS,QAAL,GAAgBA,QAAhB;AACA,aAAO,KAAKpN,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;AACD;AACF;;AAED6T,EAAAA,2BAA2B,CAACC,QAAD,EAAW;AACpC,UAAM/R,UAAU,GAAG+R,QAAQ,CAAC5T,IAAT,KAAkB,KAAlB,GAA0B,CAA1B,GAA8B,CAAjD;AACA,UAAMiB,KAAK,GAAG2S,QAAQ,CAAC3S,KAAvB;AACA,UAAMc,MAAM,GAAG6R,QAAQ,CAAC/c,KAAT,CAAeiL,MAAf,CAAsBC,MAAtB,IAAgC6R,QAAQ,CAAC/c,KAAT,CAAe4W,IAAf,GAAsB,CAAtB,GAA0B,CAA1D,CAAf;;AAEA,QAAI1L,MAAM,KAAKF,UAAf,EAA2B;AACzB,UAAI+R,QAAQ,CAAC5T,IAAT,KAAkB,KAAtB,EAA6B;AAC3B,aAAKgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;AACD,OAFD,MAEO;AACL,aAAKe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;AACD;AACF;;AAED,QAAI2S,QAAQ,CAAC5T,IAAT,KAAkB,KAAlB,IAA2B4T,QAAQ,CAAC/c,KAAT,CAAe4W,IAA9C,EAAoD;AAClD,WAAKzL,KAAL,CAAWf,KAAX,EAAkB,uDAAlB;AACD;AACF;;AAEDsS,EAAAA,uBAAuB,GAAG;AACxB,QAAI,CAAC,KAAK9G,GAAL,CAASrU,KAAK,CAACe,IAAf,CAAD,IAAyB,CAAC,KAAKsT,GAAL,CAASrU,KAAK,CAACc,KAAf,CAA1B,IAAmD,CAAC,KAAK2T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAApD,IAAgF,CAAC,KAAK+T,KAAL,CAAWzU,KAAK,CAACW,SAAjB,CAArF,EAAkH;AAChH,WAAK2V,UAAL;AACD;AACF;;AAED6B,EAAAA,gCAAgC,CAAC7L,QAAD,EAAWC,QAAX,EAAqBsI,EAArB,EAAyB;AACvDvI,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKD,KAAL,CAAWxD,KAAlC;AACA0D,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWE,QAAlC;AACA,QAAI7E,IAAI,GAAGmN,EAAE,IAAI,KAAK2C,6BAAL,CAAmC,IAAnC,CAAjB;;AAEA,WAAO,KAAKnD,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAP,EAA4B;AAC1B,YAAMua,KAAK,GAAG,KAAK7S,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAd;AACAkP,MAAAA,KAAK,CAACC,aAAN,GAAsBhU,IAAtB;AACA+T,MAAAA,KAAK,CAAC5G,EAAN,GAAW,KAAK2C,6BAAL,CAAmC,IAAnC,CAAX;AACA9P,MAAAA,IAAI,GAAG,KAAKqF,UAAL,CAAgB0O,KAAhB,EAAuB,yBAAvB,CAAP;AACD;;AAED,WAAO/T,IAAP;AACD;;AAEDiU,EAAAA,oBAAoB,CAACrP,QAAD,EAAWC,QAAX,EAAqBsI,EAArB,EAAyB;AAC3C,UAAMnN,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,IAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACAvE,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKsD,gCAAL,CAAsC7L,QAAtC,EAAgDC,QAAhD,EAA0DsI,EAA1D,CAAV;;AAEA,QAAI,KAAKI,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKmM,mCAAL,EAAtB;AACD;;AAED,WAAO,KAAKrL,UAAL,CAAgBrF,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAEDkU,EAAAA,mBAAmB,GAAG;AACpB,UAAMlU,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAACiF,OAAlB;AACAyC,IAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKQ,oBAAL,EAAhB;AACA,WAAO,KAAK9O,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDoU,EAAAA,kBAAkB,GAAG;AACnB,UAAMpU,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAAC1H,KAAL,GAAa,EAAb;AACA,SAAK4T,MAAL,CAAY5T,KAAK,CAACM,QAAlB;;AAEA,WAAO,KAAK+L,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAAtB,IAAgC,CAAC,KAAK8K,KAAL,CAAWzU,KAAK,CAACO,QAAjB,CAAxC,EAAoE;AAClEmH,MAAAA,IAAI,CAAC1H,KAAL,CAAWkM,IAAX,CAAgB,KAAK2H,aAAL,EAAhB;AACA,UAAI,KAAKY,KAAL,CAAWzU,KAAK,CAACO,QAAjB,CAAJ,EAAgC;AAChC,WAAKqT,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;;AAED,SAAK8S,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACA,WAAO,KAAKwM,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED2S,EAAAA,0BAA0B,GAAG;AAC3B,QAAI1a,IAAI,GAAG,IAAX;AACA,QAAIwa,QAAQ,GAAG,KAAf;AACA,QAAI5E,cAAc,GAAG,IAArB;AACA,UAAM7N,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAMiP,EAAE,GAAG,KAAK9B,SAAL,EAAX;;AAEA,QAAI8B,EAAE,CAACpU,IAAH,KAAY3H,KAAK,CAACgB,KAAlB,IAA2B+a,EAAE,CAACpU,IAAH,KAAY3H,KAAK,CAACmB,QAAjD,EAA2D;AACzDxB,MAAAA,IAAI,GAAG,KAAKmV,eAAL,EAAP;;AAEA,UAAI,KAAKT,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BgZ,QAAAA,QAAQ,GAAG,IAAX;AACD;;AAED5E,MAAAA,cAAc,GAAG,KAAK/B,wBAAL,EAAjB;AACD,KARD,MAQO;AACL+B,MAAAA,cAAc,GAAG,KAAK1B,aAAL,EAAjB;AACD;;AAEDnM,IAAAA,IAAI,CAAC/H,IAAL,GAAYA,IAAZ;AACA+H,IAAAA,IAAI,CAACyS,QAAL,GAAgBA,QAAhB;AACAzS,IAAAA,IAAI,CAAC6N,cAAL,GAAsBA,cAAtB;AACA,WAAO,KAAKxI,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDsU,EAAAA,kCAAkC,CAACrU,IAAD,EAAO;AACvC,UAAMD,IAAI,GAAG,KAAKkB,WAAL,CAAiBjB,IAAI,CAACkB,KAAtB,EAA6BlB,IAAI,CAACmB,GAAL,CAASD,KAAtC,CAAb;AACAnB,IAAAA,IAAI,CAAC/H,IAAL,GAAY,IAAZ;AACA+H,IAAAA,IAAI,CAACyS,QAAL,GAAgB,KAAhB;AACAzS,IAAAA,IAAI,CAAC6N,cAAL,GAAsB5N,IAAtB;AACA,WAAO,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED0N,EAAAA,2BAA2B,CAAC1L,MAAM,GAAG,EAAV,EAAc;AACvC,QAAI2L,IAAI,GAAG,IAAX;;AAEA,WAAO,CAAC,KAAKZ,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAD,IAA6B,CAAC,KAAK4T,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAArC,EAAiE;AAC/DmI,MAAAA,MAAM,CAACwC,IAAP,CAAY,KAAKmO,0BAAL,EAAZ;;AAEA,UAAI,CAAC,KAAK5F,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAL,EAA+B;AAC7B,aAAK+S,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF;;AAED,QAAI,KAAKuT,GAAL,CAASrU,KAAK,CAACuB,QAAf,CAAJ,EAA8B;AAC5B8T,MAAAA,IAAI,GAAG,KAAKgF,0BAAL,EAAP;AACD;;AAED,WAAO;AACL3Q,MAAAA,MADK;AAEL2L,MAAAA;AAFK,KAAP;AAID;;AAED4G,EAAAA,yBAAyB,CAAC3P,QAAD,EAAWC,QAAX,EAAqB7E,IAArB,EAA2BmN,EAA3B,EAA+B;AACtD,YAAQA,EAAE,CAAClV,IAAX;AACE,WAAK,KAAL;AACE,eAAO,KAAKoN,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;;AAEF,WAAK,MAAL;AACA,WAAK,SAAL;AACE,eAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,uBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,OAAL;AACE,eAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF,WAAK,QAAL;AACE,eAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,aAAK4Q,kBAAL,CAAwBzD,EAAE,CAAClV,IAA3B;AACA,eAAO,KAAKgc,oBAAL,CAA0BrP,QAA1B,EAAoCC,QAApC,EAA8CsI,EAA9C,CAAP;AAtBJ;AAwBD;;AAEDgH,EAAAA,oBAAoB,GAAG;AACrB,UAAMvP,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAM7E,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,QAAIqI,GAAJ;AACA,QAAIxN,IAAJ;AACA,QAAIuU,aAAa,GAAG,KAApB;AACA,UAAM1C,qBAAqB,GAAG,KAAKnN,KAAL,CAAWoN,kBAAzC;;AAEA,YAAQ,KAAKpN,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACL,IAAX;AACE,YAAI,KAAKsW,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AAClC,iBAAO,KAAK2D,sBAAL,EAAP;AACD;;AAED,eAAO,KAAKqC,yBAAL,CAA+B3P,QAA/B,EAAyCC,QAAzC,EAAmD7E,IAAnD,EAAyD,KAAKoN,eAAL,EAAzD,CAAP;;AAEF,WAAK9U,KAAK,CAACQ,MAAX;AACE,eAAO,KAAKqX,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,KAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAKlY,KAAK,CAACS,SAAX;AACE,eAAO,KAAKoX,mBAAL,CAAyB;AAC9BC,UAAAA,WAAW,EAAE,KADiB;AAE9BC,UAAAA,UAAU,EAAE,IAFkB;AAG9BC,UAAAA,WAAW,EAAE,IAHiB;AAI9BC,UAAAA,UAAU,EAAE,KAJkB;AAK9BC,UAAAA,YAAY,EAAE;AALgB,SAAzB,CAAP;;AAQF,WAAKlY,KAAK,CAACM,QAAX;AACE,aAAK+L,KAAL,CAAWoN,kBAAX,GAAgC,KAAhC;AACA9R,QAAAA,IAAI,GAAG,KAAKmU,kBAAL,EAAP;AACA,aAAKzP,KAAL,CAAWoN,kBAAX,GAAgCD,qBAAhC;AACA,eAAO7R,IAAP;;AAEF,WAAK3H,KAAK,CAAC0C,UAAX;AACE,YAAI,KAAK2J,KAAL,CAAW5N,KAAX,KAAqB,GAAzB,EAA8B;AAC5BiJ,UAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACA,eAAKtB,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACAuU,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACA1N,UAAAA,IAAI,CAACgC,MAAL,GAAcyL,GAAG,CAACzL,MAAlB;AACAhC,UAAAA,IAAI,CAAC2N,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA,eAAKzB,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,eAAK+S,MAAL,CAAY5T,KAAK,CAACqB,KAAlB;AACAqG,UAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;AACA,iBAAO,KAAK9G,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED;;AAEF,WAAK1H,KAAK,CAACY,MAAX;AACE,aAAK6Q,IAAL;;AAEA,YAAI,CAAC,KAAKgD,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAD,IAA6B,CAAC,KAAK4T,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAlC,EAA8D;AAC5D,cAAI,KAAKkT,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1B,kBAAME,KAAK,GAAG,KAAKoa,SAAL,GAAiBtS,IAA/B;AACAuU,YAAAA,aAAa,GAAGrc,KAAK,KAAKG,KAAK,CAACmB,QAAhB,IAA4BtB,KAAK,KAAKG,KAAK,CAACgB,KAA5D;AACD,WAHD,MAGO;AACLkb,YAAAA,aAAa,GAAG,IAAhB;AACD;AACF;;AAED,YAAIA,aAAJ,EAAmB;AACjB,eAAK7P,KAAL,CAAWoN,kBAAX,GAAgC,KAAhC;AACA9R,UAAAA,IAAI,GAAG,KAAKkM,aAAL,EAAP;AACA,eAAKxH,KAAL,CAAWoN,kBAAX,GAAgCD,qBAAhC;;AAEA,cAAI,KAAKnN,KAAL,CAAWoN,kBAAX,IAAiC,EAAE,KAAKhF,KAAL,CAAWzU,KAAK,CAACc,KAAjB,KAA2B,KAAK2T,KAAL,CAAWzU,KAAK,CAACa,MAAjB,KAA4B,KAAKoZ,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAACqB,KAAzF,CAArC,EAAsI;AACpI,iBAAKuS,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,mBAAO8G,IAAP;AACD,WAHD,MAGO;AACL,iBAAK0M,GAAL,CAASrU,KAAK,CAACc,KAAf;AACD;AACF;;AAED,YAAI6G,IAAJ,EAAU;AACRwN,UAAAA,GAAG,GAAG,KAAKC,2BAAL,CAAiC,CAAC,KAAK4G,kCAAL,CAAwCrU,IAAxC,CAAD,CAAjC,CAAN;AACD,SAFD,MAEO;AACLwN,UAAAA,GAAG,GAAG,KAAKC,2BAAL,EAAN;AACD;;AAED1N,QAAAA,IAAI,CAACgC,MAAL,GAAcyL,GAAG,CAACzL,MAAlB;AACAhC,QAAAA,IAAI,CAAC2N,IAAL,GAAYF,GAAG,CAACE,IAAhB;AACA,aAAKzB,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,aAAK+S,MAAL,CAAY5T,KAAK,CAACqB,KAAlB;AACAqG,QAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;AACAnM,QAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACA,eAAO,KAAKc,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAACI,MAAX;AACE,eAAO,KAAKmI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,KAAK,CAAC6E,KAAX;AACA,WAAK7E,KAAK,CAAC8E,MAAX;AACE4C,QAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAKgW,KAAL,CAAWzU,KAAK,CAAC6E,KAAjB,CAAb;AACA,aAAK4M,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,8BAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC4C,OAAX;AACE,YAAI,KAAKyJ,KAAL,CAAW5N,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,eAAKgT,IAAL;;AAEA,cAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACC,GAAjB,CAAJ,EAA2B;AACzB,mBAAO,KAAKsI,YAAL,CAAkB,CAAC,KAAK8D,KAAL,CAAW5N,KAA9B,EAAqC,6BAArC,EAAoEiJ,IAAI,CAACmB,KAAzE,EAAgFnB,IAAI,CAACoB,GAAL,CAASD,KAAzF,CAAP;AACD;;AAED,cAAI,KAAK4L,KAAL,CAAWzU,KAAK,CAACE,MAAjB,CAAJ,EAA8B;AAC5B,mBAAO,KAAKqI,YAAL,CAAkB,CAAC,KAAK8D,KAAL,CAAW5N,KAA9B,EAAqC,6BAArC,EAAoEiJ,IAAI,CAACmB,KAAzE,EAAgFnB,IAAI,CAACoB,GAAL,CAASD,KAAzF,CAAP;AACD;;AAED,gBAAM,KAAKe,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA8B,iDAA9B,CAAN;AACD;;AAED,aAAKyN,UAAL;;AAEF,WAAKtW,KAAK,CAACC,GAAX;AACE,eAAO,KAAKsI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,KAAK,CAACE,MAAX;AACE,eAAO,KAAKqI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,6BAApC,CAAP;;AAEF,WAAKuB,KAAK,CAACkF,KAAX;AACE,aAAKuM,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC4E,KAAX;AACE,aAAK6M,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,2BAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAACsE,KAAX;AACE,aAAKmN,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC8C,IAAX;AACE,aAAK2O,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;;AAEF;AACE,YAAI,KAAK2E,KAAL,CAAW1E,IAAX,CAAgBvI,OAAhB,KAA4B,QAAhC,EAA0C;AACxC,iBAAO,KAAKwc,mBAAL,EAAP;AACD,SAFD,MAEO,IAAI,KAAKvP,KAAL,CAAW1E,IAAX,CAAgBvI,OAApB,EAA6B;AAClC,gBAAMF,KAAK,GAAG,KAAKmN,KAAL,CAAW1E,IAAX,CAAgBzI,KAA9B;AACA,eAAKuS,IAAL;AACA,iBAAO,MAAM0K,gBAAN,CAAuBzU,IAAvB,EAA6BxI,KAA7B,CAAP;AACD;;AA7IL;;AAiJA,UAAM,KAAKoX,UAAL,EAAN;AACD;;AAED8F,EAAAA,oBAAoB,GAAG;AACrB,UAAM9P,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AAAA,UACM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAD5B;AAEA,QAAI5E,IAAI,GAAG,KAAKkU,oBAAL,EAAX;;AAEA,WAAO,KAAKpH,KAAL,CAAWzU,KAAK,CAACM,QAAjB,KAA8B,CAAC,KAAK+b,kBAAL,EAAtC,EAAiE;AAC/D,YAAM3U,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC4U,WAAL,GAAmB3U,IAAnB;AACA,WAAKiM,MAAL,CAAY5T,KAAK,CAACM,QAAlB;AACA,WAAKsT,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACAoH,MAAAA,IAAI,GAAG,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED,WAAOC,IAAP;AACD;;AAED4U,EAAAA,mBAAmB,GAAG;AACpB,UAAM7U,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAKuH,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BuG,MAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAKgH,mBAAL,EAAtB;AACA,aAAO,KAAKxP,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAK0U,oBAAL,EAAP;AACD;AACF;;AAEDI,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,KAAK,GAAG,KAAKF,mBAAL,EAAd;;AAEA,QAAI,CAAC,KAAKlQ,KAAL,CAAWoN,kBAAZ,IAAkC,KAAKpF,GAAL,CAASrU,KAAK,CAACqB,KAAf,CAAtC,EAA6D;AAC3D,YAAMqG,IAAI,GAAG,KAAKkB,WAAL,CAAiB6T,KAAK,CAAC5T,KAAvB,EAA8B4T,KAAK,CAAC3T,GAAN,CAAUD,KAAxC,CAAb;AACAnB,MAAAA,IAAI,CAACgC,MAAL,GAAc,CAAC,KAAKsS,kCAAL,CAAwCS,KAAxC,CAAD,CAAd;AACA/U,MAAAA,IAAI,CAAC2N,IAAL,GAAY,IAAZ;AACA3N,MAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKzB,aAAL,EAAlB;AACAnM,MAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACA,aAAO,KAAKc,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,WAAO+U,KAAP;AACD;;AAEDC,EAAAA,yBAAyB,GAAG;AAC1B,UAAMhV,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKuH,GAAL,CAASrU,KAAK,CAACwC,UAAf;AACA,UAAMmF,IAAI,GAAG,KAAK6U,kCAAL,EAAb;AACA9U,IAAAA,IAAI,CAAC1H,KAAL,GAAa,CAAC2H,IAAD,CAAb;;AAEA,WAAO,KAAK0M,GAAL,CAASrU,KAAK,CAACwC,UAAf,CAAP,EAAmC;AACjCkF,MAAAA,IAAI,CAAC1H,KAAL,CAAWkM,IAAX,CAAgB,KAAKsQ,kCAAL,EAAhB;AACD;;AAED,WAAO9U,IAAI,CAAC1H,KAAL,CAAW2J,MAAX,KAAsB,CAAtB,GAA0BhC,IAA1B,GAAiC,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,4BAAtB,CAAxC;AACD;;AAEDiV,EAAAA,kBAAkB,GAAG;AACnB,UAAMjV,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKuH,GAAL,CAASrU,KAAK,CAACsC,SAAf;AACA,UAAMqF,IAAI,GAAG,KAAK+U,yBAAL,EAAb;AACAhV,IAAAA,IAAI,CAAC1H,KAAL,GAAa,CAAC2H,IAAD,CAAb;;AAEA,WAAO,KAAK0M,GAAL,CAASrU,KAAK,CAACsC,SAAf,CAAP,EAAkC;AAChCoF,MAAAA,IAAI,CAAC1H,KAAL,CAAWkM,IAAX,CAAgB,KAAKwQ,yBAAL,EAAhB;AACD;;AAED,WAAOhV,IAAI,CAAC1H,KAAL,CAAW2J,MAAX,KAAsB,CAAtB,GAA0BhC,IAA1B,GAAiC,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAxC;AACD;;AAEDmM,EAAAA,aAAa,GAAG;AACd,UAAMH,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,SAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;AACA,UAAMhM,IAAI,GAAG,KAAKgV,kBAAL,EAAb;AACA,SAAKtQ,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACA,SAAKrH,KAAL,CAAWyC,WAAX,GAAyB,KAAKzC,KAAL,CAAWyC,WAAX,IAA0B,KAAKzC,KAAL,CAAWoN,kBAA9D;AACA,WAAO9R,IAAP;AACD;;AAEDgS,EAAAA,oCAAoC,GAAG;AACrC,QAAI,KAAKtN,KAAL,CAAW1E,IAAX,KAAoB3H,KAAK,CAACL,IAA1B,IAAkC,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,GAA3D,EAAgE;AAC9D,YAAM6N,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,YAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,YAAM7E,IAAI,GAAG,KAAKoN,eAAL,EAAb;AACA,aAAO,KAAK6G,oBAAL,CAA0BrP,QAA1B,EAAoCC,QAApC,EAA8C7E,IAA9C,CAAP;AACD,KALD,MAKO;AACL,aAAO,KAAKmM,aAAL,EAAP;AACD;AACF;;AAEDuD,EAAAA,uBAAuB,GAAG;AACxB,UAAM1P,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK/B,wBAAL,EAAtB;AACA,WAAO,KAAKzG,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED6O,EAAAA,kCAAkC,CAACqG,sBAAD,EAAyB;AACzD,UAAM1D,KAAK,GAAG0D,sBAAsB,GAAG,KAAK9H,eAAL,EAAH,GAA4B,KAAK0C,6BAAL,EAAhE;;AAEA,QAAI,KAAK/C,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3BkY,MAAAA,KAAK,CAAC3D,cAAN,GAAuB,KAAK6B,uBAAL,EAAvB;AACA,WAAK5B,gBAAL,CAAsB0D,KAAtB;AACD;;AAED,WAAOA,KAAP;AACD;;AAED2D,EAAAA,mBAAmB,CAACnV,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAACqB,UAAL,CAAgBwM,cAAhB,GAAiC7N,IAAI,CAAC6N,cAAtC;AACA,SAAKC,gBAAL,CAAsB9N,IAAI,CAACqB,UAA3B,EAAuCrB,IAAI,CAAC6N,cAAL,CAAoBpM,GAA3D,EAAgEzB,IAAI,CAAC6N,cAAL,CAAoBzM,GAApB,CAAwBK,GAAxF;AACA,WAAOzB,IAAI,CAACqB,UAAZ;AACD;;AAEDkQ,EAAAA,iBAAiB,GAAG;AAClB,QAAID,QAAQ,GAAG,IAAf;;AAEA,QAAI,KAAKvE,KAAL,CAAWzU,KAAK,CAAC4C,OAAjB,CAAJ,EAA+B;AAC7BoW,MAAAA,QAAQ,GAAG,KAAKlM,SAAL,EAAX;;AAEA,UAAI,KAAKT,KAAL,CAAW5N,KAAX,KAAqB,GAAzB,EAA8B;AAC5Bua,QAAAA,QAAQ,CAACpR,IAAT,GAAgB,MAAhB;AACD,OAFD,MAEO;AACLoR,QAAAA,QAAQ,CAACpR,IAAT,GAAgB,OAAhB;AACD;;AAED,WAAK6J,IAAL;AACA,WAAK1E,UAAL,CAAgBiM,QAAhB,EAA0B,UAA1B;AACD;;AAED,WAAOA,QAAP;AACD;;AAEDxM,EAAAA,iBAAiB,CAAC9E,IAAD,EAAOoV,mBAAP,EAA4BpQ,QAAQ,GAAG,KAAvC,EAA8C;AAC7D,QAAIoQ,mBAAJ,EAAyB;AACvB,aAAO,KAAKC,gCAAL,CAAsCrV,IAAtC,EAA4C,MAAM,MAAM8E,iBAAN,CAAwB9E,IAAxB,EAA8B,IAA9B,EAAoCgF,QAApC,CAAlD,CAAP;AACD;;AAED,WAAO,MAAMF,iBAAN,CAAwB9E,IAAxB,EAA8B,KAA9B,EAAqCgF,QAArC,CAAP;AACD;;AAEDsQ,EAAAA,0BAA0B,CAACtV,IAAD,EAAOC,IAAP,EAAa+E,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAK+H,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM+T,QAAQ,GAAG,KAAKjI,SAAL,EAAjB;;AAD2B,mCAEiB,KAAKyH,oCAAL,EAFjB;;AAAA;;AAE1BQ,MAAAA,QAAQ,CAACQ,cAFiB;AAED7N,MAAAA,IAAI,CAAC8M,SAFJ;AAG3B9M,MAAAA,IAAI,CAAC4N,UAAL,GAAkBP,QAAQ,CAACQ,cAAT,GAA0B,KAAKxI,UAAL,CAAgBgI,QAAhB,EAA0B,gBAA1B,CAA1B,GAAwE,IAA1F;AACD;;AAED,UAAMiI,0BAAN,CAAiCtV,IAAjC,EAAuCC,IAAvC,EAA6C+E,QAA7C;AACD;;AAEDuQ,EAAAA,cAAc,CAACpO,OAAD,EAAUvD,QAAV,EAAoB;AAChC,QAAI,KAAKe,KAAL,CAAWyD,MAAX,IAAqB,KAAK2E,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAArB,IAA+C,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,WAAxE,EAAqF;AACnF,YAAMiJ,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA,aAAO,KAAK4G,kBAAL,CAAwB3Q,IAAxB,CAAP;AACD,KAJD,MAIO,IAAI,KAAKsL,gBAAL,MAA2B,KAAKiD,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/D,YAAMvO,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA,aAAO,KAAKyL,wBAAL,CAA8BxV,IAA9B,CAAP;AACD,KAJM,MAIA;AACL,YAAMiB,IAAI,GAAG,MAAMsU,cAAN,CAAqBpO,OAArB,EAA8BvD,QAA9B,CAAb;;AAEA,UAAI,KAAKsH,UAAL,KAAoBC,SAApB,IAAiC,CAAC,KAAK5H,gBAAL,CAAsBtC,IAAtB,CAAtC,EAAmE;AACjE,aAAKiK,UAAL,GAAkB,IAAlB;AACD;;AAED,aAAOjK,IAAP;AACD;AACF;;AAEDwU,EAAAA,wBAAwB,CAACzV,IAAD,EAAOoC,IAAP,EAAa;AACnC,QAAIA,IAAI,CAACnC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,UAAImC,IAAI,CAACnK,IAAL,KAAc,SAAlB,EAA6B;AAC3B,YAAI,KAAK8U,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,KAA4B,KAAKiQ,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAA5B,IAAsD,KAAK8U,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,CAAtD,IAAqF,KAAK8Q,KAAL,CAAWzU,KAAK,CAACiE,IAAjB,CAArF,IAA+G,KAAKwQ,KAAL,CAAWzU,KAAK,CAAC0E,OAAjB,CAAnH,EAA8I;AAC5I,iBAAO,KAAKgR,gBAAL,CAAsBhO,IAAtB,CAAP;AACD;AACF,OAJD,MAIO,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AACjC,YAAImK,IAAI,CAACnK,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAO,KAAK0Y,kBAAL,CAAwB3Q,IAAxB,CAAP;AACD,SAFD,MAEO,IAAIoC,IAAI,CAACnK,IAAL,KAAc,MAAlB,EAA0B;AAC/B,iBAAO,KAAK0X,kBAAL,CAAwB3P,IAAxB,CAAP;AACD,SAFM,MAEA,IAAIoC,IAAI,CAACnK,IAAL,KAAc,QAAlB,EAA4B;AACjC,iBAAO,KAAK2X,mBAAL,CAAyB5P,IAAzB,EAA+B,KAA/B,CAAP;AACD;AACF;AACF;;AAED,WAAO,MAAMyV,wBAAN,CAA+BzV,IAA/B,EAAqCoC,IAArC,CAAP;AACD;;AAEDsT,EAAAA,4BAA4B,GAAG;AAC7B,WAAO,KAAKnH,YAAL,CAAkB,MAAlB,KAA6B,KAAKA,YAAL,CAAkB,WAAlB,CAA7B,IAA+D,KAAKA,YAAL,CAAkB,QAAlB,CAA/D,IAA8F,KAAKjD,gBAAL,MAA2B,KAAKiD,YAAL,CAAkB,MAAlB,CAAzH,IAAsJ,MAAMmH,4BAAN,EAA7J;AACD;;AAEDC,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK5I,KAAL,CAAWzU,KAAK,CAACL,IAAjB,MAA2B,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,MAArB,IAA+B,KAAK4N,KAAL,CAAW5N,KAAX,KAAqB,WAApD,IAAmE,KAAK4N,KAAL,CAAW5N,KAAX,KAAqB,QAAxF,IAAoG,KAAKuU,gBAAL,MAA2B,KAAK3G,KAAL,CAAW5N,KAAX,KAAqB,MAA/K,CAAJ,EAA4L;AAC1L,aAAO,KAAP;AACD;;AAED,WAAO,MAAM4e,wBAAN,EAAP;AACD;;AAEDC,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKtK,gBAAL,MAA2B,KAAKiD,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AACxD,YAAMvO,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA,aAAO,KAAKyL,wBAAL,CAA8BxV,IAA9B,CAAP;AACD;;AAED,WAAO,MAAM4V,4BAAN,EAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACzT,IAAD,EAAO0T,IAAP,EAAalR,QAAb,EAAuBC,QAAvB,EAAiCkR,gBAAjC,EAAmD;AACjE,QAAI,CAAC,KAAKhJ,KAAL,CAAWzU,KAAK,CAACmB,QAAjB,CAAL,EAAiC,OAAO2I,IAAP;;AAEjC,QAAI2T,gBAAJ,EAAsB;AACpB,YAAMC,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAMJ,gBAAN,CAAuBzT,IAAvB,EAA6B0T,IAA7B,EAAmClR,QAAnC,EAA6CC,QAA7C,CAApB,CAAf;;AAEA,UAAI,CAACmR,MAAM,CAAChW,IAAZ,EAAkB;AAChB+V,QAAAA,gBAAgB,CAAC5U,KAAjB,GAAyB6U,MAAM,CAACE,KAAP,CAAazM,GAAb,IAAoB,KAAK9E,KAAL,CAAWxD,KAAxD;AACA,eAAOiB,IAAP;AACD;;AAED,UAAI4T,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClB,aAAOH,MAAM,CAAChW,IAAd;AACD;;AAED,SAAKkM,MAAL,CAAY5T,KAAK,CAACmB,QAAlB;AACA,UAAMkL,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAd;AACA,UAAMC,iBAAiB,GAAG,KAAK1R,KAAL,CAAW2R,SAArC;AACA,UAAMtW,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;;AAlBiE,gCAsB7D,KAAK0R,6BAAL,EAtB6D;AAAA,QAoB/DC,UApB+D,yBAoB/DA,UApB+D;AAAA,QAqB/DC,MArB+D,yBAqB/DA,MArB+D;;AAAA,gCAuB1C,KAAKC,uBAAL,CAA6BF,UAA7B,CAvB0C;AAAA;AAAA,QAuB5DG,KAvB4D;AAAA,QAuBrDC,OAvBqD;;AAyBjE,QAAIH,MAAM,IAAIG,OAAO,CAAC3U,MAAR,GAAiB,CAA/B,EAAkC;AAChC,YAAMqU,SAAS,GAAG,CAAC,GAAGD,iBAAJ,CAAlB;;AAEA,UAAIO,OAAO,CAAC3U,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAK0C,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAW2R,SAAX,GAAuBA,SAAvB;;AAEA,aAAK,IAAI5M,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkN,OAAO,CAAC3U,MAA5B,EAAoCyH,CAAC,EAArC,EAAyC;AACvC4M,UAAAA,SAAS,CAAC9R,IAAV,CAAeoS,OAAO,CAAClN,CAAD,CAAP,CAAWvI,KAA1B;AACD;;AANqB,qCAWlB,KAAKoV,6BAAL,EAXkB;;AASpBC,QAAAA,UAToB,0BASpBA,UAToB;AAUpBC,QAAAA,MAVoB,0BAUpBA,MAVoB;;AAAA,qCAYH,KAAKC,uBAAL,CAA6BF,UAA7B,CAZG;;AAAA;;AAYrBG,QAAAA,KAZqB;AAYdC,QAAAA,OAZc;AAavB;;AAED,UAAIH,MAAM,IAAIE,KAAK,CAAC1U,MAAN,GAAe,CAA7B,EAAgC;AAC9B,aAAKC,KAAL,CAAWyC,KAAK,CAACxD,KAAjB,EAAwB,gFAAxB;AACD;;AAED,UAAIsV,MAAM,IAAIE,KAAK,CAAC1U,MAAN,KAAiB,CAA/B,EAAkC;AAChC,aAAK0C,KAAL,GAAaA,KAAb;AACA,aAAKA,KAAL,CAAW2R,SAAX,GAAuBA,SAAS,CAACrS,MAAV,CAAiB0S,KAAK,CAAC,CAAD,CAAL,CAASxV,KAA1B,CAAvB;;AAFgC,qCAM5B,KAAKoV,6BAAL,EAN4B;;AAI9BC,QAAAA,UAJ8B,0BAI9BA,UAJ8B;AAK9BC,QAAAA,MAL8B,0BAK9BA,MAL8B;AAOjC;AACF;;AAED,SAAKC,uBAAL,CAA6BF,UAA7B,EAAyC,IAAzC;AACA,SAAK7R,KAAL,CAAW2R,SAAX,GAAuBD,iBAAvB;AACA,SAAKnK,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACA0G,IAAAA,IAAI,CAAC+H,IAAL,GAAY3F,IAAZ;AACApC,IAAAA,IAAI,CAACwW,UAAL,GAAkBA,UAAlB;AACAxW,IAAAA,IAAI,CAAC6W,SAAL,GAAiB,KAAKxB,gCAAL,CAAsCrV,IAAtC,EAA4C,MAAM,KAAK8W,gBAAL,CAAsBhB,IAAtB,EAA4B3K,SAA5B,EAAuCA,SAAvC,EAAkDA,SAAlD,CAAlD,CAAjB;AACA,WAAO,KAAK9F,UAAL,CAAgBrF,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAEDuW,EAAAA,6BAA6B,GAAG;AAC9B,SAAK5R,KAAL,CAAWoS,yBAAX,CAAqCvS,IAArC,CAA0C,KAAKG,KAAL,CAAWxD,KAArD;AACA,UAAMqV,UAAU,GAAG,KAAKM,gBAAL,EAAnB;AACA,UAAML,MAAM,GAAG,CAAC,KAAK1J,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAhB;AACA,SAAKqL,KAAL,CAAWoS,yBAAX,CAAqCzP,GAArC;AACA,WAAO;AACLkP,MAAAA,UADK;AAELC,MAAAA;AAFK,KAAP;AAID;;AAEDC,EAAAA,uBAAuB,CAAC1W,IAAD,EAAOgX,eAAP,EAAwB;AAC7C,UAAMC,KAAK,GAAG,CAACjX,IAAD,CAAd;AACA,UAAMkX,MAAM,GAAG,EAAf;;AAEA,WAAOD,KAAK,CAAChV,MAAN,KAAiB,CAAxB,EAA2B;AACzB,YAAMjC,IAAI,GAAGiX,KAAK,CAAC3P,GAAN,EAAb;;AAEA,UAAItH,IAAI,CAACC,IAAL,KAAc,yBAAlB,EAA6C;AAC3C,YAAID,IAAI,CAACuE,cAAL,IAAuB,CAACvE,IAAI,CAAC4N,UAAjC,EAA6C;AAC3C,eAAKuJ,qBAAL,CAA2BnX,IAA3B;AACD,SAFD,MAEO;AACLkX,UAAAA,MAAM,CAAC1S,IAAP,CAAYxE,IAAZ;AACD;;AAEDiX,QAAAA,KAAK,CAACzS,IAAN,CAAWxE,IAAI,CAACoD,IAAhB;AACD,OARD,MAQO,IAAIpD,IAAI,CAACC,IAAL,KAAc,uBAAlB,EAA2C;AAChDgX,QAAAA,KAAK,CAACzS,IAAN,CAAWxE,IAAI,CAACwW,UAAhB;AACAS,QAAAA,KAAK,CAACzS,IAAN,CAAWxE,IAAI,CAAC6W,SAAhB;AACD;AACF;;AAED,QAAIG,eAAJ,EAAqB;AACnBE,MAAAA,MAAM,CAACxU,OAAP,CAAe1C,IAAI,IAAI,KAAKmX,qBAAL,CAA2BnX,IAA3B,CAAvB;AACA,aAAO,CAACkX,MAAD,EAAS,EAAT,CAAP;AACD;;AAED,WAAOtM,SAAS,CAACsM,MAAD,EAASlX,IAAI,IAAIA,IAAI,CAACgC,MAAL,CAAYoV,KAAZ,CAAkBrC,KAAK,IAAI,KAAKsC,YAAL,CAAkBtC,KAAlB,EAAyB,IAAzB,CAA3B,CAAjB,CAAhB;AACD;;AAEDoC,EAAAA,qBAAqB,CAACnX,IAAD,EAAO;AAC1B,QAAIsX,WAAJ;;AAEA,SAAKC,gBAAL,CAAsBvX,IAAI,CAACgC,MAA3B,EAAmC,IAAnC,EAAyC,2BAAzC,EAAsE,CAACsV,WAAW,GAAGtX,IAAI,CAACuB,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8C+V,WAAW,CAACE,aAAhI;AACA,SAAK9P,KAAL,CAAWqH,KAAX,CAAiBzQ,aAAa,CAAC,KAAD,EAAQ,KAAR,CAAb,GAA8BP,WAA/C;AACA,UAAM0Z,WAAN,CAAkBzX,IAAlB,EAAwB,KAAxB,EAA+B,IAA/B;AACA,SAAK0H,KAAL,CAAWwH,IAAX;AACD;;AAEDmG,EAAAA,gCAAgC,CAACrV,IAAD,EAAO0X,KAAP,EAAc;AAC5C,QAAI1B,MAAJ;;AAEA,QAAI,KAAKrR,KAAL,CAAWoS,yBAAX,CAAqCY,OAArC,CAA6C3X,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnE,WAAKwD,KAAL,CAAWoS,yBAAX,CAAqCvS,IAArC,CAA0C,KAAKG,KAAL,CAAWxD,KAArD;AACA6U,MAAAA,MAAM,GAAG0B,KAAK,EAAd;AACA,WAAK/S,KAAL,CAAWoS,yBAAX,CAAqCzP,GAArC;AACD,KAJD,MAIO;AACL0O,MAAAA,MAAM,GAAG0B,KAAK,EAAd;AACD;;AAED,WAAO1B,MAAP;AACD;;AAED4B,EAAAA,cAAc,CAAC5X,IAAD,EAAO4E,QAAP,EAAiBC,QAAjB,EAA2B;AACvC7E,IAAAA,IAAI,GAAG,MAAM4X,cAAN,CAAqB5X,IAArB,EAA2B4E,QAA3B,EAAqCC,QAArC,CAAP;;AAEA,QAAI,KAAK8H,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BuG,MAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,WAAK3E,gBAAL,CAAsB9N,IAAtB;AACD;;AAED,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAMue,YAAY,GAAG,KAAK3W,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAArB;AACAgT,MAAAA,YAAY,CAACxW,UAAb,GAA0BrB,IAA1B;AACA6X,MAAAA,YAAY,CAAChK,cAAb,GAA8B,KAAK6B,uBAAL,EAA9B;AACA,aAAO,KAAKrK,UAAL,CAAgBwS,YAAhB,EAA8B,oBAA9B,CAAP;AACD;;AAED,WAAO7X,IAAP;AACD;;AAED8X,EAAAA,uBAAuB,CAAC9X,IAAD,EAAO;AAC5B,QAAIA,IAAI,CAACC,IAAL,KAAc,mBAAd,KAAsCD,IAAI,CAACsK,UAAL,KAAoB,MAApB,IAA8BtK,IAAI,CAACsK,UAAL,KAAoB,QAAxF,KAAqGtK,IAAI,CAACC,IAAL,KAAc,wBAAd,IAA0CD,IAAI,CAACyP,UAAL,KAAoB,MAAnK,IAA6KzP,IAAI,CAACC,IAAL,KAAc,sBAAd,IAAwCD,IAAI,CAACyP,UAAL,KAAoB,MAA7O,EAAqP;AACnP;AACD;;AAED,UAAMqI,uBAAN,CAA8B9X,IAA9B;AACD;;AAEDwP,EAAAA,WAAW,CAACxP,IAAD,EAAO;AAChB,UAAM+X,IAAI,GAAG,MAAMvI,WAAN,CAAkBxP,IAAlB,CAAb;;AAEA,QAAI+X,IAAI,CAAC9X,IAAL,KAAc,wBAAd,IAA0C8X,IAAI,CAAC9X,IAAL,KAAc,sBAA5D,EAAoF;AAClF8X,MAAAA,IAAI,CAACtI,UAAL,GAAkBsI,IAAI,CAACtI,UAAL,IAAmB,OAArC;AACD;;AAED,WAAOsI,IAAP;AACD;;AAEDC,EAAAA,sBAAsB,CAAChY,IAAD,EAAO;AAC3B,QAAI,KAAKuO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7BvO,MAAAA,IAAI,CAACyP,UAAL,GAAkB,MAAlB;AACA,YAAMwI,eAAe,GAAG,KAAK7S,SAAL,EAAxB;AACA,WAAK2E,IAAL;;AAEA,UAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5BkH,QAAAA,IAAI,CAACkY,UAAL,GAAkB,KAAKC,qBAAL,EAAlB;AACA,aAAKC,eAAL,CAAqBpY,IAArB;AACA,eAAO,IAAP;AACD,OAJD,MAIO;AACL,eAAO,KAAK2P,kBAAL,CAAwBsI,eAAxB,CAAP;AACD;AACF,KAZD,MAYO,IAAI,KAAK1J,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AACtCvO,MAAAA,IAAI,CAACyP,UAAL,GAAkB,MAAlB;AACA,YAAMwI,eAAe,GAAG,KAAK7S,SAAL,EAAxB;AACA,WAAK2E,IAAL;AACA,aAAO,KAAK6F,mBAAL,CAAyBqI,eAAzB,EAA0C,KAA1C,CAAP;AACD,KALM,MAKA,IAAI,KAAK1J,YAAL,CAAkB,WAAlB,CAAJ,EAAoC;AACzCvO,MAAAA,IAAI,CAACyP,UAAL,GAAkB,MAAlB;AACA,YAAMwI,eAAe,GAAG,KAAK7S,SAAL,EAAxB;AACA,WAAK2E,IAAL;AACA,aAAO,KAAK4G,kBAAL,CAAwBsH,eAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAK3M,gBAAL,MAA2B,KAAKiD,YAAL,CAAkB,MAAlB,CAA/B,EAA0D;AAC/DvO,MAAAA,IAAI,CAACyP,UAAL,GAAkB,OAAlB;AACA,YAAMwI,eAAe,GAAG,KAAK7S,SAAL,EAAxB;AACA,WAAK2E,IAAL;AACA,aAAO,KAAKyL,wBAAL,CAA8ByC,eAA9B,CAAP;AACD,KALM,MAKA;AACL,aAAO,MAAMD,sBAAN,CAA6BhY,IAA7B,CAAP;AACD;AACF;;AAEDqY,EAAAA,aAAa,CAACrY,IAAD,EAAO;AAClB,QAAI,MAAMqY,aAAN,CAAoB,GAAGC,SAAvB,CAAJ,EAAuC,OAAO,IAAP;;AAEvC,QAAI,KAAK/J,YAAL,CAAkB,MAAlB,KAA6B,KAAKgE,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAAC8C,IAAjE,EAAuE;AACrE4E,MAAAA,IAAI,CAACyP,UAAL,GAAkB,MAAlB;AACA,WAAK1F,IAAL;AACA,WAAKA,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDwO,EAAAA,kCAAkC,CAACvY,IAAD,EAAO;AACvC,UAAMyJ,GAAG,GAAG,KAAK9E,KAAL,CAAWxD,KAAvB;AACA,UAAMqX,YAAY,GAAG,MAAMD,kCAAN,CAAyCvY,IAAzC,CAArB;;AAEA,QAAIwY,YAAY,IAAIxY,IAAI,CAACyP,UAAL,KAAoB,MAAxC,EAAgD;AAC9C,WAAKb,UAAL,CAAgBnF,GAAhB;AACD;;AAED,WAAO+O,YAAP;AACD;;AAEDC,EAAAA,YAAY,CAACzY,IAAD,EAAO0Y,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,UAAMF,YAAN,CAAmBzY,IAAnB,EAAyB0Y,WAAzB,EAAsCC,UAAtC;;AAEA,QAAI,KAAKpL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD;AACF;;AAEDoL,EAAAA,gBAAgB,CAAC1S,IAAD,EAAO;AACrB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIvD,IAAI,KAAK,GAAT,IAAgB6D,IAAI,KAAK,GAA7B,EAAkC;AAChC,aAAO,KAAK+O,QAAL,CAAcxgB,KAAK,CAACS,SAApB,EAA+B,CAA/B,CAAP;AACD,KAFD,MAEO,IAAI,KAAK4L,KAAL,CAAWsH,MAAX,KAAsB/F,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AAC5D,aAAO,KAAK4S,QAAL,CAAcxgB,KAAK,CAAC0C,UAApB,EAAgC,CAAhC,CAAP;AACD,KAFM,MAEA,IAAI6O,eAAe,CAAC3D,IAAD,EAAO6D,IAAP,CAAnB,EAAiC;AACtC,WAAKpF,KAAL,CAAWiD,UAAX,GAAwB,IAAxB;AACA,aAAO,MAAMmR,QAAN,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAMH,gBAAN,CAAuB1S,IAAvB,CAAP;AACD;AACF;;AAEDmR,EAAAA,YAAY,CAACrX,IAAD,EAAO2F,SAAP,EAAkB;AAC5B,YAAQ3F,IAAI,CAACC,IAAb;AACE,WAAK,YAAL;AACA,WAAK,eAAL;AACA,WAAK,cAAL;AACA,WAAK,mBAAL;AACE,eAAO,IAAP;;AAEF,WAAK,kBAAL;AACE;AACE,gBAAM+Y,IAAI,GAAGhZ,IAAI,CAACyC,UAAL,CAAgBR,MAAhB,GAAyB,CAAtC;AACA,iBAAOjC,IAAI,CAACyC,UAAL,CAAgB2U,KAAhB,CAAsB,CAACtV,IAAD,EAAO4H,CAAP,KAAa;AACxC,mBAAO5H,IAAI,CAAC7B,IAAL,KAAc,cAAd,KAAiCyJ,CAAC,KAAKsP,IAAN,IAAclX,IAAI,CAAC7B,IAAL,KAAc,eAA7D,KAAiF,KAAKoX,YAAL,CAAkBvV,IAAlB,CAAxF;AACD,WAFM,CAAP;AAGD;;AAEH,WAAK,gBAAL;AACE,eAAO,KAAKuV,YAAL,CAAkBrX,IAAI,CAACjJ,KAAvB,CAAP;;AAEF,WAAK,eAAL;AACE,eAAO,KAAKsgB,YAAL,CAAkBrX,IAAI,CAAC2T,QAAvB,CAAP;;AAEF,WAAK,iBAAL;AACE,eAAO3T,IAAI,CAACiZ,QAAL,CAAc7B,KAAd,CAAoB8B,OAAO,IAAI,KAAK7B,YAAL,CAAkB6B,OAAlB,CAA/B,CAAP;;AAEF,WAAK,sBAAL;AACE,eAAOlZ,IAAI,CAACmZ,QAAL,KAAkB,GAAzB;;AAEF,WAAK,yBAAL;AACA,WAAK,oBAAL;AACE,eAAO,KAAK9B,YAAL,CAAkBrX,IAAI,CAACqB,UAAvB,CAAP;;AAEF,WAAK,kBAAL;AACA,WAAK,0BAAL;AACE,eAAO,CAACsE,SAAR;;AAEF;AACE,eAAO,KAAP;AApCJ;AAsCD;;AAEDD,EAAAA,YAAY,CAAC1F,IAAD,EAAO2F,SAAP,EAAkBpD,kBAAlB,EAAsC;AAChD,QAAIvC,IAAI,CAACC,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMyF,YAAN,CAAmB,KAAKyP,mBAAL,CAAyBnV,IAAzB,CAAnB,EAAmD2F,SAAnD,EAA8DpD,kBAA9D,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMmD,YAAN,CAAmB1F,IAAnB,EAAyB2F,SAAzB,EAAoCpD,kBAApC,CAAP;AACD;AACF;;AAEDgV,EAAAA,gBAAgB,CAAC6B,QAAD,EAAWzT,SAAX,EAAsBpD,kBAAtB,EAA0C8W,gBAA1C,EAA4D;AAC1E,SAAK,IAAI3P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,QAAQ,CAACnX,MAA7B,EAAqCyH,CAAC,EAAtC,EAA0C;AACxC,YAAMtH,IAAI,GAAGgX,QAAQ,CAAC1P,CAAD,CAArB;;AAEA,UAAItH,IAAI,IAAIA,IAAI,CAACnC,IAAL,KAAc,oBAA1B,EAAgD;AAC9CmZ,QAAAA,QAAQ,CAAC1P,CAAD,CAAR,GAAc,KAAKyL,mBAAL,CAAyB/S,IAAzB,CAAd;AACD;AACF;;AAED,WAAO,MAAMmV,gBAAN,CAAuB6B,QAAvB,EAAiCzT,SAAjC,EAA4CpD,kBAA5C,EAAgE8W,gBAAhE,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,SAAK,IAAI7P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,QAAQ,CAACnX,MAA7B,EAAqCyH,CAAC,EAAtC,EAA0C;AACxC,YAAMtH,IAAI,GAAGgX,QAAQ,CAAC1P,CAAD,CAArB;;AAEA,UAAItH,IAAI,IAAIA,IAAI,CAACnC,IAAL,KAAc,oBAAtB,KAA+C,CAACmC,IAAI,CAACb,KAAN,IAAe,CAACa,IAAI,CAACb,KAAL,CAAWiC,aAA1E,MAA6F4V,QAAQ,CAACnX,MAAT,GAAkB,CAAlB,IAAuB,CAACsX,mBAArH,CAAJ,EAA+I;AAC7I,aAAKrX,KAAL,CAAWE,IAAI,CAACyL,cAAL,CAAoB1M,KAA/B,EAAsC,qEAAtC;AACD;AACF;;AAED,WAAOiY,QAAP;AACD;;AAEDjX,EAAAA,SAAS,CAACC,IAAD,EAAOC,WAAW,GAAG1C,SAArB,EAAgC2C,YAAhC,EAA8CC,kBAA9C,EAAkE;AACzE,QAAIH,IAAI,CAACnC,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAO,MAAMkC,SAAN,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,kBAAjD,CAAP;AACD;AACF;;AAEDiX,EAAAA,kBAAkB,CAACxZ,IAAD,EAAO;AACvB,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B0G,MAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK6B,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM8J,kBAAN,CAAyBxZ,IAAzB,CAAP;AACD;;AAEDyZ,EAAAA,yBAAyB,CAACzZ,IAAD,EAAO;AAC9B,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B0G,MAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK6B,uBAAL,EAAtB;AACD;;AAED,WAAO,MAAM+J,yBAAN,CAAgCzZ,IAAhC,CAAP;AACD;;AAED0Z,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKnM,YAAL,CAAkB,GAAlB,KAA0B,MAAMmM,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK5M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,MAAMqgB,eAAN,EAAlC;AACD;;AAEDC,EAAAA,sBAAsB,CAACzZ,MAAD,EAAS;AAC7B,WAAO,CAAC,KAAK4M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAD,IAA4B,MAAMsgB,sBAAN,CAA6BzZ,MAA7B,CAAnC;AACD;;AAED+D,EAAAA,eAAe,CAACC,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C6F,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,QAAIlE,MAAM,CAACmR,QAAX,EAAqB;AACnB,WAAK1C,UAAL,CAAgBzO,MAAM,CAACmR,QAAP,CAAgBnQ,KAAhC;AACD;;AAED,WAAOhB,MAAM,CAACmR,QAAd;;AAEA,QAAI,KAAK/D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BpN,MAAAA,MAAM,CAACoE,cAAP,GAAwB,KAAKiJ,iCAAL,EAAxB;AACD;;AAED,UAAMtJ,eAAN,CAAsBC,SAAtB,EAAiChE,MAAjC,EAAyC3B,WAAzC,EAAsDD,OAAtD,EAA+D6F,aAA/D,EAA8EC,iBAA9E;AACD;;AAEDwV,EAAAA,sBAAsB,CAAC1V,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C;AAC9D,QAAI4B,MAAM,CAACmR,QAAX,EAAqB;AACnB,WAAK1C,UAAL,CAAgBzO,MAAM,CAACmR,QAAP,CAAgBnQ,KAAhC;AACD;;AAED,WAAOhB,MAAM,CAACmR,QAAd;;AAEA,QAAI,KAAK/D,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BpN,MAAAA,MAAM,CAACoE,cAAP,GAAwB,KAAKiJ,iCAAL,EAAxB;AACD;;AAED,UAAMqM,sBAAN,CAA6B1V,SAA7B,EAAwChE,MAAxC,EAAgD3B,WAAhD,EAA6DD,OAA7D;AACD;;AAEDub,EAAAA,eAAe,CAAC9Z,IAAD,EAAO;AACpB,UAAM8Z,eAAN,CAAsB9Z,IAAtB;;AAEA,QAAIA,IAAI,CAACK,UAAL,IAAmB,KAAKkN,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CvN,MAAAA,IAAI,CAAC+Z,mBAAL,GAA2B,KAAKrJ,mCAAL,EAA3B;AACD;;AAED,QAAI,KAAKnC,YAAL,CAAkB,YAAlB,CAAJ,EAAqC;AACnC,WAAKxE,IAAL;AACA,YAAMiQ,WAAW,GAAGha,IAAI,CAACgQ,UAAL,GAAkB,EAAtC;;AAEA,SAAG;AACD,cAAMhQ,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,QAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK2C,6BAAL,CAAmC,IAAnC,CAAV;;AAEA,YAAI,KAAKvC,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,UAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKmM,mCAAL,EAAtB;AACD,SAFD,MAEO;AACL1Q,UAAAA,IAAI,CAACuE,cAAL,GAAsB,IAAtB;AACD;;AAEDyV,QAAAA,WAAW,CAACxV,IAAZ,CAAiB,KAAKa,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAjB;AACD,OAXD,QAWS,KAAK2M,GAAL,CAASrU,KAAK,CAACc,KAAf,CAXT;AAYD;AACF;;AAED6gB,EAAAA,iBAAiB,CAACja,IAAD,EAAO;AACtB,UAAMsR,QAAQ,GAAG,KAAKC,iBAAL,EAAjB;AACA,UAAMxO,GAAG,GAAG,MAAMkX,iBAAN,CAAwBja,IAAxB,CAAZ;AACAA,IAAAA,IAAI,CAACsR,QAAL,GAAgBA,QAAhB;AACA,WAAOvO,GAAP;AACD;;AAEDmX,EAAAA,iBAAiB,CAACpY,IAAD,EAAO8C,QAAP,EAAiBC,QAAjB,EAA2BrG,WAA3B,EAAwCD,OAAxC,EAAiDgH,SAAjD,EAA4Db,sBAA5D,EAAoFc,WAApF,EAAiG;AAChH,QAAI1D,IAAI,CAACwP,QAAT,EAAmB;AACjB,WAAK1C,UAAL,CAAgB9M,IAAI,CAACwP,QAAL,CAAcnQ,KAA9B;AACD;;AAED,WAAOW,IAAI,CAACwP,QAAZ;AACA,QAAI/M,cAAJ;;AAEA,QAAI,KAAKgJ,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BhJ,MAAAA,cAAc,GAAG,KAAKiJ,iCAAL,EAAjB;AACA,UAAI,CAAC,KAAKT,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAL,EAA+B,KAAK0V,UAAL;AAChC;;AAED,UAAMsL,iBAAN,CAAwBpY,IAAxB,EAA8B8C,QAA9B,EAAwCC,QAAxC,EAAkDrG,WAAlD,EAA+DD,OAA/D,EAAwEgH,SAAxE,EAAmFb,sBAAnF,EAA2Gc,WAA3G;;AAEA,QAAIjB,cAAJ,EAAoB;AAClB,OAACzC,IAAI,CAAC/K,KAAL,IAAc+K,IAAf,EAAqByC,cAArB,GAAsCA,cAAtC;AACD;AACF;;AAED4V,EAAAA,4BAA4B,CAACpF,KAAD,EAAQ;AAClC,QAAI,KAAKpI,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5B,UAAIsb,KAAK,CAAC9U,IAAN,KAAe,YAAnB,EAAiC;AAC/B,aAAKiC,KAAL,CAAW6S,KAAK,CAAC5T,KAAjB,EAAwB,gFAAxB;AACD;;AAED4T,MAAAA,KAAK,CAACtC,QAAN,GAAiB,IAAjB;AACD;;AAED,QAAI,KAAK1F,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3Byb,MAAAA,KAAK,CAAClH,cAAN,GAAuB,KAAK6B,uBAAL,EAAvB;AACD;;AAED,SAAK5B,gBAAL,CAAsBiH,KAAtB;AACA,WAAOA,KAAP;AACD;;AAEDqF,EAAAA,iBAAiB,CAACxV,QAAD,EAAWC,QAAX,EAAqBwV,IAArB,EAA2B;AAC1C,UAAMra,IAAI,GAAG,MAAMoa,iBAAN,CAAwBxV,QAAxB,EAAkCC,QAAlC,EAA4CwV,IAA5C,CAAb;;AAEA,QAAIra,IAAI,CAACC,IAAL,KAAc,mBAAd,IAAqCD,IAAI,CAAC6N,cAA1C,IAA4D7N,IAAI,CAAC+Q,KAAL,CAAW5P,KAAX,GAAmBnB,IAAI,CAAC6N,cAAL,CAAoB1M,KAAvG,EAA8G;AAC5G,WAAKe,KAAL,CAAWlC,IAAI,CAAC6N,cAAL,CAAoB1M,KAA/B,EAAsC,4DAA4D,2DAAlG;AACD;;AAED,WAAOnB,IAAP;AACD;;AAEDsa,EAAAA,wBAAwB,CAACta,IAAD,EAAO;AAC7B,QAAI,CAACqK,iBAAiB,CAACrK,IAAD,CAAtB,EAA8B;AAC5B,aAAO,MAAMsa,wBAAN,CAA+Bta,IAA/B,CAAP;AACD;;AAED,WAAOuK,oBAAoB,CAAC,KAAK5F,KAAN,CAA3B;AACD;;AAED4V,EAAAA,yBAAyB,CAACva,IAAD,EAAOwa,SAAP,EAAkBva,IAAlB,EAAwBsC,kBAAxB,EAA4C;AACnEiY,IAAAA,SAAS,CAACC,KAAV,GAAkBpQ,iBAAiB,CAACrK,IAAD,CAAjB,GAA0B,KAAK8P,6BAAL,CAAmC,IAAnC,EAAyC,IAAzC,CAA1B,GAA2E,KAAK1C,eAAL,EAA7F;AACA,SAAKjL,SAAL,CAAeqY,SAAS,CAACC,KAAzB,EAAgCrb,YAAhC,EAA8C+L,SAA9C,EAAyD5I,kBAAzD;AACAvC,IAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,KAAKa,UAAL,CAAgBmV,SAAhB,EAA2Bva,IAA3B,CAArB;AACD;;AAEDya,EAAAA,gCAAgC,CAAC1a,IAAD,EAAO;AACrCA,IAAAA,IAAI,CAACsK,UAAL,GAAkB,OAAlB;AACA,QAAIpK,IAAI,GAAG,IAAX;;AAEA,QAAI,KAAK6M,KAAL,CAAWzU,KAAK,CAACiF,OAAjB,CAAJ,EAA+B;AAC7B2C,MAAAA,IAAI,GAAG,QAAP;AACD,KAFD,MAEO,IAAI,KAAKqO,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AACpCrO,MAAAA,IAAI,GAAG,MAAP;AACD;;AAED,QAAIA,IAAJ,EAAU;AACR,YAAMmU,EAAE,GAAG,KAAK9B,SAAL,EAAX;;AAEA,UAAIrS,IAAI,KAAK,MAAT,IAAmBmU,EAAE,CAACpU,IAAH,KAAY3H,KAAK,CAAC8C,IAAzC,EAA+C;AAC7C,aAAKwT,UAAL,CAAgByF,EAAE,CAAClT,KAAnB;AACD;;AAED,UAAIoJ,oBAAoB,CAAC8J,EAAD,CAApB,IAA4BA,EAAE,CAACpU,IAAH,KAAY3H,KAAK,CAACQ,MAA9C,IAAwDub,EAAE,CAACpU,IAAH,KAAY3H,KAAK,CAAC8C,IAA9E,EAAoF;AAClF,aAAK2O,IAAL;AACA/J,QAAAA,IAAI,CAACsK,UAAL,GAAkBpK,IAAlB;AACD;AACF;;AAED,WAAO,MAAMwa,gCAAN,CAAuC1a,IAAvC,CAAP;AACD;;AAED2a,EAAAA,oBAAoB,CAAC3a,IAAD,EAAO;AACzB,UAAMwa,SAAS,GAAG,KAAKpV,SAAL,EAAlB;AACA,UAAMwV,aAAa,GAAG,KAAKjW,KAAL,CAAWxD,KAAjC;AACA,UAAM0Z,UAAU,GAAG,KAAKzN,eAAL,CAAqB,IAArB,CAAnB;AACA,QAAI0N,iBAAiB,GAAG,IAAxB;;AAEA,QAAID,UAAU,CAAC5iB,IAAX,KAAoB,MAAxB,EAAgC;AAC9B6iB,MAAAA,iBAAiB,GAAG,MAApB;AACD,KAFD,MAEO,IAAID,UAAU,CAAC5iB,IAAX,KAAoB,QAAxB,EAAkC;AACvC6iB,MAAAA,iBAAiB,GAAG,QAApB;AACD;;AAED,QAAInV,SAAS,GAAG,KAAhB;;AAEA,QAAI,KAAK4I,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAKwM,qBAAL,CAA2B,IAA3B,CAAhC,EAAkE;AAChE,YAAMC,QAAQ,GAAG,KAAK5N,eAAL,CAAqB,IAArB,CAAjB;;AAEA,UAAI0N,iBAAiB,KAAK,IAAtB,IAA8B,CAAC,KAAK/N,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAA/B,IAAyD,CAAC,KAAK0M,KAAL,CAAW1E,IAAX,CAAgBvI,OAA9E,EAAuF;AACrF8iB,QAAAA,SAAS,CAACS,QAAV,GAAqBD,QAArB;AACAR,QAAAA,SAAS,CAAClQ,UAAV,GAAuBwQ,iBAAvB;AACAN,QAAAA,SAAS,CAACC,KAAV,GAAkBO,QAAQ,CAACE,OAAT,EAAlB;AACD,OAJD,MAIO;AACLV,QAAAA,SAAS,CAACS,QAAV,GAAqBJ,UAArB;AACAL,QAAAA,SAAS,CAAClQ,UAAV,GAAuB,IAAvB;AACAkQ,QAAAA,SAAS,CAACC,KAAV,GAAkB,KAAKrN,eAAL,EAAlB;AACD;AACF,KAZD,MAYO,IAAI0N,iBAAiB,KAAK,IAAtB,KAA+B,KAAK/N,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK0M,KAAL,CAAW1E,IAAX,CAAgBvI,OAAzE,CAAJ,EAAuF;AAC5F8iB,MAAAA,SAAS,CAACS,QAAV,GAAqB,KAAK7N,eAAL,CAAqB,IAArB,CAArB;AACAoN,MAAAA,SAAS,CAAClQ,UAAV,GAAuBwQ,iBAAvB;;AAEA,UAAI,KAAK3M,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5BqM,QAAAA,SAAS,CAACC,KAAV,GAAkB,KAAKrN,eAAL,EAAlB;AACD,OAFD,MAEO;AACLzH,QAAAA,SAAS,GAAG,IAAZ;AACA6U,QAAAA,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;AACD;AACF,KAVM,MAUA;AACLvV,MAAAA,SAAS,GAAG,IAAZ;AACA6U,MAAAA,SAAS,CAACS,QAAV,GAAqBJ,UAArB;AACAL,MAAAA,SAAS,CAAClQ,UAAV,GAAuB,IAAvB;AACAkQ,MAAAA,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;AACD;;AAED,UAAMC,gBAAgB,GAAG9Q,iBAAiB,CAACrK,IAAD,CAA1C;AACA,UAAMob,qBAAqB,GAAG/Q,iBAAiB,CAACmQ,SAAD,CAA/C;;AAEA,QAAIW,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKlZ,KAAL,CAAW0Y,aAAX,EAA0B,mFAAmF,yFAA7G;AACD;;AAED,QAAIO,gBAAgB,IAAIC,qBAAxB,EAA+C;AAC7C,WAAKvK,iBAAL,CAAuB2J,SAAS,CAACC,KAAV,CAAgBxiB,IAAvC,EAA6CuiB,SAAS,CAACC,KAAV,CAAgBtZ,KAA7D,EAAoE,IAApE;AACD;;AAED,QAAIwE,SAAS,IAAI,CAACwV,gBAAd,IAAkC,CAACC,qBAAvC,EAA8D;AAC5D,WAAKC,iBAAL,CAAuBb,SAAS,CAACC,KAAV,CAAgBxiB,IAAvC,EAA6CuiB,SAAS,CAACrZ,KAAvD,EAA8D,IAA9D,EAAoE,IAApE;AACD;;AAED,SAAKgB,SAAL,CAAeqY,SAAS,CAACC,KAAzB,EAAgCrb,YAAhC,EAA8C+L,SAA9C,EAAyD,kBAAzD;AACAnL,IAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,KAAKa,UAAL,CAAgBmV,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAEDc,EAAAA,mBAAmB,CAACtb,IAAD,EAAOub,cAAP,EAAuB;AACxC,UAAMrb,IAAI,GAAGF,IAAI,CAACE,IAAlB;;AAEA,QAAIA,IAAI,KAAK,KAAT,IAAkBA,IAAI,KAAK,KAA3B,IAAoC,KAAKqN,YAAL,CAAkB,GAAlB,CAAxC,EAAgE;AAC9DvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKiJ,iCAAL,EAAtB;AACD;;AAED,UAAM8N,mBAAN,CAA0Btb,IAA1B,EAAgCub,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAACzD,IAAD,EAAO7X,IAAP,EAAa;AACrB,UAAMsb,UAAN,CAAiBzD,IAAjB,EAAuB7X,IAAvB;;AAEA,QAAI,KAAK6M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3Bye,MAAAA,IAAI,CAAC5K,EAAL,CAAQU,cAAR,GAAyB,KAAK6B,uBAAL,EAAzB;AACA,WAAK5B,gBAAL,CAAsBiK,IAAI,CAAC5K,EAA3B;AACD;AACF;;AAEDsO,EAAAA,iCAAiC,CAACzb,IAAD,EAAO0b,IAAP,EAAa;AAC5C,QAAI,KAAK3O,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAMwY,qBAAqB,GAAG,KAAKnN,KAAL,CAAWoN,kBAAzC;AACA,WAAKpN,KAAL,CAAWoN,kBAAX,GAAgC,IAAhC;AACA/R,MAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAK8B,uBAAL,EAAlB;AACA,WAAK/K,KAAL,CAAWoN,kBAAX,GAAgCD,qBAAhC;AACD;;AAED,WAAO,MAAM2J,iCAAN,CAAwCzb,IAAxC,EAA8C0b,IAA9C,CAAP;AACD;;AAEDC,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAK5O,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,MAAMqiB,qBAAN,EAAlC;AACD;;AAED7E,EAAAA,gBAAgB,CAAChB,IAAD,EAAOpR,sBAAP,EAA+BkX,cAA/B,EAA+C7F,gBAA/C,EAAiE;AAC/E,QAAIpR,KAAK,GAAG,IAAZ;AACA,QAAIkX,GAAJ;;AAEA,QAAI,KAAKC,SAAL,CAAe,KAAf,MAA0B,KAAK/O,KAAL,CAAWzU,KAAK,CAACoZ,WAAjB,KAAiC,KAAKnE,YAAL,CAAkB,GAAlB,CAA3D,CAAJ,EAAwF;AACtF5I,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAR;AACAyF,MAAAA,GAAG,GAAG,KAAK5F,QAAL,CAAc,MAAM,MAAMa,gBAAN,CAAuBhB,IAAvB,EAA6BpR,sBAA7B,EAAqDkX,cAArD,EAAqE7F,gBAArE,CAApB,EAA4GpR,KAA5G,CAAN;AACA,UAAI,CAACkX,GAAG,CAAC3F,KAAT,EAAgB,OAAO2F,GAAG,CAAC7b,IAAX;AAHsE,YAKpFmH,OALoF,GAMlF,KAAKxC,KAN6E,CAKpFwC,OALoF;;AAQtF,UAAIA,OAAO,CAACA,OAAO,CAAClF,MAAR,GAAiB,CAAlB,CAAP,KAAgCwE,OAAO,CAACsV,MAA5C,EAAoD;AAClD5U,QAAAA,OAAO,CAAClF,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIkF,OAAO,CAACA,OAAO,CAAClF,MAAR,GAAiB,CAAlB,CAAP,KAAgCwE,OAAO,CAACuV,MAA5C,EAAoD;AACzD7U,QAAAA,OAAO,CAAClF,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI4Z,GAAG,IAAIA,GAAG,CAAC3F,KAAX,IAAoB,KAAK3I,YAAL,CAAkB,GAAlB,CAAxB,EAAgD;AAC9C5I,MAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWyR,KAAX,EAAjB;AACA,UAAI7R,cAAJ;AACA,YAAM5K,KAAK,GAAG,KAAKsc,QAAL,CAAc,MAAM;AAChC1R,QAAAA,cAAc,GAAG,KAAKiJ,iCAAL,EAAjB;AACA,cAAMyO,eAAe,GAAG,KAAK5G,gCAAL,CAAsC9Q,cAAtC,EAAsD,MAAM,MAAMuS,gBAAN,CAAuBhB,IAAvB,EAA6BpR,sBAA7B,EAAqDkX,cAArD,EAAqE7F,gBAArE,CAA5D,CAAxB;AACAkG,QAAAA,eAAe,CAAC1X,cAAhB,GAAiCA,cAAjC;AACA,aAAK2X,0BAAL,CAAgCD,eAAhC,EAAiD1X,cAAjD;AACA,eAAO0X,eAAP;AACD,OANa,EAMXtX,KANW,CAAd;AAOA,YAAMsX,eAAe,GAAGtiB,KAAK,CAACqG,IAAN,IAAcrG,KAAK,CAACqG,IAAN,CAAWC,IAAX,KAAoB,yBAAlC,GAA8DtG,KAAK,CAACqG,IAApE,GAA2E,IAAnG;AACA,UAAI,CAACrG,KAAK,CAACuc,KAAP,IAAgB+F,eAApB,EAAqC,OAAOA,eAAP;;AAErC,UAAIJ,GAAG,IAAIA,GAAG,CAAC7b,IAAf,EAAqB;AACnB,aAAK2E,KAAL,GAAakX,GAAG,CAAC1F,SAAjB;AACA,eAAO0F,GAAG,CAAC7b,IAAX;AACD;;AAED,UAAIic,eAAJ,EAAqB;AACnB,aAAKtX,KAAL,GAAahL,KAAK,CAACwc,SAAnB;AACA,eAAO8F,eAAP;AACD;;AAED,UAAIJ,GAAG,IAAIA,GAAG,CAACM,MAAf,EAAuB,MAAMN,GAAG,CAAC3F,KAAV;AACvB,UAAIvc,KAAK,CAACwiB,MAAV,EAAkB,MAAMxiB,KAAK,CAACuc,KAAZ;AAClB,YAAM,KAAKhU,KAAL,CAAWqC,cAAc,CAACpD,KAA1B,EAAiC,kEAAjC,CAAN;AACD;;AAED,WAAO,MAAM2V,gBAAN,CAAuBhB,IAAvB,EAA6BpR,sBAA7B,EAAqDkX,cAArD,EAAqE7F,gBAArE,CAAP;AACD;;AAEDqG,EAAAA,UAAU,CAACpc,IAAD,EAAO;AACf,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM0c,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjC,cAAMnE,qBAAqB,GAAG,KAAKnN,KAAL,CAAWoN,kBAAzC;AACA,aAAKpN,KAAL,CAAWoN,kBAAX,GAAgC,IAAhC;AACA,cAAM1E,QAAQ,GAAG,KAAKjI,SAAL,EAAjB;;AAHiC,qCAIW,KAAKyH,oCAAL,EAJX;;AAAA;;AAIhCQ,QAAAA,QAAQ,CAACQ,cAJuB;AAIP7N,QAAAA,IAAI,CAAC8M,SAJE;AAKjC,aAAKnI,KAAL,CAAWoN,kBAAX,GAAgCD,qBAAhC;AACA,YAAI,KAAK6C,kBAAL,EAAJ,EAA+B,KAAK/F,UAAL;AAC/B,YAAI,CAAC,KAAK7B,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,CAAL,EAA8B,KAAKiV,UAAL;AAC9B,eAAOvB,QAAP;AACD,OATc,CAAf;AAUA,UAAI2I,MAAM,CAACmG,MAAX,EAAmB,OAAO,IAAP;AACnB,UAAInG,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClBnW,MAAAA,IAAI,CAAC4N,UAAL,GAAkBoI,MAAM,CAAChW,IAAP,CAAY6N,cAAZ,GAA6B,KAAKxI,UAAL,CAAgB2Q,MAAM,CAAChW,IAAvB,EAA6B,gBAA7B,CAA7B,GAA8E,IAAhG;AACD;;AAED,WAAO,MAAMoc,UAAN,CAAiBpc,IAAjB,CAAP;AACD;;AAEDqc,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKtP,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,MAAM+iB,gBAAN,EAAlC;AACD;;AAEDC,EAAAA,0BAA0B,CAACtc,IAAD,EAAOgC,MAAP,EAAe;AACvC,QAAI,KAAK2C,KAAL,CAAWoS,yBAAX,CAAqCY,OAArC,CAA6C3X,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAAlE,EAAqE;AACnEnB,MAAAA,IAAI,CAACgC,MAAL,GAAcA,MAAd;AACD,KAFD,MAEO;AACL,YAAMsa,0BAAN,CAAiCtc,IAAjC,EAAuCgC,MAAvC;AACD;AACF;;AAEDyV,EAAAA,WAAW,CAACzX,IAAD,EAAOuc,eAAP,EAAwBC,eAAxB,EAAyC;AAClD,QAAIA,eAAe,IAAI,KAAK7X,KAAL,CAAWoS,yBAAX,CAAqCY,OAArC,CAA6C3X,IAAI,CAACmB,KAAlD,MAA6D,CAAC,CAArF,EAAwF;AACtF;AACD;;AAED,WAAO,MAAMsW,WAAN,CAAkB,GAAGa,SAArB,CAAP;AACD;;AAEDmE,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,WAAO,MAAMD,kCAAN,CAAyCC,UAAU,IAAI,KAAK/X,KAAL,CAAW2R,SAAX,CAAqBqB,OAArB,CAA6B,KAAKhT,KAAL,CAAWxD,KAAxC,MAAmD,CAAC,CAA3G,CAAP;AACD;;AAEDwb,EAAAA,eAAe,CAACC,IAAD,EAAOhY,QAAP,EAAiBC,QAAjB,EAA2BgY,OAA3B,EAAoC;AACjD,QAAID,IAAI,CAAC3c,IAAL,KAAc,YAAd,IAA8B2c,IAAI,CAAC3kB,IAAL,KAAc,OAA5C,IAAuD,KAAK0M,KAAL,CAAW2R,SAAX,CAAqBqB,OAArB,CAA6B/S,QAA7B,MAA2C,CAAC,CAAvG,EAA0G;AACxG,WAAKmF,IAAL;AACA,YAAM/J,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA5c,MAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACAyjB,MAAAA,IAAI,GAAG,KAAKvX,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD,KAND,MAMO,IAAI4c,IAAI,CAAC3c,IAAL,KAAc,YAAd,IAA8B2c,IAAI,CAAC3kB,IAAL,KAAc,OAA5C,IAAuD,KAAKsV,YAAL,CAAkB,GAAlB,CAA3D,EAAmF;AACxF,YAAM5I,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAd;AACA,YAAMzc,KAAK,GAAG,KAAKsc,QAAL,CAAc+G,KAAK,IAAI,KAAKC,iCAAL,CAAuCrY,QAAvC,EAAiDC,QAAjD,KAA8DmY,KAAK,EAA1F,EAA8FrY,KAA9F,CAAd;AACA,UAAI,CAAChL,KAAK,CAACuc,KAAP,IAAgB,CAACvc,KAAK,CAACujB,OAA3B,EAAoC,OAAOvjB,KAAK,CAACqG,IAAb;AACpC,YAAMgW,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAM0G,eAAN,CAAsBC,IAAtB,EAA4BhY,QAA5B,EAAsCC,QAAtC,EAAgDgY,OAAhD,CAApB,EAA8ElY,KAA9E,CAAf;AACA,UAAIqR,MAAM,CAAChW,IAAP,IAAe,CAACgW,MAAM,CAACE,KAA3B,EAAkC,OAAOF,MAAM,CAAChW,IAAd;;AAElC,UAAIrG,KAAK,CAACqG,IAAV,EAAgB;AACd,aAAK2E,KAAL,GAAahL,KAAK,CAACwc,SAAnB;AACA,eAAOxc,KAAK,CAACqG,IAAb;AACD;;AAED,UAAIgW,MAAM,CAAChW,IAAX,EAAiB;AACf,aAAK2E,KAAL,GAAaqR,MAAM,CAACG,SAApB;AACA,eAAOH,MAAM,CAAChW,IAAd;AACD;;AAED,YAAMrG,KAAK,CAACuc,KAAN,IAAeF,MAAM,CAACE,KAA5B;AACD;;AAED,WAAO,MAAMyG,eAAN,CAAsBC,IAAtB,EAA4BhY,QAA5B,EAAsCC,QAAtC,EAAgDgY,OAAhD,CAAP;AACD;;AAEDM,EAAAA,cAAc,CAACP,IAAD,EAAOhY,QAAP,EAAiBC,QAAjB,EAA2BgY,OAA3B,EAAoCO,cAApC,EAAoD;AAChE,QAAI,KAAKrQ,KAAL,CAAWzU,KAAK,CAACoB,WAAjB,KAAiC,KAAK2jB,qBAAL,CAA2B,GAA3B,CAArC,EAAsE;AACpE,WAAKC,YAAL,CAAkB,kBAAlB;AACAF,MAAAA,cAAc,CAACG,mBAAf,GAAqC,IAArC;;AAEA,UAAIV,OAAJ,EAAa;AACXO,QAAAA,cAAc,CAACI,IAAf,GAAsB,IAAtB;AACA,eAAOZ,IAAP;AACD;;AAED,WAAK7S,IAAL;AACA,YAAM/J,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA5c,MAAAA,IAAI,CAACyd,aAAL,GAAqB,KAAK/M,mCAAL,EAArB;AACA,WAAKxE,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA8G,MAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACA6G,MAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,aAAO,KAAKiL,oBAAL,CAA0B1d,IAA1B,EAAgC,IAAhC,CAAP;AACD,KAjBD,MAiBO,IAAI,CAAC6c,OAAD,IAAY,KAAKzR,gBAAL,EAAZ,IAAuC,KAAKmC,YAAL,CAAkB,GAAlB,CAA3C,EAAmE;AACxE,YAAMvN,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA,YAAM5G,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM;AACjCjW,QAAAA,IAAI,CAACyd,aAAL,GAAqB,KAAKzL,4CAAL,EAArB;AACA,aAAK9F,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA8G,QAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACA,YAAIikB,cAAc,CAACG,mBAAnB,EAAwCvd,IAAI,CAACyS,QAAL,GAAgB,KAAhB;AACxC,eAAO,KAAKiL,oBAAL,CAA0B1d,IAA1B,EAAgCod,cAAc,CAACG,mBAA/C,CAAP;AACD,OANc,CAAf;;AAQA,UAAIvH,MAAM,CAAChW,IAAX,EAAiB;AACf,YAAIgW,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClB,eAAOH,MAAM,CAAChW,IAAd;AACD;AACF;;AAED,WAAO,MAAMmd,cAAN,CAAqBP,IAArB,EAA2BhY,QAA3B,EAAqCC,QAArC,EAA+CgY,OAA/C,EAAwDO,cAAxD,CAAP;AACD;;AAEDO,EAAAA,iBAAiB,CAAC3d,IAAD,EAAO;AACtB,QAAI4d,KAAK,GAAG,IAAZ;;AAEA,QAAI,KAAKxS,gBAAL,MAA2B,KAAKmC,YAAL,CAAkB,GAAlB,CAA/B,EAAuD;AACrDqQ,MAAAA,KAAK,GAAG,KAAK3H,QAAL,CAAc,MAAM,KAAKjE,4CAAL,EAApB,EAAyEhS,IAAjF;AACD;;AAEDA,IAAAA,IAAI,CAACyd,aAAL,GAAqBG,KAArB;AACA,UAAMD,iBAAN,CAAwB3d,IAAxB;AACD;;AAEDid,EAAAA,iCAAiC,CAACrY,QAAD,EAAWC,QAAX,EAAqB;AACpD,UAAM7E,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA,SAAKyW,mBAAL,CAAyBtb,IAAzB;AACA,QAAI,CAAC,KAAKoc,UAAL,CAAgBpc,IAAhB,CAAL,EAA4B;AAC5B,WAAO,KAAK6d,oBAAL,CAA0B7d,IAA1B,EAAgCmL,SAAhC,EAA2C,IAA3C,CAAP;AACD;;AAED2S,EAAAA,qBAAqB,CAAC5X,IAAD,EAAO;AAC1B,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIvD,IAAI,KAAK,EAAT,IAAe6D,IAAI,KAAK,EAAxB,IAA8B,KAAKpF,KAAL,CAAWoZ,cAA7C,EAA6D;AAC3D,WAAKpZ,KAAL,CAAWoZ,cAAX,GAA4B,KAA5B;AACA,WAAKpZ,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,WAAKuU,SAAL;AACA;AACD;;AAED,UAAMF,qBAAN,CAA4B5X,IAA5B;AACD;;AAED+X,EAAAA,kBAAkB,CAAC/X,IAAD,EAAO;AACvB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIvD,IAAI,KAAK,GAAT,IAAgB6D,IAAI,KAAK,GAA7B,EAAkC;AAChC,WAAK+O,QAAL,CAAcxgB,KAAK,CAACW,SAApB,EAA+B,CAA/B;AACA;AACD;;AAED,UAAMglB,kBAAN,CAAyB/X,IAAzB;AACD;;AAEDgY,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3B,UAAMC,QAAQ,GAAG,MAAMH,aAAN,CAAoBC,IAApB,EAA0BC,OAA1B,CAAjB;;AAEA,QAAI,KAAKzZ,KAAL,CAAWoZ,cAAf,EAA+B;AAC7B,WAAK7b,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,2BAA3B;AACD;;AAED,WAAO4U,QAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKxC,SAAL,CAAe,cAAf,KAAkC,KAAKyC,eAAL,EAAtC,EAA8D;AAC5D,UAAI,KAAK5Z,KAAL,CAAWoZ,cAAf,EAA+B;AAC7B,aAAKnP,UAAL,CAAgB,IAAhB,EAAsB,wDAAtB;AACD;;AAED,WAAK4P,wBAAL;AACA,WAAK7Z,KAAL,CAAW8E,GAAX,IAAkB,KAAK8U,eAAL,EAAlB;AACA,WAAK5Z,KAAL,CAAWoZ,cAAX,GAA4B,IAA5B;AACA;AACD;;AAED,QAAI,KAAKpZ,KAAL,CAAWoZ,cAAf,EAA+B;AAC7B,YAAMtc,GAAG,GAAG,KAAKuG,KAAL,CAAW2P,OAAX,CAAmB,KAAnB,EAA0B,KAAKhT,KAAL,CAAW8E,GAAX,IAAkB,CAA5C,CAAZ;;AAEA,UAAIhI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,cAAM,KAAKS,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAX,GAAiB,CAA5B,EAA+B,sBAA/B,CAAN;AACD;;AAED,WAAK9E,KAAL,CAAW8E,GAAX,GAAiBhI,GAAG,GAAG,CAAvB;AACA;AACD;;AAED,UAAM6c,gBAAN;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAAA,UAEd9U,GAFc,GAGZ,KAAK9E,KAHO,CAEd8E,GAFc;AAIhB,QAAIgV,yBAAyB,GAAG,CAAhC;;AAEA,WAAO,CAAC,EAAD,EAAK,CAAL,EAAQC,QAAR,CAAiB,KAAK1W,KAAL,CAAW6Q,UAAX,CAAsBpP,GAAG,GAAGgV,yBAA5B,CAAjB,CAAP,EAAiF;AAC/EA,MAAAA,yBAAyB;AAC1B;;AAED,UAAME,GAAG,GAAG,KAAK3W,KAAL,CAAW6Q,UAAX,CAAsB4F,yBAAyB,GAAGhV,GAAlD,CAAZ;AACA,UAAMmV,GAAG,GAAG,KAAK5W,KAAL,CAAW6Q,UAAX,CAAsB4F,yBAAyB,GAAGhV,GAA5B,GAAkC,CAAxD,CAAZ;;AAEA,QAAIkV,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOH,yBAAyB,GAAG,CAAnC;AACD;;AAED,QAAI,KAAKzW,KAAL,CAAWtG,KAAX,CAAiB+c,yBAAyB,GAAGhV,GAA7C,EAAkDgV,yBAAyB,GAAGhV,GAA5B,GAAkC,EAApF,MAA4F,cAAhG,EAAgH;AAC9G,aAAOgV,yBAAyB,GAAG,EAAnC;AACD;;AAED,QAAIE,GAAG,KAAK,EAAR,IAAcC,GAAG,KAAK,EAA1B,EAA8B;AAC5B,aAAOH,yBAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDD,EAAAA,wBAAwB,GAAG;AACzB,UAAM/c,GAAG,GAAG,KAAKuG,KAAL,CAAW2P,OAAX,CAAmB,IAAnB,EAAyB,KAAKhT,KAAL,CAAW8E,GAApC,CAAZ;;AAEA,QAAIhI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,YAAM,KAAKS,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,sBAA3B,CAAN;AACD;AACF;;AAEDoV,EAAAA,wCAAwC,CAACpV,GAAD,EAAM;AAC5CqV,IAAAA,QAD4C;AAE5CC,IAAAA;AAF4C,GAAN,EAGrC;AACD,SAAK7c,KAAL,CAAWuH,GAAX,EAAiB,6DAA4DsV,UAAW,aAAxE,GAAwF,QAAOA,UAAW,yBAAwBD,QAAS,KAA3J;AACD;;AAEDE,EAAAA,8BAA8B,CAACvV,GAAD,EAAM;AAClCqV,IAAAA,QADkC;AAElCC,IAAAA;AAFkC,GAAN,EAG3B;AACD,UAAMxP,UAAU,GAAGwP,UAAU,CAAC,CAAD,CAAV,CAAcE,WAAd,KAA8BF,UAAU,CAACrd,KAAX,CAAiB,CAAjB,CAAjD;AACA,SAAKQ,KAAL,CAAWuH,GAAX,EAAiB,kFAAD,GAAsF,KAAIsV,UAAW,wBAAuBxP,UAAW,iBAAgBuP,QAAS,KAAhL;AACD;;AAEDI,EAAAA,gCAAgC,CAACzV,GAAD,EAAM;AACpCqV,IAAAA,QADoC;AAEpCC,IAAAA;AAFoC,GAAN,EAG7B;AACD,SAAK7c,KAAL,CAAWuH,GAAX,EAAiB,uDAAsDsV,UAAW,2BAAlE,GAAgG,oBAAmBD,QAAS,KAA5I;AACD;;AAEDK,EAAAA,qCAAqC,CAAC1V,GAAD,EAAM;AACzCqV,IAAAA;AADyC,GAAN,EAElC;AACD,SAAK5c,KAAL,CAAWuH,GAAX,EAAiB,UAASqV,QAAS,0EAAnB,GAAgG,+FAAhH;AACD;;AAEDM,EAAAA,gCAAgC,CAAC3V,GAAD,EAAM;AACpCqV,IAAAA,QADoC;AAEpCO,IAAAA;AAFoC,GAAN,EAG7B;AACD,UAAM9P,UAAU,GAAI,mEAAD,GAAuE,UAASuP,QAAS,KAA5G;AACA,UAAMQ,OAAO,GAAGD,YAAY,KAAK,IAAjB,GAAyB,oCAAmC9P,UAAW,EAAvE,GAA4E,eAAc8P,YAAa,oBAAmB9P,UAAW,EAArJ;AACA,WAAO,KAAKrN,KAAL,CAAWuH,GAAX,EAAgB6V,OAAhB,CAAP;AACD;;AAEDC,EAAAA,qCAAqC,CAAC9V,GAAD,EAAM;AACzCqV,IAAAA,QADyC;AAEzCU,IAAAA,YAFyC;AAGzCT,IAAAA;AAHyC,GAAN,EAIlC;AACD,QAAIO,OAAO,GAAG,IAAd;;AAEA,YAAQE,YAAR;AACE,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,QAAL;AACEF,QAAAA,OAAO,GAAI,UAASR,QAAS,iBAAgBU,YAAa,4BAAhD,GAA+E,KAAIT,UAAW,oBAAmBS,YAAa,WAAxI;AACA;;AAEF,WAAK,QAAL;AACEF,QAAAA,OAAO,GAAI,oDAAmDP,UAAW,SAA/D,GAA2E,UAASD,QAAS,KAAvG;AACA;;AAEF;AACEQ,QAAAA,OAAO,GAAI,qCAAoCP,UAAW,mCAAhD,GAAsF,2CAA0CD,QAAS,KAAnJ;AAZJ;;AAeA,WAAO,KAAK5c,KAAL,CAAWuH,GAAX,EAAgB6V,OAAhB,CAAP;AACD;;AAEDG,EAAAA,uCAAuC,CAAChW,GAAD,EAAM;AAC3CqV,IAAAA,QAD2C;AAE3CC,IAAAA;AAF2C,GAAN,EAGpC;AACD,SAAK7c,KAAL,CAAWuH,GAAX,EAAiB,sDAAqDsV,UAAW,oBAAmBD,QAAS,KAA7G;AACD;;AAEDY,EAAAA,kDAAkD,CAACjW,GAAD,EAAM;AACtDqV,IAAAA;AADsD,GAAN,EAE/C;AACD,SAAK5c,KAAL,CAAWuH,GAAX,EAAiB,gGAAD,GAAoG,aAAYqV,QAAS,KAAzI;AACD;;AAEDa,EAAAA,kBAAkB,GAAG;AACnB,UAAM/a,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;;AAEA,UAAMye,SAAS,GAAG,MAAM,KAAK7S,KAAL,CAAWzU,KAAK,CAACc,KAAjB,KAA2B,KAAK2T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAnD;;AAEA,YAAQ,KAAK2L,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACC,GAAX;AACE;AACE,gBAAMsnB,OAAO,GAAG,KAAKhf,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,gBAApC,CAAhB;;AAEA,cAAI6oB,SAAS,EAAb,EAAiB;AACf,mBAAO;AACL3f,cAAAA,IAAI,EAAE,QADD;AAELwJ,cAAAA,GAAG,EAAEoW,OAAO,CAAC1e,KAFR;AAGLpK,cAAAA,KAAK,EAAE8oB;AAHF,aAAP;AAKD;;AAED,iBAAO;AACL5f,YAAAA,IAAI,EAAE,SADD;AAELwJ,YAAAA,GAAG,EAAE7E;AAFA,WAAP;AAID;;AAEH,WAAKtM,KAAK,CAACI,MAAX;AACE;AACE,gBAAMmnB,OAAO,GAAG,KAAKhf,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,eAApC,CAAhB;;AAEA,cAAI6oB,SAAS,EAAb,EAAiB;AACf,mBAAO;AACL3f,cAAAA,IAAI,EAAE,QADD;AAELwJ,cAAAA,GAAG,EAAEoW,OAAO,CAAC1e,KAFR;AAGLpK,cAAAA,KAAK,EAAE8oB;AAHF,aAAP;AAKD;;AAED,iBAAO;AACL5f,YAAAA,IAAI,EAAE,SADD;AAELwJ,YAAAA,GAAG,EAAE7E;AAFA,WAAP;AAID;;AAEH,WAAKtM,KAAK,CAAC6E,KAAX;AACA,WAAK7E,KAAK,CAAC8E,MAAX;AACE;AACE,gBAAMyiB,OAAO,GAAG,KAAKC,mBAAL,EAAhB;;AAEA,cAAIF,SAAS,EAAb,EAAiB;AACf,mBAAO;AACL3f,cAAAA,IAAI,EAAE,SADD;AAELwJ,cAAAA,GAAG,EAAEoW,OAAO,CAAC1e,KAFR;AAGLpK,cAAAA,KAAK,EAAE8oB;AAHF,aAAP;AAKD;;AAED,iBAAO;AACL5f,YAAAA,IAAI,EAAE,SADD;AAELwJ,YAAAA,GAAG,EAAE7E;AAFA,WAAP;AAID;;AAEH;AACE,eAAO;AACL3E,UAAAA,IAAI,EAAE,SADD;AAELwJ,UAAAA,GAAG,EAAE7E;AAFA,SAAP;AAzDJ;AA8DD;;AAEDmb,EAAAA,iBAAiB,GAAG;AAClB,UAAMtW,GAAG,GAAG,KAAK9E,KAAL,CAAWxD,KAAvB;AACA,UAAMgM,EAAE,GAAG,KAAKC,eAAL,CAAqB,IAArB,CAAX;AACA,UAAM4S,IAAI,GAAG,KAAKrT,GAAL,CAASrU,KAAK,CAAC6B,EAAf,IAAqB,KAAKwlB,kBAAL,EAArB,GAAiD;AAC5D1f,MAAAA,IAAI,EAAE,MADsD;AAE5DwJ,MAAAA;AAF4D,KAA9D;AAIA,WAAO;AACL0D,MAAAA,EADK;AAEL6S,MAAAA;AAFK,KAAP;AAID;;AAEDC,EAAAA,iCAAiC,CAACxW,GAAD,EAAMtC,OAAN,EAAe+Y,YAAf,EAA6B;AAAA,UAE1DV,YAF0D,GAGxDrY,OAHwD,CAE1DqY,YAF0D;;AAK5D,QAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD;;AAED,QAAIA,YAAY,KAAKU,YAArB,EAAmC;AACjC,WAAKX,qCAAL,CAA2C9V,GAA3C,EAAgDtC,OAAhD;AACD;AACF;;AAEDgZ,EAAAA,eAAe,CAAC;AACdrB,IAAAA,QADc;AAEdU,IAAAA;AAFc,GAAD,EAGZ;AACD,UAAMY,SAAS,GAAG,IAAI7X,GAAJ,EAAlB;AACA,UAAM8X,OAAO,GAAG;AACdC,MAAAA,cAAc,EAAE,EADF;AAEdC,MAAAA,aAAa,EAAE,EAFD;AAGdC,MAAAA,aAAa,EAAE,EAHD;AAIdC,MAAAA,gBAAgB,EAAE;AAJJ,KAAhB;;AAOA,WAAO,CAAC,KAAK1T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAR,EAAkC;AAChC,YAAM0nB,UAAU,GAAG,KAAKtb,SAAL,EAAnB;;AADgC,oCAK5B,KAAK2a,iBAAL,EAL4B;AAAA,YAG9B5S,EAH8B,yBAG9BA,EAH8B;AAAA,YAI9B6S,IAJ8B,yBAI9BA,IAJ8B;;AAMhC,YAAMjB,UAAU,GAAG5R,EAAE,CAAClV,IAAtB;;AAEA,UAAI8mB,UAAU,KAAK,EAAnB,EAAuB;AACrB;AACD;;AAED,UAAI,SAAShX,IAAT,CAAcgX,UAAd,CAAJ,EAA+B;AAC7B,aAAKC,8BAAL,CAAoC7R,EAAE,CAAChM,KAAvC,EAA8C;AAC5C2d,UAAAA,QAD4C;AAE5CC,UAAAA;AAF4C,SAA9C;AAID;;AAED,UAAIqB,SAAS,CAACvX,GAAV,CAAckW,UAAd,CAAJ,EAA+B;AAC7B,aAAKG,gCAAL,CAAsC/R,EAAE,CAAChM,KAAzC,EAAgD;AAC9C2d,UAAAA,QAD8C;AAE9CC,UAAAA;AAF8C,SAAhD;AAID;;AAEDqB,MAAAA,SAAS,CAACO,GAAV,CAAc5B,UAAd;AACA,YAAM5X,OAAO,GAAG;AACd2X,QAAAA,QADc;AAEdU,QAAAA,YAFc;AAGdT,QAAAA;AAHc,OAAhB;AAKA2B,MAAAA,UAAU,CAACvT,EAAX,GAAgBA,EAAhB;;AAEA,cAAQ6S,IAAI,CAAC/f,IAAb;AACE,aAAK,SAAL;AACE;AACE,iBAAKggB,iCAAL,CAAuCD,IAAI,CAACvW,GAA5C,EAAiDtC,OAAjD,EAA0D,SAA1D;AACAuZ,YAAAA,UAAU,CAACV,IAAX,GAAkBA,IAAI,CAACjpB,KAAvB;AACAspB,YAAAA,OAAO,CAACC,cAAR,CAAuB9b,IAAvB,CAA4B,KAAKa,UAAL,CAAgBqb,UAAhB,EAA4B,mBAA5B,CAA5B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKT,iCAAL,CAAuCD,IAAI,CAACvW,GAA5C,EAAiDtC,OAAjD,EAA0D,QAA1D;AACAuZ,YAAAA,UAAU,CAACV,IAAX,GAAkBA,IAAI,CAACjpB,KAAvB;AACAspB,YAAAA,OAAO,CAACE,aAAR,CAAsB/b,IAAtB,CAA2B,KAAKa,UAAL,CAAgBqb,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,iBAAKT,iCAAL,CAAuCD,IAAI,CAACvW,GAA5C,EAAiDtC,OAAjD,EAA0D,QAA1D;AACAuZ,YAAAA,UAAU,CAACV,IAAX,GAAkBA,IAAI,CAACjpB,KAAvB;AACAspB,YAAAA,OAAO,CAACG,aAAR,CAAsBhc,IAAtB,CAA2B,KAAKa,UAAL,CAAgBqb,UAAhB,EAA4B,kBAA5B,CAA3B;AACA;AACD;;AAEH,aAAK,SAAL;AACE;AACE,kBAAM,KAAKnB,qCAAL,CAA2CS,IAAI,CAACvW,GAAhD,EAAqDtC,OAArD,CAAN;AACD;;AAEH,aAAK,MAAL;AACE;AACE,oBAAQqY,YAAR;AACE,mBAAK,SAAL;AACE,qBAAKX,wCAAL,CAA8CmB,IAAI,CAACvW,GAAnD,EAAwDtC,OAAxD;AACA;;AAEF,mBAAK,QAAL;AACE,qBAAKsY,uCAAL,CAA6CO,IAAI,CAACvW,GAAlD,EAAuDtC,OAAvD;AACA;;AAEF;AACEkZ,gBAAAA,OAAO,CAACI,gBAAR,CAAyBjc,IAAzB,CAA8B,KAAKa,UAAL,CAAgBqb,UAAhB,EAA4B,qBAA5B,CAA9B;AAVJ;AAYD;AA5CL;;AA+CA,UAAI,CAAC,KAAK3T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAL,EAA+B;AAC7B,aAAKkT,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;AACF;;AAED,WAAOinB,OAAP;AACD;;AAEDO,EAAAA,qBAAqB,CAACC,kBAAD,EAAqBJ,gBAArB,EAAuC;AAC1D3B,IAAAA;AAD0D,GAAvC,EAElB;AACD,QAAI+B,kBAAkB,CAAC5e,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,aAAOwe,gBAAP;AACD,KAFD,MAEO,IAAIA,gBAAgB,CAACxe,MAAjB,KAA4B,CAAhC,EAAmC;AACxC,aAAO4e,kBAAP;AACD,KAFM,MAEA,IAAIJ,gBAAgB,CAACxe,MAAjB,GAA0B4e,kBAAkB,CAAC5e,MAAjD,EAAyD;AAC9D,WAAK,IAAIoB,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGwd,kBAAkB,CAAC5e,MAAzC,EAAiDoB,EAAE,EAAnD,EAAuD;AACrD,cAAMyd,MAAM,GAAGD,kBAAkB,CAACxd,EAAD,CAAjC;AACA,aAAKqc,kDAAL,CAAwDoB,MAAM,CAAC3f,KAA/D,EAAsE;AACpE2d,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAO2B,gBAAP;AACD,KATM,MASA;AACL,WAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGN,gBAAgB,CAACxe,MAAzC,EAAiD8e,GAAG,EAApD,EAAwD;AACtD,cAAMD,MAAM,GAAGL,gBAAgB,CAACM,GAAD,CAA/B;AACA,aAAKrB,kDAAL,CAAwDoB,MAAM,CAAC3f,KAA/D,EAAsE;AACpE2d,UAAAA;AADoE,SAAtE;AAGD;;AAED,aAAO+B,kBAAP;AACD;AACF;;AAEDG,EAAAA,yBAAyB,CAAC;AACxBlC,IAAAA;AADwB,GAAD,EAEtB;AACD,QAAI,KAAK3Q,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5B,UAAI,CAAC,KAAKpB,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAL,EAA6B;AAC3B,cAAM,KAAKmnB,gCAAL,CAAsC,KAAKza,KAAL,CAAWxD,KAAjD,EAAwD;AAC5D2d,UAAAA,QAD4D;AAE5DO,UAAAA,YAAY,EAAE;AAF8C,SAAxD,CAAN;AAID;;AAN2B,YAS1BtoB,KAT0B,GAUxB,KAAK4N,KAVmB,CAS1B5N,KAT0B;AAW5B,WAAKgT,IAAL;;AAEA,UAAIhT,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,QAAjC,IAA6CA,KAAK,KAAK,QAAvD,IAAmEA,KAAK,KAAK,QAAjF,EAA2F;AACzF,aAAKqoB,gCAAL,CAAsC,KAAKza,KAAL,CAAWxD,KAAjD,EAAwD;AACtD2d,UAAAA,QADsD;AAEtDO,UAAAA,YAAY,EAAEtoB;AAFwC,SAAxD;AAID;;AAED,aAAOA,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDkqB,EAAAA,YAAY,CAACjhB,IAAD,EAAO;AACjB8e,IAAAA,QADiB;AAEjBoC,IAAAA;AAFiB,GAAP,EAGT;AACD,UAAM1B,YAAY,GAAG,KAAKwB,yBAAL,CAA+B;AAClDlC,MAAAA;AADkD,KAA/B,CAArB;AAGA,SAAK5S,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACA,UAAMunB,OAAO,GAAG,KAAKF,eAAL,CAAqB;AACnCrB,MAAAA,QADmC;AAEnCU,MAAAA;AAFmC,KAArB,CAAhB;;AAKA,YAAQA,YAAR;AACE,WAAK,SAAL;AACExf,QAAAA,IAAI,CAACwf,YAAL,GAAoB,IAApB;AACAxf,QAAAA,IAAI,CAACqgB,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,aAAKpU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,eAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACwf,YAAL,GAAoB,IAApB;AACAxf,QAAAA,IAAI,CAACqgB,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,aAAKrU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,eAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACwf,YAAL,GAAoB,IAApB;AACAxf,QAAAA,IAAI,CAACqgB,OAAL,GAAe,KAAKO,qBAAL,CAA2BP,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzF3B,UAAAA;AADyF,SAA5E,CAAf;AAGA,aAAK5S,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,eAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK,QAAL;AACEA,QAAAA,IAAI,CAACqgB,OAAL,GAAeA,OAAO,CAACI,gBAAvB;AACA,aAAKvU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,eAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF;AACE;AACE,gBAAMmhB,KAAK,GAAG,MAAM;AAClBnhB,YAAAA,IAAI,CAACqgB,OAAL,GAAe,EAAf;AACA,iBAAKnU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,mBAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAJD;;AAMAA,UAAAA,IAAI,CAACwf,YAAL,GAAoB,KAApB;AACA,gBAAM4B,QAAQ,GAAGf,OAAO,CAACC,cAAR,CAAuBre,MAAxC;AACA,gBAAMof,OAAO,GAAGhB,OAAO,CAACE,aAAR,CAAsBte,MAAtC;AACA,gBAAMqf,OAAO,GAAGjB,OAAO,CAACG,aAAR,CAAsBve,MAAtC;AACA,gBAAMsf,YAAY,GAAGlB,OAAO,CAACI,gBAAR,CAAyBxe,MAA9C;;AAEA,cAAI,CAACmf,QAAD,IAAa,CAACC,OAAd,IAAyB,CAACC,OAA1B,IAAqC,CAACC,YAA1C,EAAwD;AACtD,mBAAOJ,KAAK,EAAZ;AACD,WAFD,MAEO,IAAI,CAACC,QAAD,IAAa,CAACC,OAAlB,EAA2B;AAChCrhB,YAAAA,IAAI,CAACqgB,OAAL,GAAe,KAAKO,qBAAL,CAA2BP,OAAO,CAACG,aAAnC,EAAkDH,OAAO,CAACI,gBAA1D,EAA4E;AACzF3B,cAAAA;AADyF,aAA5E,CAAf;AAGA,iBAAK5S,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,mBAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WANM,MAMA,IAAI,CAACqhB,OAAD,IAAY,CAACC,OAAb,IAAwBF,QAAQ,IAAIG,YAAxC,EAAsD;AAC3D,iBAAK,IAAIC,GAAG,GAAG,CAAV,EAAaC,qBAAqB,GAAGpB,OAAO,CAACI,gBAAlD,EAAoEe,GAAG,GAAGC,qBAAqB,CAACxf,MAAhG,EAAwGuf,GAAG,EAA3G,EAA+G;AAC7G,oBAAMV,MAAM,GAAGW,qBAAqB,CAACD,GAAD,CAApC;AACA,mBAAK3C,wCAAL,CAA8CiC,MAAM,CAAC3f,KAArD,EAA4D;AAC1D2d,gBAAAA,QAD0D;AAE1DC,gBAAAA,UAAU,EAAE+B,MAAM,CAAC3T,EAAP,CAAUlV;AAFoC,eAA5D;AAID;;AAED+H,YAAAA,IAAI,CAACqgB,OAAL,GAAeA,OAAO,CAACC,cAAvB;AACA,iBAAKpU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,mBAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD,WAZM,MAYA,IAAI,CAACohB,QAAD,IAAa,CAACE,OAAd,IAAyBD,OAAO,IAAIE,YAAxC,EAAsD;AAC3D,iBAAK,IAAIG,GAAG,GAAG,CAAV,EAAaC,sBAAsB,GAAGtB,OAAO,CAACI,gBAAnD,EAAqEiB,GAAG,GAAGC,sBAAsB,CAAC1f,MAAlG,EAA0Gyf,GAAG,EAA7G,EAAiH;AAC/G,oBAAMZ,MAAM,GAAGa,sBAAsB,CAACD,GAAD,CAArC;AACA,mBAAKjC,uCAAL,CAA6CqB,MAAM,CAAC3f,KAApD,EAA2D;AACzD2d,gBAAAA,QADyD;AAEzDC,gBAAAA,UAAU,EAAE+B,MAAM,CAAC3T,EAAP,CAAUlV;AAFmC,eAA3D;AAID;;AAED+H,YAAAA,IAAI,CAACqgB,OAAL,GAAeA,OAAO,CAACE,aAAvB;AACA,iBAAKrU,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,mBAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAZM,MAYA;AACL,iBAAKmf,qCAAL,CAA2C+B,OAA3C,EAAoD;AAClDpC,cAAAA;AADkD,aAApD;AAGA,mBAAOqC,KAAK,EAAZ;AACD;AACF;AA9EL;AAgFD;;AAED3L,EAAAA,wBAAwB,CAACxV,IAAD,EAAO;AAC7B,UAAMmN,EAAE,GAAG,KAAKC,eAAL,EAAX;AACApN,IAAAA,IAAI,CAACmN,EAAL,GAAUA,EAAV;AACAnN,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAK6d,YAAL,CAAkB,KAAK7b,SAAL,EAAlB,EAAoC;AAC9C0Z,MAAAA,QAAQ,EAAE3R,EAAE,CAAClV,IADiC;AAE9CipB,MAAAA,OAAO,EAAE/T,EAAE,CAAChM;AAFkC,KAApC,CAAZ;AAIA,WAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAxkFgD,CAAnD;;AA4kFA,MAAM4hB,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,QADS;AAEfC,EAAAA,GAAG,EAAE,GAFU;AAGfC,EAAAA,IAAI,EAAE,QAHS;AAIfC,EAAAA,EAAE,EAAE,GAJW;AAKfC,EAAAA,EAAE,EAAE,GALW;AAMfC,EAAAA,IAAI,EAAE,QANS;AAOfC,EAAAA,KAAK,EAAE,QAPQ;AAQfC,EAAAA,IAAI,EAAE,QARS;AASfC,EAAAA,KAAK,EAAE,QATQ;AAUfC,EAAAA,MAAM,EAAE,QAVO;AAWfC,EAAAA,GAAG,EAAE,QAXU;AAYfC,EAAAA,MAAM,EAAE,QAZO;AAafC,EAAAA,IAAI,EAAE,QAbS;AAcfC,EAAAA,GAAG,EAAE,QAdU;AAefC,EAAAA,IAAI,EAAE,QAfS;AAgBfC,EAAAA,IAAI,EAAE,QAhBS;AAiBfC,EAAAA,KAAK,EAAE,QAjBQ;AAkBfC,EAAAA,GAAG,EAAE,QAlBU;AAmBfC,EAAAA,GAAG,EAAE,QAnBU;AAoBfC,EAAAA,GAAG,EAAE,QApBU;AAqBfC,EAAAA,IAAI,EAAE,QArBS;AAsBfC,EAAAA,GAAG,EAAE,QAtBU;AAuBfC,EAAAA,MAAM,EAAE,QAvBO;AAwBfC,EAAAA,IAAI,EAAE,QAxBS;AAyBfC,EAAAA,IAAI,EAAE,QAzBS;AA0BfC,EAAAA,KAAK,EAAE,QA1BQ;AA2BfC,EAAAA,KAAK,EAAE,QA3BQ;AA4BfC,EAAAA,IAAI,EAAE,QA5BS;AA6BfC,EAAAA,MAAM,EAAE,QA7BO;AA8BfC,EAAAA,KAAK,EAAE,QA9BQ;AA+BfC,EAAAA,IAAI,EAAE,QA/BS;AAgCfC,EAAAA,IAAI,EAAE,QAhCS;AAiCfC,EAAAA,KAAK,EAAE,QAjCQ;AAkCfC,EAAAA,MAAM,EAAE,QAlCO;AAmCfC,EAAAA,MAAM,EAAE,QAnCO;AAoCfC,EAAAA,MAAM,EAAE,QApCO;AAqCfC,EAAAA,MAAM,EAAE,QArCO;AAsCfC,EAAAA,MAAM,EAAE,QAtCO;AAuCfC,EAAAA,MAAM,EAAE,QAvCO;AAwCfC,EAAAA,KAAK,EAAE,QAxCQ;AAyCfC,EAAAA,MAAM,EAAE,QAzCO;AA0CfC,EAAAA,IAAI,EAAE,QA1CS;AA2CfC,EAAAA,KAAK,EAAE,QA3CQ;AA4CfC,EAAAA,KAAK,EAAE,QA5CQ;AA6CfC,EAAAA,MAAM,EAAE,QA7CO;AA8CfC,EAAAA,MAAM,EAAE,QA9CO;AA+CfC,EAAAA,MAAM,EAAE,QA/CO;AAgDfC,EAAAA,KAAK,EAAE,QAhDQ;AAiDfC,EAAAA,IAAI,EAAE,QAjDS;AAkDfC,EAAAA,MAAM,EAAE,QAlDO;AAmDfC,EAAAA,MAAM,EAAE,QAnDO;AAoDfC,EAAAA,KAAK,EAAE,QApDQ;AAqDfC,EAAAA,IAAI,EAAE,QArDS;AAsDfC,EAAAA,GAAG,EAAE,QAtDU;AAuDfC,EAAAA,MAAM,EAAE,QAvDO;AAwDfC,EAAAA,MAAM,EAAE,QAxDO;AAyDfC,EAAAA,MAAM,EAAE,QAzDO;AA0DfC,EAAAA,KAAK,EAAE,QA1DQ;AA2DfC,EAAAA,MAAM,EAAE,QA3DO;AA4DfC,EAAAA,IAAI,EAAE,QA5DS;AA6DfC,EAAAA,KAAK,EAAE,QA7DQ;AA8DfC,EAAAA,MAAM,EAAE,QA9DO;AA+DfC,EAAAA,MAAM,EAAE,QA/DO;AAgEfC,EAAAA,MAAM,EAAE,QAhEO;AAiEfC,EAAAA,KAAK,EAAE,QAjEQ;AAkEfC,EAAAA,IAAI,EAAE,QAlES;AAmEfC,EAAAA,MAAM,EAAE,QAnEO;AAoEfC,EAAAA,KAAK,EAAE,QApEQ;AAqEfC,EAAAA,KAAK,EAAE,QArEQ;AAsEfC,EAAAA,MAAM,EAAE,QAtEO;AAuEfC,EAAAA,MAAM,EAAE,QAvEO;AAwEfC,EAAAA,KAAK,EAAE,QAxEQ;AAyEfC,EAAAA,MAAM,EAAE,QAzEO;AA0EfC,EAAAA,IAAI,EAAE,QA1ES;AA2EfC,EAAAA,KAAK,EAAE,QA3EQ;AA4EfC,EAAAA,KAAK,EAAE,QA5EQ;AA6EfC,EAAAA,MAAM,EAAE,QA7EO;AA8EfC,EAAAA,MAAM,EAAE,QA9EO;AA+EfC,EAAAA,MAAM,EAAE,QA/EO;AAgFfC,EAAAA,KAAK,EAAE,QAhFQ;AAiFfC,EAAAA,IAAI,EAAE,QAjFS;AAkFfC,EAAAA,MAAM,EAAE,QAlFO;AAmFfC,EAAAA,MAAM,EAAE,QAnFO;AAoFfC,EAAAA,KAAK,EAAE,QApFQ;AAqFfC,EAAAA,IAAI,EAAE,QArFS;AAsFfC,EAAAA,GAAG,EAAE,QAtFU;AAuFfC,EAAAA,MAAM,EAAE,QAvFO;AAwFfC,EAAAA,MAAM,EAAE,QAxFO;AAyFfC,EAAAA,MAAM,EAAE,QAzFO;AA0FfC,EAAAA,KAAK,EAAE,QA1FQ;AA2FfC,EAAAA,MAAM,EAAE,QA3FO;AA4FfC,EAAAA,IAAI,EAAE,QA5FS;AA6FfC,EAAAA,MAAM,EAAE,QA7FO;AA8FfC,EAAAA,MAAM,EAAE,QA9FO;AA+FfC,EAAAA,MAAM,EAAE,QA/FO;AAgGfC,EAAAA,MAAM,EAAE,QAhGO;AAiGfC,EAAAA,KAAK,EAAE,QAjGQ;AAkGfC,EAAAA,IAAI,EAAE,QAlGS;AAmGfC,EAAAA,MAAM,EAAE,QAnGO;AAoGfC,EAAAA,KAAK,EAAE,QApGQ;AAqGfC,EAAAA,IAAI,EAAE,QArGS;AAsGfC,EAAAA,KAAK,EAAE,QAtGQ;AAuGfC,EAAAA,KAAK,EAAE,QAvGQ;AAwGfC,EAAAA,MAAM,EAAE,QAxGO;AAyGfC,EAAAA,MAAM,EAAE,QAzGO;AA0GfC,EAAAA,IAAI,EAAE,QA1GS;AA2GfC,EAAAA,IAAI,EAAE,QA3GS;AA4GfC,EAAAA,IAAI,EAAE,QA5GS;AA6GfjuB,EAAAA,KAAK,EAAE,QA7GQ;AA8GfkuB,EAAAA,KAAK,EAAE,QA9GQ;AA+GfC,EAAAA,IAAI,EAAE,QA/GS;AAgHfC,EAAAA,KAAK,EAAE,QAhHQ;AAiHfC,EAAAA,KAAK,EAAE,QAjHQ;AAkHfC,EAAAA,OAAO,EAAE,QAlHM;AAmHfC,EAAAA,IAAI,EAAE,QAnHS;AAoHfC,EAAAA,GAAG,EAAE,QApHU;AAqHfC,EAAAA,KAAK,EAAE,QArHQ;AAsHfC,EAAAA,IAAI,EAAE,QAtHS;AAuHfC,EAAAA,KAAK,EAAE,QAvHQ;AAwHfC,EAAAA,MAAM,EAAE,QAxHO;AAyHfC,EAAAA,EAAE,EAAE,QAzHW;AA0HfC,EAAAA,EAAE,EAAE,QA1HW;AA2HfC,EAAAA,EAAE,EAAE,QA3HW;AA4HfC,EAAAA,OAAO,EAAE,QA5HM;AA6HfC,EAAAA,EAAE,EAAE,QA7HW;AA8HfC,EAAAA,GAAG,EAAE,QA9HU;AA+HfC,EAAAA,KAAK,EAAE,QA/HQ;AAgIfC,EAAAA,GAAG,EAAE,QAhIU;AAiIfC,EAAAA,OAAO,EAAE,QAjIM;AAkIfC,EAAAA,GAAG,EAAE,QAlIU;AAmIfC,EAAAA,GAAG,EAAE,QAnIU;AAoIfC,EAAAA,GAAG,EAAE,QApIU;AAqIfC,EAAAA,KAAK,EAAE,QArIQ;AAsIfC,EAAAA,KAAK,EAAE,QAtIQ;AAuIfC,EAAAA,IAAI,EAAE,QAvIS;AAwIfC,EAAAA,KAAK,EAAE,QAxIQ;AAyIfC,EAAAA,KAAK,EAAE,QAzIQ;AA0IfC,EAAAA,OAAO,EAAE,QA1IM;AA2IfC,EAAAA,IAAI,EAAE,QA3IS;AA4IfC,EAAAA,GAAG,EAAE,QA5IU;AA6IfC,EAAAA,KAAK,EAAE,QA7IQ;AA8IfC,EAAAA,IAAI,EAAE,QA9IS;AA+IfC,EAAAA,KAAK,EAAE,QA/IQ;AAgJfC,EAAAA,MAAM,EAAE,QAhJO;AAiJfC,EAAAA,EAAE,EAAE,QAjJW;AAkJfC,EAAAA,EAAE,EAAE,QAlJW;AAmJfC,EAAAA,EAAE,EAAE,QAnJW;AAoJfC,EAAAA,OAAO,EAAE,QApJM;AAqJfC,EAAAA,EAAE,EAAE,QArJW;AAsJfC,EAAAA,GAAG,EAAE,QAtJU;AAuJfC,EAAAA,MAAM,EAAE,QAvJO;AAwJfC,EAAAA,KAAK,EAAE,QAxJQ;AAyJfC,EAAAA,GAAG,EAAE,QAzJU;AA0JfC,EAAAA,OAAO,EAAE,QA1JM;AA2JfC,EAAAA,GAAG,EAAE,QA3JU;AA4JfC,EAAAA,GAAG,EAAE,QA5JU;AA6JfC,EAAAA,GAAG,EAAE,QA7JU;AA8JfC,EAAAA,KAAK,EAAE,QA9JQ;AA+JfC,EAAAA,QAAQ,EAAE,QA/JK;AAgKfC,EAAAA,KAAK,EAAE,QAhKQ;AAiKfC,EAAAA,GAAG,EAAE,QAjKU;AAkKfC,EAAAA,IAAI,EAAE,QAlKS;AAmKfC,EAAAA,IAAI,EAAE,QAnKS;AAoKfC,EAAAA,MAAM,EAAE,QApKO;AAqKfC,EAAAA,IAAI,EAAE,QArKS;AAsKfC,EAAAA,GAAG,EAAE,QAtKU;AAuKfC,EAAAA,GAAG,EAAE,QAvKU;AAwKfC,EAAAA,GAAG,EAAE,QAxKU;AAyKfC,EAAAA,KAAK,EAAE,QAzKQ;AA0KfC,EAAAA,KAAK,EAAE,QA1KQ;AA2KfC,EAAAA,KAAK,EAAE,QA3KQ;AA4KfC,EAAAA,KAAK,EAAE,QA5KQ;AA6KfC,EAAAA,KAAK,EAAE,QA7KQ;AA8KfC,EAAAA,KAAK,EAAE,QA9KQ;AA+KfC,EAAAA,KAAK,EAAE,QA/KQ;AAgLfC,EAAAA,KAAK,EAAE,QAhLQ;AAiLfC,EAAAA,MAAM,EAAE,QAjLO;AAkLfC,EAAAA,MAAM,EAAE,QAlLO;AAmLfC,EAAAA,IAAI,EAAE,QAnLS;AAoLfC,EAAAA,MAAM,EAAE,QApLO;AAqLfC,EAAAA,MAAM,EAAE,QArLO;AAsLfC,EAAAA,KAAK,EAAE,QAtLQ;AAuLfC,EAAAA,KAAK,EAAE,QAvLQ;AAwLfC,EAAAA,MAAM,EAAE,QAxLO;AAyLfC,EAAAA,MAAM,EAAE,QAzLO;AA0LfC,EAAAA,KAAK,EAAE,QA1LQ;AA2LfC,EAAAA,KAAK,EAAE,QA3LQ;AA4LfC,EAAAA,IAAI,EAAE,QA5LS;AA6LfC,EAAAA,KAAK,EAAE,QA7LQ;AA8LfC,EAAAA,MAAM,EAAE,QA9LO;AA+LfC,EAAAA,IAAI,EAAE,QA/LS;AAgMfC,EAAAA,KAAK,EAAE,QAhMQ;AAiMfC,EAAAA,OAAO,EAAE,QAjMM;AAkMfC,EAAAA,IAAI,EAAE,QAlMS;AAmMfC,EAAAA,IAAI,EAAE,QAnMS;AAoMfC,EAAAA,IAAI,EAAE,QApMS;AAqMfC,EAAAA,IAAI,EAAE,QArMS;AAsMfC,EAAAA,IAAI,EAAE,QAtMS;AAuMfC,EAAAA,KAAK,EAAE,QAvMQ;AAwMfC,EAAAA,IAAI,EAAE,QAxMS;AAyMfC,EAAAA,IAAI,EAAE,QAzMS;AA0MfC,EAAAA,IAAI,EAAE,QA1MS;AA2MfC,EAAAA,IAAI,EAAE,QA3MS;AA4MfC,EAAAA,IAAI,EAAE,QA5MS;AA6MfC,EAAAA,MAAM,EAAE,QA7MO;AA8MfC,EAAAA,IAAI,EAAE,QA9MS;AA+MfC,EAAAA,KAAK,EAAE,QA/MQ;AAgNfvN,EAAAA,KAAK,EAAE,QAhNQ;AAiNfwN,EAAAA,KAAK,EAAE,QAjNQ;AAkNfC,EAAAA,IAAI,EAAE,QAlNS;AAmNfC,EAAAA,KAAK,EAAE,QAnNQ;AAoNfC,EAAAA,EAAE,EAAE,QApNW;AAqNfC,EAAAA,IAAI,EAAE,QArNS;AAsNfC,EAAAA,GAAG,EAAE,QAtNU;AAuNfC,EAAAA,KAAK,EAAE,QAvNQ;AAwNfC,EAAAA,MAAM,EAAE,QAxNO;AAyNfC,EAAAA,KAAK,EAAE,QAzNQ;AA0NfrtB,EAAAA,IAAI,EAAE,QA1NS;AA2NfstB,EAAAA,KAAK,EAAE,QA3NQ;AA4NfC,EAAAA,GAAG,EAAE,QA5NU;AA6NfC,EAAAA,GAAG,EAAE,QA7NU;AA8NfC,EAAAA,EAAE,EAAE,QA9NW;AA+NfC,EAAAA,GAAG,EAAE,QA/NU;AAgOfC,EAAAA,GAAG,EAAE,QAhOU;AAiOfC,EAAAA,GAAG,EAAE,QAjOU;AAkOfC,EAAAA,MAAM,EAAE,QAlOO;AAmOfC,EAAAA,GAAG,EAAE,QAnOU;AAoOfC,EAAAA,IAAI,EAAE,QApOS;AAqOfC,EAAAA,KAAK,EAAE,QArOQ;AAsOfC,EAAAA,EAAE,EAAE,QAtOW;AAuOfC,EAAAA,KAAK,EAAE,QAvOQ;AAwOfC,EAAAA,EAAE,EAAE,QAxOW;AAyOfC,EAAAA,EAAE,EAAE,QAzOW;AA0OfC,EAAAA,GAAG,EAAE,QA1OU;AA2OfC,EAAAA,GAAG,EAAE,QA3OU;AA4OfC,EAAAA,IAAI,EAAE,QA5OS;AA6OfC,EAAAA,IAAI,EAAE,QA7OS;AA8OfC,EAAAA,IAAI,EAAE,QA9OS;AA+OfC,EAAAA,KAAK,EAAE,QA/OQ;AAgPfC,EAAAA,MAAM,EAAE,QAhPO;AAiPfC,EAAAA,IAAI,EAAE,QAjPS;AAkPfC,EAAAA,IAAI,EAAE,QAlPS;AAmPfC,EAAAA,KAAK,EAAE,QAnPQ;AAoPfC,EAAAA,KAAK,EAAE,QApPQ;AAqPfC,EAAAA,MAAM,EAAE,QArPO;AAsPfC,EAAAA,MAAM,EAAE,QAtPO;AAuPfC,EAAAA,IAAI,EAAE,QAvPS;AAwPfC,EAAAA,IAAI,EAAE,QAxPS;AAyPfC,EAAAA,GAAG,EAAE,QAzPU;AA0PfC,EAAAA,MAAM,EAAE,QA1PO;AA2PfC,EAAAA,KAAK,EAAE,QA3PQ;AA4PfC,EAAAA,MAAM,EAAE,QA5PO;AA6PfC,EAAAA,KAAK,EAAE;AA7PQ,CAAjB;AAgQA,MAAMC,UAAU,GAAG,eAAnB;AACA,MAAMC,cAAc,GAAG,OAAvB;AACA/qB,OAAO,CAACsV,MAAR,GAAiB,IAAI1V,UAAJ,CAAe,MAAf,EAAuB,KAAvB,CAAjB;AACAI,OAAO,CAACgrB,MAAR,GAAiB,IAAIprB,UAAJ,CAAe,OAAf,EAAwB,KAAxB,CAAjB;AACAI,OAAO,CAACuV,MAAR,GAAiB,IAAI3V,UAAJ,CAAe,gBAAf,EAAiC,IAAjC,EAAuC,IAAvC,CAAjB;AACA/N,KAAK,CAACo5B,OAAN,GAAgB,IAAIp6B,SAAJ,CAAc,SAAd,CAAhB;AACAgB,KAAK,CAACq5B,OAAN,GAAgB,IAAIr6B,SAAJ,CAAc,SAAd,EAAyB;AACvCN,EAAAA,UAAU,EAAE;AAD2B,CAAzB,CAAhB;AAGAsB,KAAK,CAACoZ,WAAN,GAAoB,IAAIpa,SAAJ,CAAc,aAAd,EAA6B;AAC/CL,EAAAA,UAAU,EAAE;AADmC,CAA7B,CAApB;AAGAqB,KAAK,CAACs5B,SAAN,GAAkB,IAAIt6B,SAAJ,CAAc,WAAd,CAAlB;;AAEAgB,KAAK,CAACoZ,WAAN,CAAkB7Z,aAAlB,GAAkC,YAAY;AAC5C,OAAK8M,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACuV,MAAhC;AACA,OAAKrX,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACsV,MAAhC;AACA,OAAKpX,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD,CAJD;;AAMA9O,KAAK,CAACs5B,SAAN,CAAgB/5B,aAAhB,GAAgC,UAAU2P,QAAV,EAAoB;AAClD,QAAMH,GAAG,GAAG,KAAK1C,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB,EAAZ;;AAEA,MAAID,GAAG,KAAKZ,OAAO,CAACsV,MAAhB,IAA0BvU,QAAQ,KAAKlP,KAAK,CAAC+C,KAA7C,IAAsDgM,GAAG,KAAKZ,OAAO,CAACgrB,MAA1E,EAAkF;AAChF,SAAK9sB,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;AACA,SAAK3C,KAAL,CAAWyC,WAAX,GAAyB,KAAKG,UAAL,OAAsBd,OAAO,CAACuV,MAAvD;AACD,GAHD,MAGO;AACL,SAAKrX,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACD;AACF,CATD;;AAWA,SAASyqB,UAAT,CAAoBC,MAApB,EAA4B;AAC1B,SAAOA,MAAM,GAAGA,MAAM,CAAC7xB,IAAP,KAAgB,oBAAhB,IAAwC6xB,MAAM,CAAC7xB,IAAP,KAAgB,oBAA3D,GAAkF,KAA/F;AACD;;AAED,SAAS8xB,mBAAT,CAA6BD,MAA7B,EAAqC;AACnC,MAAIA,MAAM,CAAC7xB,IAAP,KAAgB,eAApB,EAAqC;AACnC,WAAO6xB,MAAM,CAAC75B,IAAd;AACD;;AAED,MAAI65B,MAAM,CAAC7xB,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAO6xB,MAAM,CAACE,SAAP,CAAiB/5B,IAAjB,GAAwB,GAAxB,GAA8B65B,MAAM,CAAC75B,IAAP,CAAYA,IAAjD;AACD;;AAED,MAAI65B,MAAM,CAAC7xB,IAAP,KAAgB,qBAApB,EAA2C;AACzC,WAAO8xB,mBAAmB,CAACD,MAAM,CAACA,MAAR,CAAnB,GAAqC,GAArC,GAA2CC,mBAAmB,CAACD,MAAM,CAAChe,QAAR,CAArE;AACD;;AAED,QAAM,IAAIjI,KAAJ,CAAU,+BAA+BimB,MAAM,CAAC7xB,IAAhD,CAAN;AACD;;AAED,IAAI4b,GAAG,GAAIxb,UAAU,IAAI,cAAcA,UAAd,CAAyB;AAChD4xB,EAAAA,YAAY,GAAG;AACb,QAAI5qB,GAAG,GAAG,EAAV;AACA,QAAI6qB,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAA5B;;AAEA,aAAS;AACP,UAAI,KAAK9E,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,cAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,2BAA7B,CAAN;AACD;;AAED,YAAMgxB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;;AAEA,cAAQ0oB,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACE,cAAI,KAAKxtB,KAAL,CAAW8E,GAAX,KAAmB,KAAK9E,KAAL,CAAWxD,KAAlC,EAAyC;AACvC,gBAAIgxB,EAAE,KAAK,EAAP,IAAa,KAAKxtB,KAAL,CAAWyC,WAA5B,EAAyC;AACvC,gBAAE,KAAKzC,KAAL,CAAW8E,GAAb;AACA,qBAAO,KAAK8B,WAAL,CAAiBjT,KAAK,CAACoZ,WAAvB,CAAP;AACD;;AAED,mBAAO,MAAMkH,gBAAN,CAAuBuZ,EAAvB,CAAP;AACD;;AAED9qB,UAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACA,iBAAO,KAAK8B,WAAL,CAAiBjT,KAAK,CAACq5B,OAAvB,EAAgCtqB,GAAhC,CAAP;;AAEF,aAAK,EAAL;AACEA,UAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACApC,UAAAA,GAAG,IAAI,KAAK+qB,aAAL,EAAP;AACAF,UAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACA;;AAEF;AACE,cAAIxD,SAAS,CAACksB,EAAD,CAAb,EAAmB;AACjB9qB,YAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACApC,YAAAA,GAAG,IAAI,KAAKgrB,cAAL,CAAoB,IAApB,CAAP;AACAH,YAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,WAJD,MAIO;AACL,cAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;;AA5BL;AA+BD;AACF;;AAED4oB,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC5B,UAAMH,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;AACA,QAAIpC,GAAJ;AACA,MAAE,KAAK1C,KAAL,CAAW8E,GAAb;;AAEA,QAAI0oB,EAAE,KAAK,EAAP,IAAa,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,MAA0C,EAA3D,EAA+D;AAC7D,QAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACApC,MAAAA,GAAG,GAAGirB,aAAa,GAAG,IAAH,GAAU,MAA7B;AACD,KAHD,MAGO;AACLjrB,MAAAA,GAAG,GAAGrE,MAAM,CAAC4G,YAAP,CAAoBuoB,EAApB,CAAN;AACD;;AAED,MAAE,KAAKxtB,KAAL,CAAW4tB,OAAb;AACA,SAAK5tB,KAAL,CAAW6tB,SAAX,GAAuB,KAAK7tB,KAAL,CAAW8E,GAAlC;AACA,WAAOpC,GAAP;AACD;;AAEDorB,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACnB,QAAIrrB,GAAG,GAAG,EAAV;AACA,QAAI6qB,UAAU,GAAG,EAAE,KAAKvtB,KAAL,CAAW8E,GAA9B;;AAEA,aAAS;AACP,UAAI,KAAK9E,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,cAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8BAA7B,CAAN;AACD;;AAED,YAAMgxB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;AACA,UAAI0oB,EAAE,KAAKO,KAAX,EAAkB;;AAElB,UAAIP,EAAE,KAAK,EAAX,EAAe;AACb9qB,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACApC,QAAAA,GAAG,IAAI,KAAK+qB,aAAL,EAAP;AACAF,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAJD,MAIO,IAAIxD,SAAS,CAACksB,EAAD,CAAb,EAAmB;AACxB9qB,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACApC,QAAAA,GAAG,IAAI,KAAKgrB,cAAL,CAAoB,KAApB,CAAP;AACAH,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAJM,MAIA;AACL,UAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;AACF;;AAEDpC,IAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAX,EAA7B,CAAP;AACA,WAAO,KAAK8B,WAAL,CAAiBjT,KAAK,CAACI,MAAvB,EAA+B2O,GAA/B,CAAP;AACD;;AAED+qB,EAAAA,aAAa,GAAG;AACd,QAAIO,GAAG,GAAG,EAAV;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAJ;AACA,QAAIV,EAAE,GAAG,KAAKnqB,KAAL,CAAW,KAAKrD,KAAL,CAAW8E,GAAtB,CAAT;AACA,UAAM7E,QAAQ,GAAG,EAAE,KAAKD,KAAL,CAAW8E,GAA9B;;AAEA,WAAO,KAAK9E,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAAtB,IAAgC2wB,KAAK,KAAK,EAAjD,EAAqD;AACnDT,MAAAA,EAAE,GAAG,KAAKnqB,KAAL,CAAW,KAAKrD,KAAL,CAAW8E,GAAX,EAAX,CAAL;;AAEA,UAAI0oB,EAAE,KAAK,GAAX,EAAgB;AACd,YAAIQ,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClB,cAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;AAClBA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAIvB,UAAU,CAACxpB,IAAX,CAAgB4qB,GAAhB,CAAJ,EAA0B;AACxBE,cAAAA,MAAM,GAAG7vB,MAAM,CAAC+vB,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF,WAND,MAMO;AACLA,YAAAA,GAAG,GAAGA,GAAG,CAACG,MAAJ,CAAW,CAAX,CAAN;;AAEA,gBAAItB,cAAc,CAACzpB,IAAf,CAAoB4qB,GAApB,CAAJ,EAA8B;AAC5BE,cAAAA,MAAM,GAAG7vB,MAAM,CAAC+vB,aAAP,CAAqBC,QAAQ,CAACL,GAAD,EAAM,EAAN,CAA7B,CAAT;AACD;AACF;AACF,SAdD,MAcO;AACLE,UAAAA,MAAM,GAAGjR,QAAQ,CAAC+Q,GAAD,CAAjB;AACD;;AAED;AACD;;AAEDA,MAAAA,GAAG,IAAIR,EAAP;AACD;;AAED,QAAI,CAACU,MAAL,EAAa;AACX,WAAKluB,KAAL,CAAW8E,GAAX,GAAiB7E,QAAjB;AACA,aAAO,GAAP;AACD;;AAED,WAAOiuB,MAAP;AACD;;AAEDI,EAAAA,WAAW,GAAG;AACZ,QAAId,EAAJ;AACA,UAAMhxB,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;;AAEA,OAAG;AACD0oB,MAAAA,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,EAAE,KAAKlU,KAAL,CAAW8E,GAAnC,CAAL;AACD,KAFD,QAESO,gBAAgB,CAACmoB,EAAD,CAAhB,IAAwBA,EAAE,KAAK,EAFxC;;AAIA,WAAO,KAAK5mB,WAAL,CAAiBjT,KAAK,CAACo5B,OAAvB,EAAgC,KAAK1pB,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,CAAhC,CAAP;AACD;;AAEDypB,EAAAA,kBAAkB,GAAG;AACnB,UAAMlzB,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAK2H,KAAL,CAAWzU,KAAK,CAACo5B,OAAjB,CAAJ,EAA+B;AAC7B1xB,MAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAK0M,KAAL,CAAW5N,KAAvB;AACD,KAFD,MAEO,IAAI,KAAK4N,KAAL,CAAW1E,IAAX,CAAgBvI,OAApB,EAA6B;AAClCsI,MAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAK0M,KAAL,CAAW1E,IAAX,CAAgBvI,OAA5B;AACD,KAFM,MAEA;AACL,WAAKkX,UAAL;AACD;;AAED,SAAK7E,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDmzB,EAAAA,sBAAsB,GAAG;AACvB,UAAMvuB,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAM5M,IAAI,GAAG,KAAKi7B,kBAAL,EAAb;AACA,QAAI,CAAC,KAAKvmB,GAAL,CAASrU,KAAK,CAACgB,KAAf,CAAL,EAA4B,OAAOrB,IAAP;AAC5B,UAAM+H,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,IAAAA,IAAI,CAACgyB,SAAL,GAAiB/5B,IAAjB;AACA+H,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKi7B,kBAAL,EAAZ;AACA,WAAO,KAAK7tB,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDozB,EAAAA,mBAAmB,GAAG;AACpB,UAAMxuB,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,QAAI7E,IAAI,GAAG,KAAKmzB,sBAAL,EAAX;;AAEA,QAAInzB,IAAI,CAACC,IAAL,KAAc,mBAAlB,EAAuC;AACrC,aAAOD,IAAP;AACD;;AAED,WAAO,KAAK2M,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAP,EAA4B;AAC1B,YAAM65B,OAAO,GAAG,KAAKnyB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAhB;AACAwuB,MAAAA,OAAO,CAACvB,MAAR,GAAiB9xB,IAAjB;AACAqzB,MAAAA,OAAO,CAACvf,QAAR,GAAmB,KAAKof,kBAAL,EAAnB;AACAlzB,MAAAA,IAAI,GAAG,KAAKqF,UAAL,CAAgBguB,OAAhB,EAAyB,qBAAzB,CAAP;AACD;;AAED,WAAOrzB,IAAP;AACD;;AAEDszB,EAAAA,sBAAsB,GAAG;AACvB,QAAItzB,IAAJ;;AAEA,YAAQ,KAAK2E,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACQ,MAAX;AACEkH,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK2E,IAAL;AACA/J,QAAAA,IAAI,GAAG,KAAKuzB,2BAAL,CAAiCvzB,IAAjC,CAAP;;AAEA,YAAIA,IAAI,CAACqB,UAAL,CAAgBpB,IAAhB,KAAyB,oBAA7B,EAAmD;AACjD,eAAKiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,6DAAvB;AACD;;AAED,eAAOnB,IAAP;;AAEF,WAAK1H,KAAK,CAACoZ,WAAX;AACA,WAAKpZ,KAAK,CAACI,MAAX;AACE,eAAO,KAAK+L,aAAL,EAAP;;AAEF;AACE,cAAM,KAAKvC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,+DAA7B,CAAN;AAjBJ;AAmBD;;AAEDqyB,EAAAA,uBAAuB,GAAG;AACxB,UAAMxzB,IAAI,GAAG,KAAKkB,WAAL,CAAiB,KAAKyD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAW8uB,aAAnD,CAAb;AACA,WAAO,KAAKjyB,YAAL,CAAkBxB,IAAlB,EAAwB,oBAAxB,EAA8C,KAAK2E,KAAL,CAAWxD,KAAzD,EAAgE,KAAKwD,KAAL,CAAWE,QAA3E,CAAP;AACD;;AAED6uB,EAAAA,mBAAmB,CAAC1zB,IAAD,EAAO;AACxB,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKuL,eAAL,EAAlB;AACA,SAAKV,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,WAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDuzB,EAAAA,2BAA2B,CAACvzB,IAAD,EAAO;AAChC,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAJ,EAA8B;AAC5BgH,MAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKmyB,uBAAL,EAAlB;AACD,KAFD,MAEO;AACLxzB,MAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKuL,eAAL,EAAlB;AACD;;AAED,SAAKV,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,WAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED2zB,EAAAA,iBAAiB,GAAG;AAClB,UAAM3zB,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAKuH,GAAL,CAASrU,KAAK,CAACQ,MAAf,CAAJ,EAA4B;AAC1B,WAAKoT,MAAL,CAAY5T,KAAK,CAACuB,QAAlB;AACAmG,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKmD,gBAAL,EAAhB;AACA,WAAK5K,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,aAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKk7B,sBAAL,EAAZ;AACAnzB,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK4V,GAAL,CAASrU,KAAK,CAAC6B,EAAf,IAAqB,KAAKm5B,sBAAL,EAArB,GAAqD,IAAlE;AACA,WAAO,KAAKjuB,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED4zB,EAAAA,wBAAwB,CAAChvB,QAAD,EAAWC,QAAX,EAAqB;AAC3C,UAAM7E,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;;AAEA,QAAI,KAAKkI,KAAL,CAAWzU,KAAK,CAACs5B,SAAjB,CAAJ,EAAiC;AAC/B,WAAK1lB,MAAL,CAAY5T,KAAK,CAACs5B,SAAlB;AACA,aAAO,KAAKvsB,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKm7B,mBAAL,EAAZ;AACA,WAAO,KAAKS,+BAAL,CAAqC7zB,IAArC,CAAP;AACD;;AAED6zB,EAAAA,+BAA+B,CAAC7zB,IAAD,EAAO;AACpC,UAAM8zB,UAAU,GAAG,EAAnB;;AAEA,WAAO,CAAC,KAAK/mB,KAAL,CAAWzU,KAAK,CAAC+C,KAAjB,CAAD,IAA4B,CAAC,KAAK0R,KAAL,CAAWzU,KAAK,CAACs5B,SAAjB,CAApC,EAAiE;AAC/DkC,MAAAA,UAAU,CAACtvB,IAAX,CAAgB,KAAKmvB,iBAAL,EAAhB;AACD;;AAED3zB,IAAAA,IAAI,CAAC8zB,UAAL,GAAkBA,UAAlB;AACA9zB,IAAAA,IAAI,CAAC+zB,WAAL,GAAmB,KAAKpnB,GAAL,CAASrU,KAAK,CAAC+C,KAAf,CAAnB;AACA,SAAK6Q,MAAL,CAAY5T,KAAK,CAACs5B,SAAlB;AACA,WAAO,KAAKvsB,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDg0B,EAAAA,wBAAwB,CAACpvB,QAAD,EAAWC,QAAX,EAAqB;AAC3C,UAAM7E,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;;AAEA,QAAI,KAAKkI,KAAL,CAAWzU,KAAK,CAACs5B,SAAjB,CAAJ,EAAiC;AAC/B,WAAK1lB,MAAL,CAAY5T,KAAK,CAACs5B,SAAlB;AACA,aAAO,KAAKvsB,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAEDA,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKm7B,mBAAL,EAAZ;AACA,SAAKlnB,MAAL,CAAY5T,KAAK,CAACs5B,SAAlB;AACA,WAAO,KAAKvsB,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDi0B,EAAAA,iBAAiB,CAACrvB,QAAD,EAAWC,QAAX,EAAqB;AACpC,UAAM7E,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA,UAAMqvB,QAAQ,GAAG,EAAjB;AACA,UAAMC,cAAc,GAAG,KAAKP,wBAAL,CAA8BhvB,QAA9B,EAAwCC,QAAxC,CAAvB;AACA,QAAIuvB,cAAc,GAAG,IAArB;;AAEA,QAAI,CAACD,cAAc,CAACJ,WAApB,EAAiC;AAC/BM,MAAAA,QAAQ,EAAE,SAAS;AACjB,gBAAQ,KAAK1vB,KAAL,CAAW1E,IAAnB;AACE,eAAK3H,KAAK,CAACoZ,WAAX;AACE9M,YAAAA,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAAtB;AACA0D,YAAAA,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAAtB;AACA,iBAAKkF,IAAL;;AAEA,gBAAI,KAAK4C,GAAL,CAASrU,KAAK,CAAC+C,KAAf,CAAJ,EAA2B;AACzB+4B,cAAAA,cAAc,GAAG,KAAKJ,wBAAL,CAA8BpvB,QAA9B,EAAwCC,QAAxC,CAAjB;AACA,oBAAMwvB,QAAN;AACD;;AAEDH,YAAAA,QAAQ,CAAC1vB,IAAT,CAAc,KAAKyvB,iBAAL,CAAuBrvB,QAAvB,EAAiCC,QAAjC,CAAd;AACA;;AAEF,eAAKvM,KAAK,CAACq5B,OAAX;AACEuC,YAAAA,QAAQ,CAAC1vB,IAAT,CAAc,KAAKC,aAAL,EAAd;AACA;;AAEF,eAAKnM,KAAK,CAACQ,MAAX;AACE;AACE,oBAAMkH,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,mBAAK2E,IAAL;;AAEA,kBAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AAC9Bq6B,gBAAAA,QAAQ,CAAC1vB,IAAT,CAAc,KAAKkvB,mBAAL,CAAyB1zB,IAAzB,CAAd;AACD,eAFD,MAEO;AACLk0B,gBAAAA,QAAQ,CAAC1vB,IAAT,CAAc,KAAK+uB,2BAAL,CAAiCvzB,IAAjC,CAAd;AACD;;AAED;AACD;;AAEH;AACE,kBAAM,KAAK4O,UAAL,EAAN;AAjCJ;AAmCD;;AAED,UAAIijB,UAAU,CAACsC,cAAD,CAAV,IAA8B,CAACtC,UAAU,CAACuC,cAAD,CAA7C,EAA+D;AAC7D,aAAKlyB,KAAL,CAAWkyB,cAAc,CAACjzB,KAA1B,EAAiC,+CAAjC;AACD,OAFD,MAEO,IAAI,CAAC0wB,UAAU,CAACsC,cAAD,CAAX,IAA+BtC,UAAU,CAACuC,cAAD,CAA7C,EAA+D;AACpE,aAAKlyB,KAAL,CAAWkyB,cAAc,CAACjzB,KAA1B,EAAiC,iDAAiD4wB,mBAAmB,CAACoC,cAAc,CAACl8B,IAAhB,CAApE,GAA4F,GAA7H;AACD,OAFM,MAEA,IAAI,CAAC45B,UAAU,CAACsC,cAAD,CAAX,IAA+B,CAACtC,UAAU,CAACuC,cAAD,CAA9C,EAAgE;AACrE,YAAIrC,mBAAmB,CAACqC,cAAc,CAACn8B,IAAhB,CAAnB,KAA6C85B,mBAAmB,CAACoC,cAAc,CAACl8B,IAAhB,CAApE,EAA2F;AACzF,eAAKiK,KAAL,CAAWkyB,cAAc,CAACjzB,KAA1B,EAAiC,iDAAiD4wB,mBAAmB,CAACoC,cAAc,CAACl8B,IAAhB,CAApE,GAA4F,GAA7H;AACD;AACF;AACF;;AAED,QAAI45B,UAAU,CAACsC,cAAD,CAAd,EAAgC;AAC9Bn0B,MAAAA,IAAI,CAACs0B,eAAL,GAAuBH,cAAvB;AACAn0B,MAAAA,IAAI,CAACu0B,eAAL,GAAuBH,cAAvB;AACD,KAHD,MAGO;AACLp0B,MAAAA,IAAI,CAACm0B,cAAL,GAAsBA,cAAtB;AACAn0B,MAAAA,IAAI,CAACo0B,cAAL,GAAsBA,cAAtB;AACD;;AAEDp0B,IAAAA,IAAI,CAACk0B,QAAL,GAAgBA,QAAhB;;AAEA,QAAI,KAAK3mB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAM,KAAKrL,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,gEAAgE,uCAA7F,CAAN;AACD;;AAED,WAAO0wB,UAAU,CAACsC,cAAD,CAAV,GAA6B,KAAK9uB,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAA7B,GAAoE,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,YAAtB,CAA3E;AACD;;AAEDw0B,EAAAA,eAAe,GAAG;AAChB,UAAM5vB,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,SAAKkF,IAAL;AACA,WAAO,KAAKkqB,iBAAL,CAAuBrvB,QAAvB,EAAiCC,QAAjC,CAAP;AACD;;AAEDJ,EAAAA,aAAa,CAACgwB,sBAAD,EAAyB;AACpC,QAAI,KAAK1nB,KAAL,CAAWzU,KAAK,CAACq5B,OAAjB,CAAJ,EAA+B;AAC7B,aAAO,KAAK9wB,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,SAApC,CAAP;AACD,KAFD,MAEO,IAAI,KAAKgW,KAAL,CAAWzU,KAAK,CAACoZ,WAAjB,CAAJ,EAAmC;AACxC,aAAO,KAAK8iB,eAAL,EAAP;AACD,KAFM,MAEA,IAAI,KAAKjnB,YAAL,CAAkB,GAAlB,KAA0B,KAAKvF,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,MAA0C,EAAxE,EAA4E;AACjF,WAAK8B,WAAL,CAAiBjT,KAAK,CAACoZ,WAAvB;AACA,aAAO,KAAK8iB,eAAL,EAAP;AACD,KAHM,MAGA;AACL,aAAO,MAAM/vB,aAAN,CAAoBgwB,sBAApB,CAAP;AACD;AACF;;AAED7b,EAAAA,gBAAgB,CAAC1S,IAAD,EAAO;AACrB,QAAI,KAAKvB,KAAL,CAAW+vB,cAAf,EAA+B,OAAO,MAAM9b,gBAAN,CAAuB1S,IAAvB,CAAP;AAC/B,UAAMiB,OAAO,GAAG,KAAKI,UAAL,EAAhB;;AAEA,QAAIJ,OAAO,KAAKV,OAAO,CAACuV,MAAxB,EAAgC;AAC9B,aAAO,KAAKiW,YAAL,EAAP;AACD;;AAED,QAAI9qB,OAAO,KAAKV,OAAO,CAACsV,MAApB,IAA8B5U,OAAO,KAAKV,OAAO,CAACgrB,MAAtD,EAA8D;AAC5D,UAAI9nB,iBAAiB,CAACzD,IAAD,CAArB,EAA6B;AAC3B,eAAO,KAAK+sB,WAAL,EAAP;AACD;;AAED,UAAI/sB,IAAI,KAAK,EAAb,EAAiB;AACf,UAAE,KAAKvB,KAAL,CAAW8E,GAAb;AACA,eAAO,KAAK8B,WAAL,CAAiBjT,KAAK,CAACs5B,SAAvB,CAAP;AACD;;AAED,UAAI,CAAC1rB,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAAzB,KAAgCiB,OAAO,KAAKV,OAAO,CAACsV,MAAxD,EAAgE;AAC9D,eAAO,KAAK0W,aAAL,CAAmBvsB,IAAnB,CAAP;AACD;AACF;;AAED,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAKvB,KAAL,CAAWyC,WAA1B,IAAyC,KAAKY,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAA3F,EAA+F;AAC7F,QAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA,aAAO,KAAK8B,WAAL,CAAiBjT,KAAK,CAACoZ,WAAvB,CAAP;AACD;;AAED,WAAO,MAAMkH,gBAAN,CAAuB1S,IAAvB,CAAP;AACD;;AAEDrO,EAAAA,aAAa,CAAC2P,QAAD,EAAW;AACtB,QAAI,KAAKuF,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,YAAMyO,UAAU,GAAG,KAAKA,UAAL,EAAnB;;AAEA,UAAIA,UAAU,KAAKd,OAAO,CAACsV,MAA3B,EAAmC;AACjC,aAAKpX,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACE,eAAhC;AACD,OAFD,MAEO,IAAIY,UAAU,KAAKd,OAAO,CAACuV,MAA3B,EAAmC;AACxC,aAAKrX,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACG,aAAhC;AACD,OAFM,MAEA;AACL,cAAM/O,aAAN,CAAoB2P,QAApB;AACD;;AAED,WAAK7C,KAAL,CAAWyC,WAAX,GAAyB,IAAzB;AACD,KAZD,MAYO,IAAI,KAAK2F,KAAL,CAAWzU,KAAK,CAAC+C,KAAjB,KAA2BmM,QAAQ,KAAKlP,KAAK,CAACoZ,WAAlD,EAA+D;AACpE,WAAK/M,KAAL,CAAWwC,OAAX,CAAmBlF,MAAnB,IAA6B,CAA7B;AACA,WAAK0C,KAAL,CAAWwC,OAAX,CAAmB3C,IAAnB,CAAwBiC,OAAO,CAACgrB,MAAhC;AACA,WAAK9sB,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD,KAJM,MAIA;AACL,aAAO,MAAMvP,aAAN,CAAoB2P,QAApB,CAAP;AACD;AACF;;AAnb+C,CAAlD;;AAubA,MAAMmtB,KAAN,CAAY;AACVp9B,EAAAA,WAAW,CAACiJ,KAAD,EAAQ;AACjB,SAAKo0B,GAAL,GAAW,EAAX;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKt0B,KAAL,GAAaA,KAAb;AACD;;AANS;;AASZ,MAAMu0B,YAAN,CAAmB;AACjBx9B,EAAAA,WAAW,CAAC2K,KAAD,EAAQyG,QAAR,EAAkB;AAC3B,SAAKqsB,UAAL,GAAkB,EAAlB;AACA,SAAKC,gBAAL,GAAwB,IAAIl9B,GAAJ,EAAxB;AACA,SAAKmK,KAAL,GAAaA,KAAb;AACA,SAAKyG,QAAL,GAAgBA,QAAhB;AACD;;AAED,MAAIusB,UAAJ,GAAiB;AACf,WAAO,CAAC,KAAKC,eAAL,GAAuB30B,KAAvB,GAA+B5C,cAAhC,IAAkD,CAAzD;AACD;;AAED,MAAI+J,WAAJ,GAAkB;AAChB,WAAO,CAAC,KAAKwtB,eAAL,GAAuB30B,KAAvB,GAA+B1C,eAAhC,IAAmD,CAA1D;AACD;;AAED,MAAIs3B,OAAJ,GAAc;AACZ,WAAO,CAAC,KAAKD,eAAL,GAAuB30B,KAAvB,GAA+B3C,WAAhC,IAA+C,CAAtD;AACD;;AAED,MAAIw3B,UAAJ,GAAiB;AACf,WAAO,CAAC,KAAKC,gBAAL,GAAwB90B,KAAxB,GAAgCvC,WAAjC,IAAgD,CAAvD;AACD;;AAED,MAAIgH,gBAAJ,GAAuB;AACrB,WAAO,CAAC,KAAKqwB,gBAAL,GAAwB90B,KAAxB,GAAgCtC,kBAAjC,IAAuD,CAA9D;AACD;;AAED,MAAIq3B,kBAAJ,GAAyB;AACvB,WAAO,CAAC,KAAKD,gBAAL,GAAwB90B,KAAxB,GAAgC5C,cAAjC,IAAmD,CAA1D;AACD;;AAED,MAAI43B,mBAAJ,GAA0B;AACxB,WAAO,KAAKC,0BAAL,CAAgC,KAAKC,YAAL,EAAhC,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACn1B,KAAD,EAAQ;AACjB,WAAO,IAAIm0B,KAAJ,CAAUn0B,KAAV,CAAP;AACD;;AAEDuO,EAAAA,KAAK,CAACvO,KAAD,EAAQ;AACX,SAAKw0B,UAAL,CAAgBxwB,IAAhB,CAAqB,KAAKmxB,WAAL,CAAiBn1B,KAAjB,CAArB;AACD;;AAED0O,EAAAA,IAAI,GAAG;AACL,SAAK8lB,UAAL,CAAgB1tB,GAAhB;AACD;;AAEDmuB,EAAAA,0BAA0B,CAAC/tB,KAAD,EAAQ;AAChC,WAAO,CAAC,EAAEA,KAAK,CAAClH,KAAN,GAAc5C,cAAd,IAAgC,CAAC,KAAK+K,QAAN,IAAkBjB,KAAK,CAAClH,KAAN,GAAc7C,aAAlE,CAAR;AACD;;AAEDmR,EAAAA,WAAW,CAAC7W,IAAD,EAAOoK,WAAP,EAAoBoH,GAApB,EAAyB;AAClC,QAAI/B,KAAK,GAAG,KAAKguB,YAAL,EAAZ;;AAEA,QAAIrzB,WAAW,GAAGzD,kBAAd,IAAoCyD,WAAW,GAAGxD,mBAAtD,EAA2E;AACzE,WAAK+2B,yBAAL,CAA+BluB,KAA/B,EAAsCzP,IAAtC,EAA4CoK,WAA5C,EAAyDoH,GAAzD;;AAEA,UAAIpH,WAAW,GAAGxD,mBAAlB,EAAuC;AACrC6I,QAAAA,KAAK,CAACotB,SAAN,CAAgBtwB,IAAhB,CAAqBvM,IAArB;AACD,OAFD,MAEO;AACLyP,QAAAA,KAAK,CAACmtB,OAAN,CAAcrwB,IAAd,CAAmBvM,IAAnB;AACD;;AAED,UAAIoK,WAAW,GAAGzD,kBAAlB,EAAsC;AACpC,aAAKi3B,kBAAL,CAAwBnuB,KAAxB,EAA+BzP,IAA/B;AACD;AACF,KAZD,MAYO,IAAIoK,WAAW,GAAG1D,cAAlB,EAAkC;AACvC,WAAK,IAAI+K,CAAC,GAAG,KAAKsrB,UAAL,CAAgB/yB,MAAhB,GAAyB,CAAtC,EAAyCyH,CAAC,IAAI,CAA9C,EAAiD,EAAEA,CAAnD,EAAsD;AACpDhC,QAAAA,KAAK,GAAG,KAAKstB,UAAL,CAAgBtrB,CAAhB,CAAR;AACA,aAAKksB,yBAAL,CAA+BluB,KAA/B,EAAsCzP,IAAtC,EAA4CoK,WAA5C,EAAyDoH,GAAzD;AACA/B,QAAAA,KAAK,CAACktB,GAAN,CAAUpwB,IAAV,CAAevM,IAAf;AACA,aAAK49B,kBAAL,CAAwBnuB,KAAxB,EAA+BzP,IAA/B;AACA,YAAIyP,KAAK,CAAClH,KAAN,GAAcnC,SAAlB,EAA6B;AAC9B;AACF;;AAED,QAAI,KAAKsK,QAAL,IAAiBjB,KAAK,CAAClH,KAAN,GAAc7C,aAAnC,EAAkD;AAChD,WAAKs3B,gBAAL,CAAsBa,MAAtB,CAA6B79B,IAA7B;AACD;AACF;;AAED49B,EAAAA,kBAAkB,CAACnuB,KAAD,EAAQzP,IAAR,EAAc;AAC9B,QAAI,KAAK0Q,QAAL,IAAiBjB,KAAK,CAAClH,KAAN,GAAc7C,aAAnC,EAAkD;AAChD,WAAKs3B,gBAAL,CAAsBa,MAAtB,CAA6B79B,IAA7B;AACD;AACF;;AAED29B,EAAAA,yBAAyB,CAACluB,KAAD,EAAQzP,IAAR,EAAcoK,WAAd,EAA2BoH,GAA3B,EAAgC;AACvD,QAAI,KAAKssB,mBAAL,CAAyBruB,KAAzB,EAAgCzP,IAAhC,EAAsCoK,WAAtC,CAAJ,EAAwD;AACtD,WAAKH,KAAL,CAAWuH,GAAX,EAAiB,eAAcxR,IAAK,6BAApC;AACD;AACF;;AAED89B,EAAAA,mBAAmB,CAACruB,KAAD,EAAQzP,IAAR,EAAcoK,WAAd,EAA2B;AAC5C,QAAI,EAAEA,WAAW,GAAG5D,eAAhB,CAAJ,EAAsC,OAAO,KAAP;;AAEtC,QAAI4D,WAAW,GAAGzD,kBAAlB,EAAsC;AACpC,aAAO8I,KAAK,CAACmtB,OAAN,CAAcld,OAAd,CAAsB1f,IAAtB,IAA8B,CAAC,CAA/B,IAAoCyP,KAAK,CAACotB,SAAN,CAAgBnd,OAAhB,CAAwB1f,IAAxB,IAAgC,CAAC,CAArE,IAA0EyP,KAAK,CAACktB,GAAN,CAAUjd,OAAV,CAAkB1f,IAAlB,IAA0B,CAAC,CAA5G;AACD;;AAED,QAAIoK,WAAW,GAAGxD,mBAAlB,EAAuC;AACrC,aAAO6I,KAAK,CAACmtB,OAAN,CAAcld,OAAd,CAAsB1f,IAAtB,IAA8B,CAAC,CAA/B,IAAoC,CAAC,KAAKw9B,0BAAL,CAAgC/tB,KAAhC,CAAD,IAA2CA,KAAK,CAACktB,GAAN,CAAUjd,OAAV,CAAkB1f,IAAlB,IAA0B,CAAC,CAAjH;AACD;;AAED,WAAOyP,KAAK,CAACmtB,OAAN,CAAcld,OAAd,CAAsB1f,IAAtB,IAA8B,CAAC,CAA/B,IAAoC,EAAEyP,KAAK,CAAClH,KAAN,GAAcxC,kBAAd,IAAoC0J,KAAK,CAACmtB,OAAN,CAAc,CAAd,MAAqB58B,IAA3D,CAApC,IAAwG,CAAC,KAAKw9B,0BAAL,CAAgC/tB,KAAhC,CAAD,IAA2CA,KAAK,CAACotB,SAAN,CAAgBnd,OAAhB,CAAwB1f,IAAxB,IAAgC,CAAC,CAA3L;AACD;;AAED+9B,EAAAA,gBAAgB,CAAC7oB,EAAD,EAAK;AACnB,QAAI,KAAK6nB,UAAL,CAAgB,CAAhB,EAAmBH,OAAnB,CAA2Bld,OAA3B,CAAmCxK,EAAE,CAAClV,IAAtC,MAAgD,CAAC,CAAjD,IAAsD,KAAK+8B,UAAL,CAAgB,CAAhB,EAAmBJ,GAAnB,CAAuBjd,OAAvB,CAA+BxK,EAAE,CAAClV,IAAlC,MAA4C,CAAC,CAAnG,IAAwG,KAAK+8B,UAAL,CAAgB,CAAhB,EAAmBF,SAAnB,CAA6Bnd,OAA7B,CAAqCxK,EAAE,CAAClV,IAAxC,MAAkD,CAAC,CAA/J,EAAkK;AAChK,WAAKg9B,gBAAL,CAAsB78B,GAAtB,CAA0B+U,EAAE,CAAClV,IAA7B,EAAmCkV,EAAE,CAAChM,KAAtC;AACD;AACF;;AAEDu0B,EAAAA,YAAY,GAAG;AACb,WAAO,KAAKV,UAAL,CAAgB,KAAKA,UAAL,CAAgB/yB,MAAhB,GAAyB,CAAzC,CAAP;AACD;;AAEDkzB,EAAAA,eAAe,GAAG;AAChB,SAAK,IAAIzrB,CAAC,GAAG,KAAKsrB,UAAL,CAAgB/yB,MAAhB,GAAyB,CAAtC,GAA0CyH,CAAC,EAA3C,EAA+C;AAC7C,YAAMhC,KAAK,GAAG,KAAKstB,UAAL,CAAgBtrB,CAAhB,CAAd;;AAEA,UAAIhC,KAAK,CAAClH,KAAN,GAAcnC,SAAlB,EAA6B;AAC3B,eAAOqJ,KAAP;AACD;AACF;AACF;;AAED4tB,EAAAA,gBAAgB,GAAG;AACjB,SAAK,IAAI5rB,CAAC,GAAG,KAAKsrB,UAAL,CAAgB/yB,MAAhB,GAAyB,CAAtC,GAA0CyH,CAAC,EAA3C,EAA+C;AAC7C,YAAMhC,KAAK,GAAG,KAAKstB,UAAL,CAAgBtrB,CAAhB,CAAd;;AAEA,UAAI,CAAChC,KAAK,CAAClH,KAAN,GAAcnC,SAAd,IAA2BqJ,KAAK,CAAClH,KAAN,GAAcrC,WAA1C,KAA0D,EAAEuJ,KAAK,CAAClH,KAAN,GAAczC,WAAhB,CAA9D,EAA4F;AAC1F,eAAO2J,KAAP;AACD;AACF;AACF;;AAxIgB;;AA4InB,MAAMuuB,eAAN,SAA8BtB,KAA9B,CAAoC;AAClCp9B,EAAAA,WAAW,CAAC,GAAG2+B,IAAJ,EAAU;AACnB,UAAM,GAAGA,IAAT;AACA,SAAK59B,KAAL,GAAa,EAAb;AACA,SAAK69B,KAAL,GAAa,EAAb;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,kBAAL,GAA0B,EAA1B;AACD;;AARiC;;AAYpC,MAAMC,sBAAN,SAAqCxB,YAArC,CAAkD;AAChDY,EAAAA,WAAW,CAACn1B,KAAD,EAAQ;AACjB,WAAO,IAAIy1B,eAAJ,CAAoBz1B,KAApB,CAAP;AACD;;AAEDsO,EAAAA,WAAW,CAAC7W,IAAD,EAAOoK,WAAP,EAAoBoH,GAApB,EAAyB;AAClC,UAAM/B,KAAK,GAAG,KAAKguB,YAAL,EAAd;;AAEA,QAAIrzB,WAAW,GAAGnD,yBAAlB,EAA6C;AAC3C,WAAK22B,kBAAL,CAAwBnuB,KAAxB,EAA+BzP,IAA/B;AACAyP,MAAAA,KAAK,CAAC4uB,kBAAN,CAAyB9xB,IAAzB,CAA8BvM,IAA9B;AACA;AACD;;AAED,UAAM6W,WAAN,CAAkB,GAAGwJ,SAArB;;AAEA,QAAIjW,WAAW,GAAG3D,cAAlB,EAAkC;AAChC,UAAI,EAAE2D,WAAW,GAAG5D,eAAhB,CAAJ,EAAsC;AACpC,aAAKm3B,yBAAL,CAA+BluB,KAA/B,EAAsCzP,IAAtC,EAA4CoK,WAA5C,EAAyDoH,GAAzD;AACA,aAAKosB,kBAAL,CAAwBnuB,KAAxB,EAA+BzP,IAA/B;AACD;;AAEDyP,MAAAA,KAAK,CAACpP,KAAN,CAAYkM,IAAZ,CAAiBvM,IAAjB;AACD;;AAED,QAAIoK,WAAW,GAAGrD,kBAAlB,EAAsC0I,KAAK,CAACyuB,KAAN,CAAY3xB,IAAZ,CAAiBvM,IAAjB;AACtC,QAAIoK,WAAW,GAAGpD,wBAAlB,EAA4CyI,KAAK,CAAC0uB,UAAN,CAAiB5xB,IAAjB,CAAsBvM,IAAtB;AAC5C,QAAIoK,WAAW,GAAGtD,gBAAlB,EAAoC2I,KAAK,CAAC2uB,OAAN,CAAc7xB,IAAd,CAAmBvM,IAAnB;AACrC;;AAED89B,EAAAA,mBAAmB,CAACruB,KAAD,EAAQzP,IAAR,EAAcoK,WAAd,EAA2B;AAC5C,QAAIqF,KAAK,CAACyuB,KAAN,CAAYxe,OAAZ,CAAoB1f,IAApB,IAA4B,CAAC,CAAjC,EAAoC;AAClC,UAAIoK,WAAW,GAAGrD,kBAAlB,EAAsC;AACpC,cAAMw3B,OAAO,GAAG,CAAC,EAAEn0B,WAAW,GAAGpD,wBAAhB,CAAjB;AACA,cAAMw3B,QAAQ,GAAG/uB,KAAK,CAAC0uB,UAAN,CAAiBze,OAAjB,CAAyB1f,IAAzB,IAAiC,CAAC,CAAnD;AACA,eAAOu+B,OAAO,KAAKC,QAAnB;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAIp0B,WAAW,GAAGtD,gBAAd,IAAkC2I,KAAK,CAAC2uB,OAAN,CAAc1e,OAAd,CAAsB1f,IAAtB,IAA8B,CAAC,CAArE,EAAwE;AACtE,UAAIyP,KAAK,CAACmtB,OAAN,CAAcld,OAAd,CAAsB1f,IAAtB,IAA8B,CAAC,CAAnC,EAAsC;AACpC,eAAO,CAAC,EAAEoK,WAAW,GAAG5D,eAAhB,CAAR;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;AAED,QAAI4D,WAAW,GAAG3D,cAAd,IAAgCgJ,KAAK,CAACpP,KAAN,CAAYqf,OAAZ,CAAoB1f,IAApB,IAA4B,CAAC,CAAjE,EAAoE;AAClE,aAAO,IAAP;AACD;;AAED,WAAO,MAAM89B,mBAAN,CAA0B,GAAGzd,SAA7B,CAAP;AACD;;AAED0d,EAAAA,gBAAgB,CAAC7oB,EAAD,EAAK;AACnB,QAAI,KAAK6nB,UAAL,CAAgB,CAAhB,EAAmB18B,KAAnB,CAAyBqf,OAAzB,CAAiCxK,EAAE,CAAClV,IAApC,MAA8C,CAAC,CAA/C,IAAoD,KAAK+8B,UAAL,CAAgB,CAAhB,EAAmBsB,kBAAnB,CAAsC3e,OAAtC,CAA8CxK,EAAE,CAAClV,IAAjD,MAA2D,CAAC,CAApH,EAAuH;AACrH,YAAM+9B,gBAAN,CAAuB7oB,EAAvB;AACD;AACF;;AA5D+C;;AAgElD,SAASupB,OAAT,CAAiBC,CAAjB,EAAoB;AAClB,MAAIA,CAAC,IAAI,IAAT,EAAe;AACb,UAAM,IAAI9qB,KAAJ,CAAW,cAAa8qB,CAAE,SAA1B,CAAN;AACD;;AAED,SAAOA,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBD,CAAhB,EAAmB;AACjB,MAAI,CAACA,CAAL,EAAQ;AACN,UAAM,IAAI9qB,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAED,SAASgrB,mBAAT,CAA6B9/B,KAA7B,EAAoC;AAClC,UAAQA,KAAR;AACE,SAAK,KAAL;AACE,aAAO,cAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,OAAL;AACE,aAAO,gBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,QAAL;AACE,aAAO,iBAAP;;AAEF,SAAK,WAAL;AACE,aAAO,oBAAP;;AAEF,SAAK,SAAL;AACE,aAAO,kBAAP;;AAEF;AACE,aAAOoU,SAAP;AAhCJ;AAkCD;;AAED,IAAI2rB,UAAU,GAAIz2B,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACvD02B,EAAAA,eAAe,GAAG;AAChB,WAAOR,sBAAP;AACD;;AAEDS,EAAAA,cAAc,GAAG;AACf,WAAO,KAAKjqB,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAP;AACD;;AAEDg/B,EAAAA,4BAA4B,GAAG;AAC7B,SAAKltB,IAAL;AACA,WAAO,CAAC,KAAKmtB,qBAAL,EAAD,IAAiC,CAAC,KAAKnqB,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAlC,IAA8D,CAAC,KAAK6T,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAA/D,IAA2F,CAAC,KAAK4T,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAA5F,IAAuH,CAAC,KAAKyT,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,CAAxH,IAAgJ,CAAC,KAAK4S,KAAL,CAAWzU,KAAK,CAACmB,QAAjB,CAAjJ,IAA+K,CAAC,KAAKsT,KAAL,CAAWzU,KAAK,CAACgC,IAAjB,CAAvL;AACD;;AAED68B,EAAAA,eAAe,CAACC,gBAAD,EAAmB;AAChC,QAAI,CAAC,KAAKrqB,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAL,EAA6B;AAC3B,aAAOkT,SAAP;AACD;;AAED,UAAMksB,QAAQ,GAAG,KAAK1yB,KAAL,CAAW5N,KAA5B;;AAEA,QAAIqgC,gBAAgB,CAACzf,OAAjB,CAAyB0f,QAAzB,MAAuC,CAAC,CAAxC,IAA6C,KAAKC,UAAL,CAAgB,KAAKL,4BAAL,CAAkCM,IAAlC,CAAuC,IAAvC,CAAhB,CAAjD,EAAgH;AAC9G,aAAOF,QAAP;AACD;;AAED,WAAOlsB,SAAP;AACD;;AAEDqsB,EAAAA,gBAAgB,CAACJ,gBAAD,EAAmB;AACjC,UAAMK,SAAS,GAAG7gC,MAAM,CAAC8gC,MAAP,CAAc,IAAd,CAAlB;;AAEA,WAAO,IAAP,EAAa;AACX,YAAM9yB,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,YAAMk2B,QAAQ,GAAG,KAAKF,eAAL,CAAqBC,gBAArB,CAAjB;AACA,UAAI,CAACC,QAAL,EAAe;;AAEf,UAAIzgC,MAAM,CAAC+gC,cAAP,CAAsBjc,IAAtB,CAA2B+b,SAA3B,EAAsCJ,QAAtC,CAAJ,EAAqD;AACnD,aAAKn1B,KAAL,CAAW0C,QAAX,EAAsB,wBAAuByyB,QAAS,GAAtD;AACD;;AAEDI,MAAAA,SAAS,CAACJ,QAAD,CAAT,GAAsB,IAAtB;AACD;;AAED,WAAOI,SAAP;AACD;;AAEDG,EAAAA,kBAAkB,CAAC13B,IAAD,EAAO;AACvB,YAAQA,IAAR;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAK6M,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAP;;AAEF,WAAK,uBAAL;AACE,eAAO,KAAK+T,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAP;;AAEF,WAAK,mBAAL;AACE,eAAO,KAAKiU,KAAL,CAAWzU,KAAK,CAACO,QAAjB,CAAP;;AAEF,WAAK,2BAAL;AACE,eAAO,KAAK0U,YAAL,CAAkB,GAAlB,CAAP;AAZJ;;AAeA,UAAM,IAAI1B,KAAJ,CAAU,aAAV,CAAN;AACD;;AAEDgsB,EAAAA,WAAW,CAAC33B,IAAD,EAAO43B,YAAP,EAAqB;AAC9B,UAAM9hB,MAAM,GAAG,EAAf;;AAEA,WAAO,CAAC,KAAK4hB,kBAAL,CAAwB13B,IAAxB,CAAR,EAAuC;AACrC8V,MAAAA,MAAM,CAACxR,IAAP,CAAYszB,YAAY,EAAxB;AACD;;AAED,WAAO9hB,MAAP;AACD;;AAED+hB,EAAAA,oBAAoB,CAAC73B,IAAD,EAAO43B,YAAP,EAAqB;AACvC,WAAOpB,OAAO,CAAC,KAAKsB,0BAAL,CAAgC93B,IAAhC,EAAsC43B,YAAtC,EAAoD,IAApD,CAAD,CAAd;AACD;;AAEDE,EAAAA,0BAA0B,CAAC93B,IAAD,EAAO43B,YAAP,EAAqBG,aAArB,EAAoC;AAC5D,UAAMjiB,MAAM,GAAG,EAAf;;AAEA,WAAO,IAAP,EAAa;AACX,UAAI,KAAK4hB,kBAAL,CAAwB13B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,YAAMgZ,OAAO,GAAG4e,YAAY,EAA5B;;AAEA,UAAI5e,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAO/N,SAAP;AACD;;AAED6K,MAAAA,MAAM,CAACxR,IAAP,CAAY0U,OAAZ;;AAEA,UAAI,KAAKvM,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAJ,EAA2B;AACzB;AACD;;AAED,UAAI,KAAKw+B,kBAAL,CAAwB13B,IAAxB,CAAJ,EAAmC;AACjC;AACD;;AAED,UAAI+3B,aAAJ,EAAmB;AACjB,aAAK/rB,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;;AAED,aAAO+R,SAAP;AACD;;AAED,WAAO6K,MAAP;AACD;;AAEDkiB,EAAAA,oBAAoB,CAACh4B,IAAD,EAAO43B,YAAP,EAAqBK,OAArB,EAA8BC,cAA9B,EAA8C;AAChE,QAAI,CAACA,cAAL,EAAqB;AACnB,UAAID,OAAJ,EAAa;AACX,aAAKjsB,MAAL,CAAY5T,KAAK,CAACM,QAAlB;AACD,OAFD,MAEO;AACL,aAAKiZ,gBAAL,CAAsB,GAAtB;AACD;AACF;;AAED,UAAMmE,MAAM,GAAG,KAAK+hB,oBAAL,CAA0B73B,IAA1B,EAAgC43B,YAAhC,CAAf;;AAEA,QAAIK,OAAJ,EAAa;AACX,WAAKjsB,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACD,KAFD,MAEO;AACL,WAAKgZ,gBAAL,CAAsB,GAAtB;AACD;;AAED,WAAOmE,MAAP;AACD;;AAEDqiB,EAAAA,iBAAiB,GAAG;AAClB,UAAMr4B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAAC2E,OAAlB;AACA,SAAKiP,MAAL,CAAY5T,KAAK,CAACY,MAAlB;;AAEA,QAAI,CAAC,KAAK6T,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAL,EAA+B;AAC7B,WAAKwJ,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,oDAA7B;AACD;;AAEDnB,IAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKlP,aAAL,EAAhB;AACA,SAAKyH,MAAL,CAAY5T,KAAK,CAACa,MAAlB;;AAEA,QAAI,KAAKwT,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAJ,EAAyB;AACvBwG,MAAAA,IAAI,CAACs4B,SAAL,GAAiB,KAAKC,iBAAL,CAAuB,IAAvB,CAAjB;AACD;;AAED,QAAI,KAAKhrB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKi0B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKnzB,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDu4B,EAAAA,iBAAiB,CAACE,kBAAD,EAAqB;AACpC,QAAI5F,MAAM,GAAG,KAAKzlB,eAAL,EAAb;;AAEA,WAAO,KAAKT,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAP,EAA4B;AAC1B,YAAMwG,IAAI,GAAG,KAAK04B,eAAL,CAAqB7F,MAArB,CAAb;AACA7yB,MAAAA,IAAI,CAACqa,IAAL,GAAYwY,MAAZ;AACA7yB,MAAAA,IAAI,CAAC+Q,KAAL,GAAa,KAAK3D,eAAL,CAAqBqrB,kBAArB,CAAb;AACA5F,MAAAA,MAAM,GAAG,KAAKxtB,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAT;AACD;;AAED,WAAO6yB,MAAP;AACD;;AAED8F,EAAAA,oBAAoB,GAAG;AACrB,UAAM34B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAAC44B,QAAL,GAAgB,KAAKL,iBAAL,CAAuB,KAAvB,CAAhB;;AAEA,QAAI,CAAC,KAAKrB,qBAAL,EAAD,IAAiC,KAAK3pB,YAAL,CAAkB,GAAlB,CAArC,EAA6D;AAC3DvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKi0B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKnzB,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED64B,EAAAA,wBAAwB,CAACC,GAAD,EAAM;AAC5B,SAAK/uB,IAAL;AACA,UAAM/J,IAAI,GAAG,KAAK04B,eAAL,CAAqBI,GAArB,CAAb;AACA94B,IAAAA,IAAI,CAAC+4B,aAAL,GAAqBD,GAArB;AACA94B,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAKmrB,qBAAL,CAA2B,KAA3B,CAAtB;AACA,WAAO,KAAK3zB,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDi5B,EAAAA,mBAAmB,GAAG;AACpB,UAAMj5B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDk5B,EAAAA,gBAAgB,GAAG;AACjB,UAAMl5B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAACiF,OAAlB;;AAEA,QAAI,KAAKwP,KAAL,CAAWzU,KAAK,CAAC2E,OAAjB,CAAJ,EAA+B;AAC7B+C,MAAAA,IAAI,CAACm5B,QAAL,GAAgB,KAAKd,iBAAL,EAAhB;AACD,KAFD,MAEO;AACLr4B,MAAAA,IAAI,CAACm5B,QAAL,GAAgB,KAAKZ,iBAAL,CAAuB,IAAvB,CAAhB;AACD;;AAED,WAAO,KAAKlzB,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDo5B,EAAAA,oBAAoB,GAAG;AACrB,UAAMp5B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKohC,mBAAL,CAAyBr5B,IAAI,CAACmB,KAA9B,CAAZ;AACAnB,IAAAA,IAAI,CAACs5B,UAAL,GAAkB,KAAKC,kBAAL,CAAwBjhC,KAAK,CAACyE,QAA9B,CAAlB;AACAiD,IAAAA,IAAI,CAACqP,OAAL,GAAe,KAAKkqB,kBAAL,CAAwBjhC,KAAK,CAAC6B,EAA9B,CAAf;AACA,WAAO,KAAKkL,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDw5B,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAKjsB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,KAAKksB,qBAAL,EAAP;AACD;AACF;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,UAAMz5B,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAKmI,YAAL,CAAkB,GAAlB,KAA0B,KAAKR,KAAL,CAAWzU,KAAK,CAACoZ,WAAjB,CAA9B,EAA6D;AAC3D,WAAK3H,IAAL;AACD,KAFD,MAEO;AACL,WAAK6E,UAAL;AACD;;AAED5O,IAAAA,IAAI,CAACgC,MAAL,GAAc,KAAKk2B,oBAAL,CAA0B,2BAA1B,EAAuD,KAAKkB,oBAAL,CAA0B7B,IAA1B,CAA+B,IAA/B,CAAvD,EAA6F,KAA7F,EAAoG,IAApG,CAAd;AACA,WAAO,KAAKlyB,UAAL,CAAgBrF,IAAhB,EAAsB,4BAAtB,CAAP;AACD;;AAED05B,EAAAA,6BAA6B,GAAG;AAC9B,QAAI,KAAKnnB,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAACkE,MAApC,EAA4C;AAC1C,WAAKuN,IAAL;AACA,aAAO,KAAK4uB,oBAAL,EAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAEDgB,EAAAA,eAAe,CAACC,WAAD,EAAcC,SAAd,EAAyB;AACtC,UAAMC,mBAAmB,GAAGF,WAAW,KAAKthC,KAAK,CAACqB,KAAlD;AACAkgC,IAAAA,SAAS,CAACt1B,cAAV,GAA2B,KAAKi1B,wBAAL,EAA3B;AACA,SAAKttB,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA2gC,IAAAA,SAAS,CAACE,UAAV,GAAuB,KAAKC,8BAAL,EAAvB;;AAEA,QAAIF,mBAAJ,EAAyB;AACvBD,MAAAA,SAAS,CAAChsB,cAAV,GAA2B,KAAKosB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD,KAFD,MAEO,IAAI,KAAK7sB,KAAL,CAAW6sB,WAAX,CAAJ,EAA6B;AAClCC,MAAAA,SAAS,CAAChsB,cAAV,GAA2B,KAAKosB,oCAAL,CAA0CL,WAA1C,CAA3B;AACD;AACF;;AAEDI,EAAAA,8BAA8B,GAAG;AAC/B,WAAO,KAAKE,gBAAL,CAAsB5hC,KAAK,CAACa,MAA5B,EAAoC,EAApC,EAAwC4K,GAAxC,CAA4CxD,OAAO,IAAI;AAC5D,UAAIA,OAAO,CAACN,IAAR,KAAiB,YAAjB,IAAiCM,OAAO,CAACN,IAAR,KAAiB,aAAlD,IAAmEM,OAAO,CAACN,IAAR,KAAiB,eAApF,IAAuGM,OAAO,CAACN,IAAR,KAAiB,cAA5H,EAA4I;AAC1I,aAAKiC,KAAL,CAAW3B,OAAO,CAACY,KAAnB,EAA0B,8EAA+E,eAAcZ,OAAO,CAACN,IAAK,EAApI;AACD;;AAED,aAAOM,OAAP;AACD,KANM,CAAP;AAOD;;AAED45B,EAAAA,0BAA0B,GAAG;AAC3B,QAAI,CAAC,KAAKxtB,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAL,EAA4B;AAC1B,WAAK2U,SAAL;AACD;AACF;;AAEDqsB,EAAAA,sBAAsB,CAACl6B,IAAD,EAAOF,IAAP,EAAa;AACjC,SAAK25B,eAAL,CAAqBrhC,KAAK,CAACgB,KAA3B,EAAkC0G,IAAlC;AACA,SAAKm6B,0BAAL;AACA,WAAO,KAAK90B,UAAL,CAAgBrF,IAAhB,EAAsBE,IAAtB,CAAP;AACD;;AAEDm6B,EAAAA,+BAA+B,GAAG;AAChC,SAAKtwB,IAAL;AACA,WAAO,KAAK4C,GAAL,CAASrU,KAAK,CAACL,IAAf,KAAwB,KAAK8U,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAA/B;AACD;;AAEDghC,EAAAA,wBAAwB,CAACt6B,IAAD,EAAO;AAC7B,QAAI,EAAE,KAAK+M,KAAL,CAAWzU,KAAK,CAACM,QAAjB,KAA8B,KAAK2hC,WAAL,CAAiB,KAAKF,+BAAL,CAAqC9C,IAArC,CAA0C,IAA1C,CAAjB,CAAhC,CAAJ,EAAwG;AACtG,aAAOpsB,SAAP;AACD;;AAED,SAAKe,MAAL,CAAY5T,KAAK,CAACM,QAAlB;AACA,UAAMuU,EAAE,GAAG,KAAKC,eAAL,EAAX;AACAD,IAAAA,EAAE,CAACU,cAAH,GAAoB,KAAKmrB,qBAAL,EAApB;AACA,SAAKlrB,gBAAL,CAAsBX,EAAtB;AACA,SAAKjB,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACAmH,IAAAA,IAAI,CAAC+5B,UAAL,GAAkB,CAAC5sB,EAAD,CAAlB;AACA,UAAMlN,IAAI,GAAG,KAAKu6B,wBAAL,EAAb;AACA,QAAIv6B,IAAJ,EAAUD,IAAI,CAAC6N,cAAL,GAAsB5N,IAAtB;AACV,SAAKk6B,0BAAL;AACA,WAAO,KAAK90B,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDy6B,EAAAA,gCAAgC,CAACz6B,IAAD,EAAO06B,QAAP,EAAiB;AAC/C,QAAI,KAAK/tB,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8BuG,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AAC9B,UAAMkoB,OAAO,GAAG36B,IAAhB;;AAEA,QAAI,CAAC06B,QAAD,KAAc,KAAK3tB,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAKqU,YAAL,CAAkB,GAAlB,CAA1C,CAAJ,EAAuE;AACrE,YAAMpN,MAAM,GAAGw6B,OAAf;AACA,WAAKhB,eAAL,CAAqBrhC,KAAK,CAACgB,KAA3B,EAAkC6G,MAAlC;AACA,WAAKg6B,0BAAL;AACA,aAAO,KAAK90B,UAAL,CAAgBlF,MAAhB,EAAwB,mBAAxB,CAAP;AACD,KALD,MAKO;AACL,YAAM2T,QAAQ,GAAG6mB,OAAjB;AACA,UAAID,QAAJ,EAAc5mB,QAAQ,CAAC4mB,QAAT,GAAoB,IAApB;AACd,YAAMz6B,IAAI,GAAG,KAAKu6B,wBAAL,EAAb;AACA,UAAIv6B,IAAJ,EAAU6T,QAAQ,CAACjG,cAAT,GAA0B5N,IAA1B;AACV,WAAKk6B,0BAAL;AACA,aAAO,KAAK90B,UAAL,CAAgByO,QAAhB,EAA0B,qBAA1B,CAAP;AACD;AACF;;AAED8mB,EAAAA,iBAAiB,GAAG;AAClB,UAAM56B,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAK2H,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAKqU,YAAL,CAAkB,GAAlB,CAAhC,EAAwD;AACtD,aAAO,KAAK6sB,sBAAL,CAA4B,4BAA5B,EAA0Dp6B,IAA1D,CAAP;AACD;;AAED,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACqE,IAAjB,CAAJ,EAA4B;AAC1B,YAAMwQ,EAAE,GAAG,KAAK/H,SAAL,EAAX;AACA,WAAK2E,IAAL;;AAEA,UAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAKqU,YAAL,CAAkB,GAAlB,CAAhC,EAAwD;AACtD,eAAO,KAAK6sB,sBAAL,CAA4B,iCAA5B,EAA+Dp6B,IAA/D,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,IAAI,CAAC+C,GAAL,GAAW,KAAK0R,gBAAL,CAAsBtH,EAAtB,EAA0B,KAA1B,CAAX;AACA,eAAO,KAAKstB,gCAAL,CAAsCz6B,IAAtC,EAA4C,KAA5C,CAAP;AACD;AACF;;AAED,UAAM06B,QAAQ,GAAG,CAAC,CAAC,KAAKvD,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAnB;AACA,UAAM0D,GAAG,GAAG,KAAKP,wBAAL,CAA8Bt6B,IAA9B,CAAZ;;AAEA,QAAI66B,GAAJ,EAAS;AACP,UAAIH,QAAJ,EAAc16B,IAAI,CAAC06B,QAAL,GAAgB,IAAhB;AACd,aAAOG,GAAP;AACD;;AAED,SAAK5gB,iBAAL,CAAuBja,IAAvB;AACA,WAAO,KAAKy6B,gCAAL,CAAsCz6B,IAAtC,EAA4C06B,QAA5C,CAAP;AACD;;AAEDI,EAAAA,kBAAkB,GAAG;AACnB,UAAM96B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACqgB,OAAL,GAAe,KAAK0a,wBAAL,EAAf;AACA,WAAO,KAAK11B,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED+6B,EAAAA,wBAAwB,GAAG;AACzB,SAAK7uB,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACA,UAAMunB,OAAO,GAAG,KAAKwX,WAAL,CAAiB,aAAjB,EAAgC,KAAK+C,iBAAL,CAAuBrD,IAAvB,CAA4B,IAA5B,CAAhC,CAAhB;AACA,SAAKrrB,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,WAAOqnB,OAAP;AACD;;AAED2a,EAAAA,qBAAqB,GAAG;AACtB,SAAKjxB,IAAL;;AAEA,QAAI,KAAK4C,GAAL,CAASrU,KAAK,CAAC4C,OAAf,CAAJ,EAA6B;AAC3B,aAAO,KAAKqT,YAAL,CAAkB,UAAlB,CAAP;AACD;;AAED,QAAI,KAAKA,YAAL,CAAkB,UAAlB,CAAJ,EAAmC;AACjC,WAAKxE,IAAL;AACD;;AAED,QAAI,CAAC,KAAKgD,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAAL,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,SAAKmR,IAAL;;AAEA,QAAI,CAAC,KAAKitB,cAAL,EAAL,EAA4B;AAC1B,aAAO,KAAP;AACD;;AAED,SAAKjtB,IAAL;AACA,WAAO,KAAKgD,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,CAAP;AACD;;AAED49B,EAAAA,0BAA0B,GAAG;AAC3B,UAAMj7B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAAC/H,IAAL,GAAY,KAAKohC,mBAAL,CAAyBr5B,IAAI,CAACmB,KAA9B,CAAZ;AACAnB,IAAAA,IAAI,CAACs5B,UAAL,GAAkB,KAAK4B,qBAAL,CAA2B5iC,KAAK,CAAC+E,GAAjC,CAAlB;AACA,WAAO,KAAKgI,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDm7B,EAAAA,iBAAiB,GAAG;AAClB,UAAMn7B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;;AAEA,QAAI,KAAKiU,KAAL,CAAWzU,KAAK,CAAC4C,OAAjB,CAAJ,EAA+B;AAC7B8E,MAAAA,IAAI,CAAC06B,QAAL,GAAgB,KAAK/1B,KAAL,CAAW5N,KAA3B;AACA,WAAKgT,IAAL;AACA,WAAKyC,gBAAL,CAAsB,UAAtB;AACD,KAJD,MAIO,IAAI,KAAK2B,aAAL,CAAmB,UAAnB,CAAJ,EAAoC;AACzCnO,MAAAA,IAAI,CAAC06B,QAAL,GAAgB,IAAhB;AACD;;AAED,SAAKxuB,MAAL,CAAY5T,KAAK,CAACM,QAAlB;AACAoH,IAAAA,IAAI,CAAC4R,aAAL,GAAqB,KAAKqpB,0BAAL,EAArB;AACA,SAAK/uB,MAAL,CAAY5T,KAAK,CAACO,QAAlB;;AAEA,QAAI,KAAKkU,KAAL,CAAWzU,KAAK,CAAC4C,OAAjB,CAAJ,EAA+B;AAC7B8E,MAAAA,IAAI,CAACyS,QAAL,GAAgB,KAAK9N,KAAL,CAAW5N,KAA3B;AACA,WAAKgT,IAAL;AACA,WAAKmC,MAAL,CAAY5T,KAAK,CAACmB,QAAlB;AACD,KAJD,MAIO,IAAI,KAAKkT,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AACnCuG,MAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACD;;AAEDzS,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAKutB,cAAL,EAAtB;AACA,SAAKrtB,SAAL;AACA,SAAK7B,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,WAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDq7B,EAAAA,gBAAgB,GAAG;AACjB,UAAMr7B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACs7B,YAAL,GAAoB,KAAKpD,oBAAL,CAA0B,mBAA1B,EAA+C,KAAKqD,uBAAL,CAA6BhE,IAA7B,CAAkC,IAAlC,CAA/C,EAAwF,IAAxF,EAA8F,KAA9F,CAApB;AACA,QAAIiE,mBAAmB,GAAG,KAA1B;AACAx7B,IAAAA,IAAI,CAACs7B,YAAL,CAAkB54B,OAAlB,CAA0B+4B,WAAW,IAAI;AACvC,UAAIA,WAAW,CAACx7B,IAAZ,KAAqB,gBAAzB,EAA2C;AACzCu7B,QAAAA,mBAAmB,GAAG,IAAtB;AACD,OAFD,MAEO,IAAIA,mBAAmB,IAAIC,WAAW,CAACx7B,IAAZ,KAAqB,YAAhD,EAA8D;AACnE,aAAKiC,KAAL,CAAWu5B,WAAW,CAACt6B,KAAvB,EAA8B,uDAA9B;AACD;AACF,KAND;AAOA,WAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAEDu7B,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAKxuB,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AAC9B,YAAM6hC,QAAQ,GAAG,KAAKt2B,SAAL,EAAjB;AACA,WAAK2E,IAAL;AACA2xB,MAAAA,QAAQ,CAAC7tB,cAAT,GAA0B,KAAK8tB,WAAL,EAA1B;AACA,WAAKC,mBAAL,CAAyB,EAAzB;AACA,aAAO,KAAKv2B,UAAL,CAAgBq2B,QAAhB,EAA0B,YAA1B,CAAP;AACD;;AAED,UAAMz7B,IAAI,GAAG,KAAK07B,WAAL,EAAb;;AAEA,QAAI,KAAKhvB,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5B,YAAMoiC,gBAAgB,GAAG,KAAKnD,eAAL,CAAqBz4B,IAArB,CAAzB;AACA47B,MAAAA,gBAAgB,CAAChuB,cAAjB,GAAkC5N,IAAlC;AACA,aAAO,KAAKoF,UAAL,CAAgBw2B,gBAAhB,EAAkC,gBAAlC,CAAP;AACD;;AAED,WAAO57B,IAAP;AACD;;AAED67B,EAAAA,wBAAwB,GAAG;AACzB,UAAM97B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA8G,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK8tB,WAAL,EAAtB;AACA,SAAKzvB,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,WAAO,KAAKkM,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED+7B,EAAAA,gCAAgC,CAAC97B,IAAD,EAAO;AACrC,UAAMD,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAInF,IAAI,KAAK,mBAAb,EAAkC;AAChC,WAAKiM,MAAL,CAAY5T,KAAK,CAACqE,IAAlB;AACD;;AAED,SAAKg9B,eAAL,CAAqBrhC,KAAK,CAACqB,KAA3B,EAAkCqG,IAAlC;AACA,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;AAED+7B,EAAAA,sBAAsB,GAAG;AACvB,UAAMh8B,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEApF,IAAAA,IAAI,CAAC6f,OAAL,GAAe,CAAC,MAAM;AACpB,cAAQ,KAAKlb,KAAL,CAAW1E,IAAnB;AACE,aAAK3H,KAAK,CAACC,GAAX;AACA,aAAKD,KAAK,CAACI,MAAX;AACA,aAAKJ,KAAK,CAAC6E,KAAX;AACA,aAAK7E,KAAK,CAAC8E,MAAX;AACE,iBAAO,KAAKqH,aAAL,EAAP;;AAEF;AACE,gBAAM,KAAKmK,UAAL,EAAN;AARJ;AAUD,KAXc,GAAf;;AAaA,WAAO,KAAKvJ,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDi8B,EAAAA,0BAA0B,GAAG;AAC3B,UAAMj8B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAM82B,YAAY,GAAG,KAAKC,aAAL,CAAmB,KAAnB,CAArB;;AAEA,QAAID,YAAY,CAACE,WAAb,CAAyBn6B,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,WAAKC,KAAL,CAAWg6B,YAAY,CAACE,WAAb,CAAyB,CAAzB,EAA4Bj7B,KAAvC,EAA8C,qDAA9C;AACD;;AAEDnB,IAAAA,IAAI,CAAC6f,OAAL,GAAeqc,YAAf;AACA,WAAO,KAAK72B,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDq8B,EAAAA,kCAAkC,GAAG;AACnC,UAAMC,WAAW,GAAG,KAAKrD,mBAAL,EAApB;;AAEA,QAAI,KAAK1qB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAK2oB,qBAAL,EAAhC,EAA8D;AAC5D,aAAO,KAAK2B,wBAAL,CAA8ByD,WAA9B,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,WAAP;AACD;AACF;;AAEDC,EAAAA,mBAAmB,GAAG;AACpB,YAAQ,KAAK53B,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACL,IAAX;AACA,WAAKK,KAAK,CAACkF,KAAX;AACA,WAAKlF,KAAK,CAAC4E,KAAX;AACE;AACE,gBAAM+C,IAAI,GAAG,KAAK8M,KAAL,CAAWzU,KAAK,CAACkF,KAAjB,IAA0B,eAA1B,GAA4C,KAAKuP,KAAL,CAAWzU,KAAK,CAAC4E,KAAjB,IAA0B,eAA1B,GAA4C25B,mBAAmB,CAAC,KAAKlyB,KAAL,CAAW5N,KAAZ,CAAxH;;AAEA,cAAIkJ,IAAI,KAAKkL,SAAT,IAAsB,KAAKqxB,iBAAL,OAA6B,EAAvD,EAA2D;AACzD,kBAAMx8B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,iBAAK2E,IAAL;AACA,mBAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;AAED,iBAAO,KAAK04B,oBAAL,EAAP;AACD;;AAEH,WAAKrgC,KAAK,CAACI,MAAX;AACA,WAAKJ,KAAK,CAACC,GAAX;AACA,WAAKD,KAAK,CAAC6E,KAAX;AACA,WAAK7E,KAAK,CAAC8E,MAAX;AACE,eAAO,KAAK4+B,sBAAL,EAAP;;AAEF,WAAK1jC,KAAK,CAAC4C,OAAX;AACE,YAAI,KAAKyJ,KAAL,CAAW5N,KAAX,KAAqB,GAAzB,EAA8B;AAC5B,gBAAMiJ,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,cAAI,KAAKmN,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAACC,GAApC,EAAyC;AACvC,kBAAM,KAAKqW,UAAL,EAAN;AACD;;AAED5O,UAAAA,IAAI,CAAC6f,OAAL,GAAe,KAAK4c,eAAL,EAAf;AACA,iBAAO,KAAKp3B,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED;;AAEF,WAAK1H,KAAK,CAACsE,KAAX;AACE,eAAO,KAAKy/B,kCAAL,EAAP;;AAEF,WAAK/jC,KAAK,CAACiF,OAAX;AACE,eAAO,KAAK27B,gBAAL,EAAP;;AAEF,WAAK5gC,KAAK,CAAC2E,OAAX;AACE,eAAO,KAAKo7B,iBAAL,EAAP;;AAEF,WAAK//B,KAAK,CAACQ,MAAX;AACE,eAAO,KAAKyhC,WAAL,CAAiB,KAAKS,qBAAL,CAA2BzD,IAA3B,CAAgC,IAAhC,CAAjB,IAA0D,KAAK4D,iBAAL,EAA1D,GAAqF,KAAKL,kBAAL,EAA5F;;AAEF,WAAKxiC,KAAK,CAACM,QAAX;AACE,eAAO,KAAKyiC,gBAAL,EAAP;;AAEF,WAAK/iC,KAAK,CAACY,MAAX;AACE,eAAO,KAAK4iC,wBAAL,EAAP;;AAEF,WAAKxjC,KAAK,CAACwB,SAAX;AACE,eAAO,KAAKmiC,0BAAL,EAAP;AAvDJ;;AA0DA,UAAM,KAAKrtB,UAAL,EAAN;AACD;;AAED8tB,EAAAA,wBAAwB,GAAG;AACzB,QAAIz8B,IAAI,GAAG,KAAKs8B,mBAAL,EAAX;;AAEA,WAAO,CAAC,KAAKrF,qBAAL,EAAD,IAAiC,KAAKvqB,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAxC,EAAkE;AAChE,UAAI,KAAKmU,KAAL,CAAWzU,KAAK,CAACO,QAAjB,CAAJ,EAAgC;AAC9B,cAAMmH,IAAI,GAAG,KAAK04B,eAAL,CAAqBz4B,IAArB,CAAb;AACAD,QAAAA,IAAI,CAAC4U,WAAL,GAAmB3U,IAAnB;AACA,aAAKiM,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACAoH,QAAAA,IAAI,GAAG,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD,OALD,MAKO;AACL,cAAMA,IAAI,GAAG,KAAK04B,eAAL,CAAqBz4B,IAArB,CAAb;AACAD,QAAAA,IAAI,CAAC28B,UAAL,GAAkB18B,IAAlB;AACAD,QAAAA,IAAI,CAAC48B,SAAL,GAAiB,KAAKjB,WAAL,EAAjB;AACA,aAAKzvB,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACAoH,QAAAA,IAAI,GAAG,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;AACF;;AAED,WAAOC,IAAP;AACD;;AAED48B,EAAAA,mBAAmB,CAAC1jB,QAAD,EAAW;AAC5B,UAAMnZ,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKoH,gBAAL,CAAsB2M,QAAtB;AACAnZ,IAAAA,IAAI,CAACmZ,QAAL,GAAgBA,QAAhB;AACAnZ,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAKivB,2BAAL,EAAtB;;AAEA,QAAI3jB,QAAQ,KAAK,UAAjB,EAA6B;AAC3B,WAAK4jB,gCAAL,CAAsC/8B,IAAtC;AACD;;AAED,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED+8B,EAAAA,gCAAgC,CAAC/8B,IAAD,EAAO;AACrC,YAAQA,IAAI,CAAC6N,cAAL,CAAoB5N,IAA5B;AACE,WAAK,aAAL;AACA,WAAK,aAAL;AACE;;AAEF;AACE,aAAKiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,8EAAvB;AANJ;AAQD;;AAED67B,EAAAA,gBAAgB,GAAG;AACjB,UAAMh9B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKoH,gBAAL,CAAsB,OAAtB;AACA,UAAMoF,aAAa,GAAG,KAAKxM,SAAL,EAAtB;AACAwM,IAAAA,aAAa,CAAC3Z,IAAd,GAAqB,KAAKohC,mBAAL,CAAyBznB,aAAa,CAACzQ,KAAvC,CAArB;AACAnB,IAAAA,IAAI,CAAC4R,aAAL,GAAqB,KAAKvM,UAAL,CAAgBuM,aAAhB,EAA+B,iBAA/B,CAArB;AACA,WAAO,KAAKvM,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED88B,EAAAA,2BAA2B,GAAG;AAC5B,UAAM3jB,QAAQ,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC8jB,IAAhC,CAAqCC,EAAE,IAAI,KAAK3uB,YAAL,CAAkB2uB,EAAlB,CAA3C,CAAjB;AACA,WAAO/jB,QAAQ,GAAG,KAAK0jB,mBAAL,CAAyB1jB,QAAzB,CAAH,GAAwC,KAAK5K,YAAL,CAAkB,OAAlB,IAA6B,KAAKyuB,gBAAL,EAA7B,GAAuD,KAAKN,wBAAL,EAA9G;AACD;;AAEDS,EAAAA,8BAA8B,CAACj9B,IAAD,EAAOk9B,oBAAP,EAA6BjkB,QAA7B,EAAuC;AACnE,SAAKxM,GAAL,CAASwM,QAAT;AACA,QAAIlZ,IAAI,GAAGm9B,oBAAoB,EAA/B;;AAEA,QAAI,KAAKrwB,KAAL,CAAWoM,QAAX,CAAJ,EAA0B;AACxB,YAAM7gB,KAAK,GAAG,CAAC2H,IAAD,CAAd;;AAEA,aAAO,KAAK0M,GAAL,CAASwM,QAAT,CAAP,EAA2B;AACzB7gB,QAAAA,KAAK,CAACkM,IAAN,CAAW44B,oBAAoB,EAA/B;AACD;;AAED,YAAMp9B,IAAI,GAAG,KAAK04B,eAAL,CAAqBz4B,IAArB,CAAb;AACAD,MAAAA,IAAI,CAAC1H,KAAL,GAAaA,KAAb;AACA2H,MAAAA,IAAI,GAAG,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsBE,IAAtB,CAAP;AACD;;AAED,WAAOD,IAAP;AACD;;AAEDo9B,EAAAA,+BAA+B,GAAG;AAChC,WAAO,KAAKF,8BAAL,CAAoC,oBAApC,EAA0D,KAAKL,2BAAL,CAAiCvF,IAAjC,CAAsC,IAAtC,CAA1D,EAAuGj/B,KAAK,CAACwC,UAA7G,CAAP;AACD;;AAEDwiC,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKH,8BAAL,CAAoC,aAApC,EAAmD,KAAKE,+BAAL,CAAqC9F,IAArC,CAA0C,IAA1C,CAAnD,EAAoGj/B,KAAK,CAACsC,SAA1G,CAAP;AACD;;AAED2iC,EAAAA,uBAAuB,GAAG;AACxB,QAAI,KAAKhwB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,aAAO,IAAP;AACD;;AAED,WAAO,KAAKR,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAKqhC,WAAL,CAAiB,KAAKiD,oCAAL,CAA0CjG,IAA1C,CAA+C,IAA/C,CAAjB,CAAnC;AACD;;AAEDkG,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK1wB,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK8U,KAAL,CAAWzU,KAAK,CAACsE,KAAjB,CAA9B,EAAuD;AACrD,WAAKmN,IAAL;AACA,aAAO,IAAP;AACD;;AAED,QAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,UAAI4kC,iBAAiB,GAAG,CAAxB;AACA,WAAK3zB,IAAL;;AAEA,aAAO2zB,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK3wB,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,YAAE4kC,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK3wB,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAJ,EAA8B;AACnC,YAAE0kC,iBAAF;AACD;;AAED,aAAK3zB,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,QAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAAJ,EAAgC;AAC9B,UAAI8kC,iBAAiB,GAAG,CAAxB;AACA,WAAK3zB,IAAL;;AAEA,aAAO2zB,iBAAiB,GAAG,CAA3B,EAA8B;AAC5B,YAAI,KAAK3wB,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAAJ,EAAgC;AAC9B,YAAE8kC,iBAAF;AACD,SAFD,MAEO,IAAI,KAAK3wB,KAAL,CAAWzU,KAAK,CAACO,QAAjB,CAAJ,EAAgC;AACrC,YAAE6kC,iBAAF;AACD;;AAED,aAAK3zB,IAAL;AACD;;AAED,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDyzB,EAAAA,oCAAoC,GAAG;AACrC,SAAKzzB,IAAL;;AAEA,QAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACa,MAAjB,KAA4B,KAAK4T,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAhC,EAA4D;AAC1D,aAAO,IAAP;AACD;;AAED,QAAI,KAAK4jC,oBAAL,EAAJ,EAAiC;AAC/B,UAAI,KAAK1wB,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,KAAKyT,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAA3B,IAAsD,KAAK2T,KAAL,CAAWzU,KAAK,CAACmB,QAAjB,CAAtD,IAAoF,KAAKsT,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,CAAxF,EAA8G;AAC5G,eAAO,IAAP;AACD;;AAED,UAAI,KAAK4S,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAJ,EAA8B;AAC5B,aAAK4Q,IAAL;;AAEA,YAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,CAAJ,EAA6B;AAC3B,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;;AAEDsgC,EAAAA,oCAAoC,CAACL,WAAD,EAAc;AAChD,WAAO,KAAK+D,QAAL,CAAc,MAAM;AACzB,YAAMC,CAAC,GAAG,KAAKx4B,SAAL,EAAV;AACA,WAAK8G,MAAL,CAAY0tB,WAAZ;AACA,YAAMiE,OAAO,GAAG,KAAKvG,UAAL,CAAgB,KAAKwG,2BAAL,CAAiCvG,IAAjC,CAAsC,IAAtC,CAAhB,CAAhB;;AAEA,UAAIsG,OAAO,IAAI,KAAK9wB,KAAL,CAAWzU,KAAK,CAACsE,KAAjB,CAAf,EAAwC;AACtC,YAAImhC,iBAAiB,GAAG,KAAK1B,kCAAL,EAAxB;;AAEA,YAAI0B,iBAAiB,CAAC99B,IAAlB,KAA2B,YAA/B,EAA6C;AAC3C,gBAAMD,IAAI,GAAG,KAAK04B,eAAL,CAAqBkF,CAArB,CAAb;AACA59B,UAAAA,IAAI,CAAC+4B,aAAL,GAAqBgF,iBAArB;AACA/9B,UAAAA,IAAI,CAAC69B,OAAL,GAAe,IAAf;AACAE,UAAAA,iBAAiB,GAAG,KAAK14B,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAApB;AACD,SALD,MAKO;AACL+9B,UAAAA,iBAAiB,CAACF,OAAlB,GAA4B,IAA5B;AACD;;AAEDD,QAAAA,CAAC,CAAC/vB,cAAF,GAAmBkwB,iBAAnB;AACA,eAAO,KAAK14B,UAAL,CAAgBu4B,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAMI,qBAAqB,GAAG,KAAKhH,cAAL,MAAyB,KAAKM,UAAL,CAAgB,KAAK2G,0BAAL,CAAgC1G,IAAhC,CAAqC,IAArC,CAAhB,CAAvD;;AAEA,UAAI,CAACyG,qBAAL,EAA4B;AAC1B,YAAI,CAACH,OAAL,EAAc;AACZ,iBAAO,KAAK7E,qBAAL,CAA2B,KAA3B,EAAkC4E,CAAlC,CAAP;AACD;;AAED,cAAM59B,IAAI,GAAG,KAAK04B,eAAL,CAAqBkF,CAArB,CAAb;AACA59B,QAAAA,IAAI,CAAC+4B,aAAL,GAAqB,KAAK3rB,eAAL,EAArB;AACApN,QAAAA,IAAI,CAAC69B,OAAL,GAAeA,OAAf;AACAD,QAAAA,CAAC,CAAC/vB,cAAF,GAAmB,KAAKxI,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,eAAO,KAAKqF,UAAL,CAAgBu4B,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAED,YAAM39B,IAAI,GAAG,KAAK+4B,qBAAL,CAA2B,KAA3B,CAAb;AACA,YAAMh5B,IAAI,GAAG,KAAK04B,eAAL,CAAqBkF,CAArB,CAAb;AACA59B,MAAAA,IAAI,CAAC+4B,aAAL,GAAqBiF,qBAArB;AACAh+B,MAAAA,IAAI,CAAC6N,cAAL,GAAsB5N,IAAtB;AACAD,MAAAA,IAAI,CAAC69B,OAAL,GAAeA,OAAf;AACAD,MAAAA,CAAC,CAAC/vB,cAAF,GAAmB,KAAKxI,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAnB;AACA,aAAO,KAAKqF,UAAL,CAAgBu4B,CAAhB,EAAmB,kBAAnB,CAAP;AACD,KA1CM,CAAP;AA2CD;;AAEDM,EAAAA,uCAAuC,GAAG;AACxC,WAAO,KAAKnxB,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,IAA0B,KAAK2gC,oCAAL,CAA0C3hC,KAAK,CAACgB,KAAhD,CAA1B,GAAmF6R,SAA1F;AACD;;AAEDqvB,EAAAA,wBAAwB,GAAG;AACzB,WAAO,KAAKztB,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,IAA0B,KAAK0/B,qBAAL,EAA1B,GAAyD7tB,SAAhE;AACD;;AAEDiwB,EAAAA,cAAc,GAAG;AACf,WAAO,KAAK7B,kBAAL,CAAwBjhC,KAAK,CAACgB,KAA9B,CAAP;AACD;;AAED2kC,EAAAA,0BAA0B,GAAG;AAC3B,UAAM9wB,EAAE,GAAG,KAAKC,eAAL,EAAX;;AAEA,QAAI,KAAKmB,YAAL,CAAkB,IAAlB,KAA2B,CAAC,KAAK2oB,qBAAL,EAAhC,EAA8D;AAC5D,WAAKntB,IAAL;AACA,aAAOoD,EAAP;AACD;AACF;;AAED2wB,EAAAA,2BAA2B,GAAG;AAC5B,QAAI,CAAC,KAAK/wB,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAD,IAA2B,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,SAAhD,IAA6D,KAAKmgC,qBAAL,EAAjE,EAA+F;AAC7F,aAAO,KAAP;AACD;;AAED,UAAM1xB,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;AACA,SAAKuE,IAAL;;AAEA,QAAI,CAAC,KAAKgD,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAD,IAA2B,CAAC,KAAK8U,KAAL,CAAWzU,KAAK,CAACsE,KAAjB,CAAhC,EAAyD;AACvD,aAAO,KAAP;AACD;;AAED,QAAI4I,WAAJ,EAAiB;AACf,WAAKtD,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,oCAApC;AACD;;AAED,WAAO,IAAP;AACD;;AAED2qB,EAAAA,qBAAqB,CAACmF,QAAQ,GAAG,IAAZ,EAAkBP,CAAC,GAAG,KAAKx4B,SAAL,EAAtB,EAAwC;AAC3D,SAAKu4B,QAAL,CAAc,MAAM;AAClB,UAAIQ,QAAJ,EAAc,KAAKjyB,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACdskC,MAAAA,CAAC,CAAC/vB,cAAF,GAAmB,KAAK8tB,WAAL,EAAnB;AACD,KAHD;AAIA,WAAO,KAAKt2B,UAAL,CAAgBu4B,CAAhB,EAAmB,kBAAnB,CAAP;AACD;;AAEDjC,EAAAA,WAAW,GAAG;AACZ/E,IAAAA,MAAM,CAAC,KAAKjyB,KAAL,CAAWsH,MAAZ,CAAN;AACA,UAAMhM,IAAI,GAAG,KAAKm+B,yBAAL,EAAb;;AAEA,QAAI,KAAKlH,qBAAL,MAAgC,CAAC,KAAKvqB,GAAL,CAASrU,KAAK,CAACyE,QAAf,CAArC,EAA+D;AAC7D,aAAOkD,IAAP;AACD;;AAED,UAAMD,IAAI,GAAG,KAAK04B,eAAL,CAAqBz4B,IAArB,CAAb;AACAD,IAAAA,IAAI,CAACq+B,SAAL,GAAiBp+B,IAAjB;AACAD,IAAAA,IAAI,CAACs+B,WAAL,GAAmB,KAAKF,yBAAL,EAAnB;AACA,SAAKlyB,MAAL,CAAY5T,KAAK,CAACmB,QAAlB;AACAuG,IAAAA,IAAI,CAACu+B,QAAL,GAAgB,KAAK5C,WAAL,EAAhB;AACA,SAAKzvB,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACA0G,IAAAA,IAAI,CAACw+B,SAAL,GAAiB,KAAK7C,WAAL,EAAjB;AACA,WAAO,KAAKt2B,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDo+B,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,KAAKb,uBAAL,EAAJ,EAAoC;AAClC,aAAO,KAAKxB,gCAAL,CAAsC,gBAAtC,CAAP;AACD;;AAED,QAAI,KAAKhvB,KAAL,CAAWzU,KAAK,CAACqE,IAAjB,CAAJ,EAA4B;AAC1B,aAAO,KAAKo/B,gCAAL,CAAsC,mBAAtC,CAAP;AACD;;AAED,WAAO,KAAKuB,wBAAL,EAAP;AACD;;AAEDmB,EAAAA,oBAAoB,GAAG;AACrB,UAAMz+B,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,UAAM5I,MAAM,GAAG,KAAKk9B,6BAAL,EAAf;;AAEA15B,IAAAA,IAAI,CAAC6N,cAAL,GAAsBrR,MAAM,IAAI,KAAKkiC,mBAAL,EAAhC;AACA,SAAK7sB,gBAAL,CAAsB,GAAtB;AACA7R,IAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKo7B,eAAL,EAAlB;AACA,WAAO,KAAKp3B,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED2+B,EAAAA,qBAAqB,CAACC,UAAD,EAAa;AAChC,UAAMC,aAAa,GAAG,KAAKl6B,KAAL,CAAWxD,KAAjC;AACA,UAAM29B,aAAa,GAAG,KAAK/G,oBAAL,CAA0B,uBAA1B,EAAmD,KAAKgH,kCAAL,CAAwCxH,IAAxC,CAA6C,IAA7C,CAAnD,CAAtB;;AAEA,QAAI,CAACuH,aAAa,CAAC78B,MAAnB,EAA2B;AACzB,WAAKC,KAAL,CAAW28B,aAAX,EAA2B,IAAGD,UAAW,yBAAzC;AACD;;AAED,WAAOE,aAAP;AACD;;AAEDC,EAAAA,kCAAkC,GAAG;AACnC,UAAM/+B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKk3B,iBAAL,CAAuB,KAAvB,CAAlB;;AAEA,QAAI,KAAKhrB,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1BvN,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKi0B,oBAAL,EAAtB;AACD;;AAED,WAAO,KAAKnzB,UAAL,CAAgBrF,IAAhB,EAAsB,+BAAtB,CAAP;AACD;;AAEDg/B,EAAAA,2BAA2B,CAACh/B,IAAD,EAAO;AAChCA,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACA,SAAKjL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwB5N,iBAAxB,EAA2C4L,SAA3C,EAAsD,kCAAtD;AACAnL,IAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKi1B,wBAAL,EAAtB;;AAEA,QAAI,KAAK7sB,GAAL,CAASrU,KAAK,CAACyE,QAAf,CAAJ,EAA8B;AAC5BiD,MAAAA,IAAI,CAAC+P,OAAL,GAAe,KAAK4uB,qBAAL,CAA2B,SAA3B,CAAf;AACD;;AAED,UAAMv7B,IAAI,GAAG,KAAKgC,SAAL,EAAb;AACAhC,IAAAA,IAAI,CAACA,IAAL,GAAY,KAAKu6B,QAAL,CAAc,KAAK5C,wBAAL,CAA8BxD,IAA9B,CAAmC,IAAnC,CAAd,CAAZ;AACAv3B,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKiC,UAAL,CAAgBjC,IAAhB,EAAsB,iBAAtB,CAAZ;AACA,WAAO,KAAKiC,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDi/B,EAAAA,2BAA2B,CAACj/B,IAAD,EAAO;AAChCA,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACA,SAAKjL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwB3N,YAAxB,EAAsC2L,SAAtC,EAAiD,uBAAjD;AACAnL,IAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKi1B,wBAAL,EAAtB;AACAx5B,IAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAKqtB,qBAAL,CAA2B5iC,KAAK,CAAC6B,EAAjC,CAAtB;AACA,SAAK4T,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAEDk/B,EAAAA,aAAa,CAACC,EAAD,EAAK;AAChB,UAAMC,UAAU,GAAG,KAAKz6B,KAAL,CAAWwC,OAA9B;AACA,SAAKxC,KAAL,CAAWwC,OAAX,GAAqB,CAACi4B,UAAU,CAAC,CAAD,CAAX,CAArB;;AAEA,QAAI;AACF,aAAOD,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKx6B,KAAL,CAAWwC,OAAX,GAAqBi4B,UAArB;AACD;AACF;;AAEDzB,EAAAA,QAAQ,CAACwB,EAAD,EAAK;AACX,UAAMnzB,SAAS,GAAG,KAAKrH,KAAL,CAAWsH,MAA7B;AACA,SAAKtH,KAAL,CAAWsH,MAAX,GAAoB,IAApB;;AAEA,QAAI;AACF,aAAOkzB,EAAE,EAAT;AACD,KAFD,SAEU;AACR,WAAKx6B,KAAL,CAAWsH,MAAX,GAAoBD,SAApB;AACD;AACF;;AAEDutB,EAAAA,kBAAkB,CAACphC,KAAD,EAAQ;AACxB,WAAO,CAAC,KAAK4U,KAAL,CAAW5U,KAAX,CAAD,GAAqBgT,SAArB,GAAiC,KAAKuzB,mBAAL,EAAxC;AACD;;AAEDxD,EAAAA,qBAAqB,CAAC/iC,KAAD,EAAQ;AAC3B,WAAO,KAAKknC,iBAAL,CAAuB,MAAM,KAAKnzB,MAAL,CAAY/T,KAAZ,CAA7B,CAAP;AACD;;AAEDumC,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAKW,iBAAL,CAAuB,MAAM,KAAKt1B,IAAL,EAA7B,CAAP;AACD;;AAEDs1B,EAAAA,iBAAiB,CAACF,EAAD,EAAK;AACpB,WAAO,KAAKxB,QAAL,CAAc,MAAM;AACzBwB,MAAAA,EAAE;AACF,aAAO,KAAKxD,WAAL,EAAP;AACD,KAHM,CAAP;AAID;;AAED2D,EAAAA,iBAAiB,GAAG;AAClB,UAAMt/B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKJ,KAAL,CAAWzU,KAAK,CAACI,MAAjB,IAA2B,KAAK+L,aAAL,EAA3B,GAAkD,KAAK2I,eAAL,CAAqB,IAArB,CAA5D;;AAEA,QAAI,KAAKT,GAAL,CAASrU,KAAK,CAAC6B,EAAf,CAAJ,EAAwB;AACtB6F,MAAAA,IAAI,CAACu/B,WAAL,GAAmB,KAAKzoB,gBAAL,EAAnB;AACD;;AAED,WAAO,KAAKzR,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDw/B,EAAAA,sBAAsB,CAACx/B,IAAD,EAAOw2B,OAAP,EAAgB;AACpC,QAAIA,OAAJ,EAAax2B,IAAI,CAACyK,KAAL,GAAa,IAAb;AACbzK,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACA,SAAKjL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwBqpB,OAAO,GAAG32B,kBAAH,GAAwBJ,YAAvD,EAAqE0L,SAArE,EAAgF,6BAAhF;AACA,SAAKe,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACAkH,IAAAA,IAAI,CAACqgB,OAAL,GAAe,KAAK0X,oBAAL,CAA0B,aAA1B,EAAyC,KAAKuH,iBAAL,CAAuB/H,IAAvB,CAA4B,IAA5B,CAAzC,CAAf;AACA,SAAKrrB,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACA,WAAO,KAAKqM,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDy/B,EAAAA,kBAAkB,GAAG;AACnB,UAAMz/B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKsC,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;AACA,SAAKwO,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACA,SAAK4mC,2BAAL,CAAiC1/B,IAAI,CAACoD,IAAL,GAAY,EAA7C,EAAiD+H,SAAjD,EAA4D,IAA5D,EAAkE7S,KAAK,CAACU,MAAxE;AACA,SAAK0O,KAAL,CAAWwH,IAAX;AACA,WAAO,KAAK7J,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED2/B,EAAAA,mCAAmC,CAAC3/B,IAAD,EAAO4/B,MAAM,GAAG,KAAhB,EAAuB;AACxD5/B,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;;AAEA,QAAI,CAACwyB,MAAL,EAAa;AACX,WAAKz9B,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwBrN,iBAAxB,EAA2C,IAA3C,EAAiD,iCAAjD;AACD;;AAED,QAAI,KAAK6M,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAJ,EAAyB;AACvB,YAAMqmC,KAAK,GAAG,KAAKz6B,SAAL,EAAd;AACA,WAAKu6B,mCAAL,CAAyCE,KAAzC,EAAgD,IAAhD;AACA7/B,MAAAA,IAAI,CAACoD,IAAL,GAAYy8B,KAAZ;AACD,KAJD,MAIO;AACL,WAAKn4B,KAAL,CAAWqH,KAAX,CAAiB3Q,eAAjB;AACA4B,MAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKq8B,kBAAL,EAAZ;AACA,WAAK/3B,KAAL,CAAWwH,IAAX;AACD;;AAED,WAAO,KAAK7J,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED8/B,EAAAA,uCAAuC,CAAC9/B,IAAD,EAAO;AAC5C,QAAI,KAAKuO,YAAL,CAAkB,QAAlB,CAAJ,EAAiC;AAC/BvO,MAAAA,IAAI,CAAC+/B,MAAL,GAAc,IAAd;AACA//B,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACD,KAHD,MAGO,IAAI,KAAKL,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAJ,EAA8B;AACnCsH,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK1I,aAAL,EAAV;AACD,KAFM,MAEA;AACL,WAAKmK,UAAL;AACD;;AAED,QAAI,KAAK7B,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,WAAK4O,KAAL,CAAWqH,KAAX,CAAiB3Q,eAAjB;AACA4B,MAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKq8B,kBAAL,EAAZ;AACA,WAAK/3B,KAAL,CAAWwH,IAAX;AACD,KAJD,MAIO;AACL,WAAKnB,SAAL;AACD;;AAED,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAEDggC,EAAAA,8BAA8B,CAAChgC,IAAD,EAAOigC,QAAP,EAAiB;AAC7CjgC,IAAAA,IAAI,CAACigC,QAAL,GAAgBA,QAAQ,IAAI,KAA5B;AACAjgC,IAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;AACA,SAAKjL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwB/N,YAAxB,EAAsC+L,SAAtC,EAAiD,2BAAjD;AACA,SAAKe,MAAL,CAAY5T,KAAK,CAAC6B,EAAlB;AACA6F,IAAAA,IAAI,CAACkgC,eAAL,GAAuB,KAAKC,sBAAL,EAAvB;AACA,SAAKpyB,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAEDogC,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAK7xB,YAAL,CAAkB,SAAlB,KAAgC,KAAKiuB,iBAAL,OAA6B,EAApE;AACD;;AAED2D,EAAAA,sBAAsB,GAAG;AACvB,WAAO,KAAKC,2BAAL,KAAqC,KAAKC,8BAAL,EAArC,GAA6E,KAAK9H,iBAAL,CAAuB,KAAvB,CAApF;AACD;;AAED8H,EAAAA,8BAA8B,GAAG;AAC/B,UAAMrgC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAKoH,gBAAL,CAAsB,SAAtB;AACA,SAAKN,MAAL,CAAY5T,KAAK,CAACY,MAAlB;;AAEA,QAAI,CAAC,KAAK6T,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAL,EAA+B;AAC7B,YAAM,KAAKkW,UAAL,EAAN;AACD;;AAED5O,IAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKoD,aAAL,EAAlB;AACA,SAAKyH,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,WAAO,KAAKkM,UAAL,CAAgBrF,IAAhB,EAAsB,2BAAtB,CAAP;AACD;;AAEDu6B,EAAAA,WAAW,CAAC+F,CAAD,EAAI;AACb,UAAM37B,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAd;AACA,UAAMmqB,GAAG,GAAGD,CAAC,EAAb;AACA,SAAK37B,KAAL,GAAaA,KAAb;AACA,WAAO47B,GAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAACF,CAAD,EAAI;AACpB,UAAMtqB,MAAM,GAAG,KAAKC,QAAL,CAAc+G,KAAK,IAAIsjB,CAAC,MAAMtjB,KAAK,EAAnC,CAAf;AACA,QAAIhH,MAAM,CAACkH,OAAP,IAAkB,CAAClH,MAAM,CAAChW,IAA9B,EAAoC,OAAOmL,SAAP;AACpC,QAAI6K,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClB,WAAOH,MAAM,CAAChW,IAAd;AACD;;AAEDs3B,EAAAA,UAAU,CAACgJ,CAAD,EAAI;AACZ,UAAM37B,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAd;AACA,UAAMJ,MAAM,GAAGsqB,CAAC,EAAhB;;AAEA,QAAItqB,MAAM,KAAK7K,SAAX,IAAwB6K,MAAM,KAAK,KAAvC,EAA8C;AAC5C,aAAOA,MAAP;AACD,KAFD,MAEO;AACL,WAAKrR,KAAL,GAAaA,KAAb;AACA,aAAOwG,SAAP;AACD;AACF;;AAEDs1B,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACtB,QAAI,KAAKC,gBAAL,EAAJ,EAA6B;AAC3B;AACD;;AAED,QAAIC,SAAS,GAAG,KAAKj8B,KAAL,CAAW1E,IAA3B;AACA,QAAIC,IAAJ;;AAEA,QAAI,KAAKqO,YAAL,CAAkB,KAAlB,CAAJ,EAA8B;AAC5BqyB,MAAAA,SAAS,GAAGtoC,KAAK,CAACiE,IAAlB;AACA2D,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,YAAQ0gC,SAAR;AACE,WAAKtoC,KAAK,CAAC2D,SAAX;AACE,eAAO,KAAK4kC,sBAAL,CAA4BH,IAA5B,EAAkC,KAAlC,EAAyC,IAAzC,CAAP;;AAEF,WAAKpoC,KAAK,CAACwE,MAAX;AACE4jC,QAAAA,IAAI,CAAC1vB,OAAL,GAAe,IAAf;AACA,eAAO,KAAK8vB,UAAL,CAAgBJ,IAAhB,EAAsB,IAAtB,EAA4B,KAA5B,CAAP;;AAEF,WAAKpoC,KAAK,CAACkE,MAAX;AACE,YAAI,KAAKuQ,KAAL,CAAWzU,KAAK,CAACkE,MAAjB,KAA4B,KAAKue,qBAAL,CAA2B,MAA3B,CAAhC,EAAoE;AAClE,eAAK7O,MAAL,CAAY5T,KAAK,CAACkE,MAAlB;AACA,eAAKgQ,gBAAL,CAAsB,MAAtB;AACA,iBAAO,KAAKgzB,sBAAL,CAA4BkB,IAA5B,EAAkC,IAAlC,CAAP;AACD;;AAEH,WAAKpoC,KAAK,CAACiE,IAAX;AACE2D,QAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKyE,KAAL,CAAW5N,KAA1B;AACA,eAAO,KAAKgqC,iBAAL,CAAuBL,IAAvB,EAA6BxgC,IAA7B,CAAP;;AAEF,WAAK5H,KAAK,CAACL,IAAX;AACE;AACE,gBAAMlB,KAAK,GAAG,KAAK4N,KAAL,CAAW5N,KAAzB;;AAEA,cAAIA,KAAK,KAAK,QAAd,EAAwB;AACtB,mBAAO,KAAK+oC,uCAAL,CAA6CY,IAA7C,CAAP;AACD,WAFD,MAEO;AACL,mBAAO,KAAKM,kBAAL,CAAwBN,IAAxB,EAA8B3pC,KAA9B,EAAqC,IAArC,CAAP;AACD;AACF;AA5BL;AA8BD;;AAEDkqC,EAAAA,2BAA2B,GAAG;AAC5B,WAAO,KAAKD,kBAAL,CAAwB,KAAK57B,SAAL,EAAxB,EAA0C,KAAKT,KAAL,CAAW5N,KAArD,EAA4D,IAA5D,CAAP;AACD;;AAEDmqC,EAAAA,0BAA0B,CAAClhC,IAAD,EAAOoC,IAAP,EAAa;AACrC,YAAQA,IAAI,CAACnK,IAAb;AACE,WAAK,SAAL;AACE;AACE,gBAAMmS,WAAW,GAAG,KAAKq2B,iBAAL,CAAuBzgC,IAAvB,CAApB;;AAEA,cAAIoK,WAAJ,EAAiB;AACfA,YAAAA,WAAW,CAAC4G,OAAZ,GAAsB,IAAtB;AACA,mBAAO5G,WAAP;AACD;;AAED;AACD;;AAEH,WAAK,QAAL;AACE,YAAI,KAAK2C,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,eAAK4O,KAAL,CAAWqH,KAAX,CAAiB3Q,eAAjB;AACA,gBAAM+iC,GAAG,GAAGnhC,IAAZ;AACAmhC,UAAAA,GAAG,CAACpB,MAAJ,GAAa,IAAb;AACAoB,UAAAA,GAAG,CAACh0B,EAAJ,GAAS/K,IAAT;AACA++B,UAAAA,GAAG,CAAC/9B,IAAJ,GAAW,KAAKq8B,kBAAL,EAAX;AACA,eAAK/3B,KAAL,CAAWwH,IAAX;AACA,iBAAO,KAAK7J,UAAL,CAAgB87B,GAAhB,EAAqB,qBAArB,CAAP;AACD;;AAED;;AAEF;AACE,eAAO,KAAKH,kBAAL,CAAwBhhC,IAAxB,EAA8BoC,IAAI,CAACnK,IAAnC,EAAyC,KAAzC,CAAP;AA3BJ;AA6BD;;AAED+oC,EAAAA,kBAAkB,CAAChhC,IAAD,EAAOjJ,KAAP,EAAcgT,IAAd,EAAoB;AACpC,YAAQhT,KAAR;AACE,WAAK,UAAL;AACE,YAAI,KAAKqqC,6BAAL,CAAmC9oC,KAAK,CAACwE,MAAzC,EAAiDiN,IAAjD,CAAJ,EAA4D;AAC1D,gBAAMs3B,GAAG,GAAGrhC,IAAZ;AACAqhC,UAAAA,GAAG,CAACC,QAAJ,GAAe,IAAf;;AAEA,cAAIv3B,IAAJ,EAAU;AACR,iBAAKA,IAAL;;AAEA,gBAAI,CAAC,KAAKgD,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAL,EAA+B;AAC7B,mBAAK8R,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAACwE,MAA5B;AACD;AACF;;AAED,iBAAO,KAAKgkC,UAAL,CAAgBO,GAAhB,EAAqB,IAArB,EAA2B,KAA3B,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAIt3B,IAAI,IAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAZ,EAAoC;AAClC,cAAI8R,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAKy1B,sBAAL,CAA4Bx/B,IAA5B,EAAkC,KAAlC,CAAP;AACD;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAKohC,6BAAL,CAAmC9oC,KAAK,CAACL,IAAzC,EAA+C8R,IAA/C,CAAJ,EAA0D;AACxD,cAAIA,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAKi1B,2BAAL,CAAiCh/B,IAAjC,CAAP;AACD;;AAED;;AAEF,WAAK,QAAL;AACE,YAAI+J,IAAJ,EAAU,KAAKA,IAAL;;AAEV,YAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAJ,EAA8B;AAC5B,iBAAO,KAAKonC,uCAAL,CAA6C9/B,IAA7C,CAAP;AACD,SAFD,MAEO,IAAI,KAAKohC,6BAAL,CAAmC9oC,KAAK,CAACL,IAAzC,EAA+C8R,IAA/C,CAAJ,EAA0D;AAC/D,iBAAO,KAAK41B,mCAAL,CAAyC3/B,IAAzC,CAAP;AACD;;AAED;;AAEF,WAAK,WAAL;AACE,YAAI,KAAKohC,6BAAL,CAAmC9oC,KAAK,CAACL,IAAzC,EAA+C8R,IAA/C,CAAJ,EAA0D;AACxD,cAAIA,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAK41B,mCAAL,CAAyC3/B,IAAzC,CAAP;AACD;;AAED;;AAEF,WAAK,MAAL;AACE,YAAI,KAAKohC,6BAAL,CAAmC9oC,KAAK,CAACL,IAAzC,EAA+C8R,IAA/C,CAAJ,EAA0D;AACxD,cAAIA,IAAJ,EAAU,KAAKA,IAAL;AACV,iBAAO,KAAKk1B,2BAAL,CAAiCj/B,IAAjC,CAAP;AACD;;AAED;AA5DJ;AA8DD;;AAEDohC,EAAAA,6BAA6B,CAACG,SAAD,EAAYx3B,IAAZ,EAAkB;AAC7C,WAAO,CAACA,IAAI,IAAI,KAAKgD,KAAL,CAAWw0B,SAAX,CAAT,KAAmC,CAAC,KAAKZ,gBAAL,EAA3C;AACD;;AAEDa,EAAAA,mCAAmC,CAAC58B,QAAD,EAAWC,QAAX,EAAqB;AACtD,QAAI,CAAC,KAAK0I,YAAL,CAAkB,GAAlB,CAAL,EAA6B;AAC3B,aAAOpC,SAAP;AACD;;AAED,UAAMo1B,GAAG,GAAG,KAAKC,kBAAL,CAAwB,MAAM;AACxC,YAAMxgC,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAACuE,cAAL,GAAsB,KAAKk1B,qBAAL,EAAtB;AACA,YAAMne,mBAAN,CAA0Btb,IAA1B;AACAA,MAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKswB,uCAAL,EAAlB;AACA,WAAKhyB,MAAL,CAAY5T,KAAK,CAACqB,KAAlB;AACA,aAAOqG,IAAP;AACD,KAPW,CAAZ;;AASA,QAAI,CAACugC,GAAL,EAAU;AACR,aAAOp1B,SAAP;AACD;;AAED,WAAO,KAAK0S,oBAAL,CAA0B0iB,GAA1B,EAA+B,IAA/B,EAAqC,IAArC,CAAP;AACD;;AAED/H,EAAAA,oBAAoB,GAAG;AACrB,UAAMx4B,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACgC,MAAL,GAAc,KAAK27B,QAAL,CAAc,MAAM,KAAKuB,aAAL,CAAmB,MAAM;AACzD,WAAKrtB,gBAAL,CAAsB,GAAtB;AACA,aAAO,KAAKkmB,oBAAL,CAA0B,2BAA1B,EAAuD,KAAK4D,WAAL,CAAiBpE,IAAjB,CAAsB,IAAtB,CAAvD,CAAP;AACD,KAHiC,CAApB,CAAd;AAIA,SAAK5yB,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACA,SAAKyK,gBAAL,CAAsB,GAAtB;AACA,WAAO,KAAKxM,UAAL,CAAgBrF,IAAhB,EAAsB,8BAAtB,CAAP;AACD;;AAEDyhC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAK10B,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1B,cAAQ,KAAK0M,KAAL,CAAW5N,KAAnB;AACE,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,MAAL;AACA,aAAK,WAAL;AACA,aAAK,QAAL;AACA,aAAK,WAAL;AACA,aAAK,MAAL;AACE,iBAAO,IAAP;AARJ;AAUD;;AAED,WAAO,KAAP;AACD;;AAED4e,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK8rB,oBAAL,EAAJ,EAAiC,OAAO,KAAP;AACjC,WAAO,MAAM9rB,wBAAN,EAAP;AACD;;AAED+rB,EAAAA,uBAAuB,CAACnmB,cAAD,EAAiBomB,UAAjB,EAA6B;AAClD,UAAM/8B,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,QAAI+8B,aAAJ;AACA,QAAIlH,QAAQ,GAAG,KAAf;;AAEA,QAAInf,cAAJ,EAAoB;AAClBqmB,MAAAA,aAAa,GAAG,KAAKC,mBAAL,EAAhB;AACAnH,MAAAA,QAAQ,GAAG,CAAC,CAAC,KAAKvD,eAAL,CAAqB,CAAC,UAAD,CAArB,CAAb;AACD;;AAED,UAAM9c,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMynB,GAAG,GAAG,KAAK1nB,iBAAL,CAAuBC,IAAI,CAAClZ,KAA5B,EAAmCkZ,IAAI,CAACjZ,GAAL,CAASD,KAA5C,EAAmDkZ,IAAnD,CAAZ;;AAEA,QAAIunB,aAAa,IAAIlH,QAArB,EAA+B;AAC7B,YAAMqH,EAAE,GAAG,KAAK7gC,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAX;;AAEA,UAAI88B,UAAU,CAAC1/B,MAAf,EAAuB;AACrB8/B,QAAAA,EAAE,CAACJ,UAAH,GAAgBA,UAAhB;AACD;;AAED,UAAIC,aAAJ,EAAmBG,EAAE,CAACH,aAAH,GAAmBA,aAAnB;AACnB,UAAIlH,QAAJ,EAAcqH,EAAE,CAACrH,QAAH,GAAcA,QAAd;;AAEd,UAAIoH,GAAG,CAAC7hC,IAAJ,KAAa,YAAb,IAA6B6hC,GAAG,CAAC7hC,IAAJ,KAAa,mBAA9C,EAAmE;AACjE,aAAKiC,KAAL,CAAW6/B,EAAE,CAAC5gC,KAAd,EAAqB,mEAArB;AACD;;AAED4gC,MAAAA,EAAE,CAACC,SAAH,GAAeF,GAAf;AACA,aAAO,KAAKz8B,UAAL,CAAgB08B,EAAhB,EAAoB,qBAApB,CAAP;AACD;;AAED,QAAIJ,UAAU,CAAC1/B,MAAf,EAAuB;AACrBoY,MAAAA,IAAI,CAACsnB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOG,GAAP;AACD;;AAEDxsB,EAAAA,0BAA0B,CAACtV,IAAD,EAAOC,IAAP,EAAa+E,QAAQ,GAAG,KAAxB,EAA+B;AACvD,QAAI,KAAK+H,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B0G,MAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKqsB,oCAAL,CAA0C3hC,KAAK,CAACgB,KAAhD,CAAlB;AACD;;AAED,UAAM2oC,YAAY,GAAGhiC,IAAI,KAAK,qBAAT,GAAiC,mBAAjC,GAAuDA,IAAI,KAAK,aAAT,GAAyB,iBAAzB,GAA6CkL,SAAzH;;AAEA,QAAI82B,YAAY,IAAI,CAAC,KAAKl1B,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAjB,IAA6C,KAAK6nC,gBAAL,EAAjD,EAA0E;AACxE,WAAKt7B,UAAL,CAAgBrF,IAAhB,EAAsBiiC,YAAtB;AACA;AACD;;AAED,UAAM3sB,0BAAN,CAAiCtV,IAAjC,EAAuCC,IAAvC,EAA6C+E,QAA7C;AACD;;AAEDk9B,EAAAA,2BAA2B,CAACliC,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAACoD,IAAN,IAAcpD,IAAI,CAACmN,EAAvB,EAA2B;AACzB,WAAKhL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwBzN,eAAxB,EAAyC,IAAzC,EAA+C,eAA/C;AACD,KAFD,MAEO;AACL,YAAMwiC,2BAAN,CAAkC,GAAG5pB,SAArC;AACD;AACF;;AAED6E,EAAAA,cAAc,CAACP,IAAD,EAAOhY,QAAP,EAAiBC,QAAjB,EAA2BgY,OAA3B,EAAoClY,KAApC,EAA2C;AACvD,QAAI,CAAC,KAAKuyB,qBAAL,EAAD,IAAiC,KAAKnqB,KAAL,CAAWzU,KAAK,CAACgC,IAAjB,CAArC,EAA6D;AAC3D,WAAKqK,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACA,WAAK2C,IAAL;AACA,YAAMo4B,iBAAiB,GAAG,KAAKjhC,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAA1B;AACAs9B,MAAAA,iBAAiB,CAAC9gC,UAAlB,GAA+Bub,IAA/B;AACA,aAAO,KAAKvX,UAAL,CAAgB88B,iBAAhB,EAAmC,qBAAnC,CAAP;AACD;;AAED,QAAI,KAAK50B,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMyI,MAAM,GAAG,KAAKwqB,kBAAL,CAAwB,MAAM;AAC3C,YAAI,CAAC3jB,OAAD,IAAY,KAAKulB,eAAL,CAAqBxlB,IAArB,CAAhB,EAA4C;AAC1C,gBAAMylB,YAAY,GAAG,KAAKb,mCAAL,CAAyC58B,QAAzC,EAAmDC,QAAnD,CAArB;;AAEA,cAAIw9B,YAAJ,EAAkB;AAChB,mBAAOA,YAAP;AACD;AACF;;AAED,cAAMriC,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,QAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA,cAAMa,aAAa,GAAG,KAAK+a,oBAAL,EAAtB;;AAEA,YAAI/a,aAAJ,EAAmB;AACjB,cAAI,CAACZ,OAAD,IAAY,KAAKlQ,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAhB,EAAwC;AACtC8G,YAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACA6G,YAAAA,IAAI,CAACuE,cAAL,GAAsBkZ,aAAtB;AACA,mBAAO,KAAKC,oBAAL,CAA0B1d,IAA1B,EAAgC2E,KAAK,CAAC4Y,mBAAtC,CAAP;AACD,WAJD,MAIO,IAAI,KAAKxQ,KAAL,CAAWzU,KAAK,CAACwB,SAAjB,CAAJ,EAAiC;AACtC,mBAAO,KAAKwoC,6BAAL,CAAmC19B,QAAnC,EAA6CC,QAA7C,EAAuD+X,IAAvD,EAA6DjY,KAA7D,EAAoE8Y,aAApE,CAAP;AACD;AACF;;AAED,aAAK7O,UAAL;AACD,OAxBc,CAAf;AAyBA,UAAIoH,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMmH,cAAN,CAAqBP,IAArB,EAA2BhY,QAA3B,EAAqCC,QAArC,EAA+CgY,OAA/C,EAAwDlY,KAAxD,CAAP;AACD;;AAEDgZ,EAAAA,iBAAiB,CAAC3d,IAAD,EAAO;AACtB,QAAI,KAAKuN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMhJ,cAAc,GAAG,KAAKi8B,kBAAL,CAAwB,MAAM;AACnD,cAAMtK,IAAI,GAAG,KAAKsC,oBAAL,EAAb;AACA,YAAI,CAAC,KAAKzrB,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAL,EAA+B,KAAK0V,UAAL;AAC/B,eAAOsnB,IAAP;AACD,OAJsB,CAAvB;;AAMA,UAAI3xB,cAAJ,EAAoB;AAClBvE,QAAAA,IAAI,CAACuE,cAAL,GAAsBA,cAAtB;AACD;AACF;;AAED,UAAMoZ,iBAAN,CAAwB3d,IAAxB;AACD;;AAEDuiC,EAAAA,WAAW,CAACloB,IAAD,EAAOmoB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C5sB,IAA5C,EAAkD;AAC3D,QAAI4gB,OAAO,CAACp+B,KAAK,CAAC+E,GAAN,CAAUzF,KAAX,CAAP,GAA2B8qC,OAA3B,IAAsC,CAAC,KAAKxL,qBAAL,EAAvC,IAAuE,KAAK3oB,YAAL,CAAkB,IAAlB,CAA3E,EAAoG;AAClG,YAAMvO,IAAI,GAAG,KAAKkB,WAAL,CAAiBshC,YAAjB,EAA+BC,YAA/B,CAAb;AACAziC,MAAAA,IAAI,CAACqB,UAAL,GAAkBgZ,IAAlB;;AAEA,YAAM7d,MAAM,GAAG,KAAKk9B,6BAAL,EAAf;;AAEA,UAAIl9B,MAAJ,EAAY;AACVwD,QAAAA,IAAI,CAAC6N,cAAL,GAAsBrR,MAAtB;AACD,OAFD,MAEO;AACLwD,QAAAA,IAAI,CAAC6N,cAAL,GAAsB,KAAK6wB,mBAAL,EAAtB;AACD;;AAED,WAAKr5B,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB;AACA,aAAO,KAAKuiC,WAAL,CAAiBviC,IAAjB,EAAuBwiC,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,EAA4D5sB,IAA5D,CAAP;AACD;;AAED,WAAO,MAAMysB,WAAN,CAAkBloB,IAAlB,EAAwBmoB,YAAxB,EAAsCC,YAAtC,EAAoDC,OAApD,EAA6D5sB,IAA7D,CAAP;AACD;;AAEDuF,EAAAA,iBAAiB,CAAC3S,IAAD,EAAO7D,QAAP,EAAiB89B,aAAjB,EAAgCh9B,SAAhC,EAA2C,CAAE;;AAE9Di9B,EAAAA,qBAAqB,GAAG,CAAE;;AAE1B3zB,EAAAA,WAAW,CAACjP,IAAD,EAAO;AAChB,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAKsa,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAAC6B,EAA9D,EAAkE;AAChE,aAAO,KAAK6lC,8BAAL,CAAoChgC,IAApC,CAAP;AACD;;AAED,WAAO,MAAMiP,WAAN,CAAkBjP,IAAlB,CAAP;AACD;;AAEDwP,EAAAA,WAAW,CAACxP,IAAD,EAAO;AAChB,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAAC2E,OAAjB,CAAJ,EAA+B;AAC7B,WAAKiP,MAAL,CAAY5T,KAAK,CAAC2E,OAAlB;AACA,aAAO,KAAK+iC,8BAAL,CAAoChgC,IAApC,EAA0C,IAA1C,CAAP;AACD,KAHD,MAGO,IAAI,KAAK2M,GAAL,CAASrU,KAAK,CAAC6B,EAAf,CAAJ,EAAwB;AAC7B,YAAMC,MAAM,GAAG4F,IAAf;AACA5F,MAAAA,MAAM,CAACiH,UAAP,GAAoB,KAAKuL,eAAL,EAApB;AACA,WAAKmB,SAAL;AACA,aAAO,KAAK1I,UAAL,CAAgBjL,MAAhB,EAAwB,oBAAxB,CAAP;AACD,KALM,MAKA,IAAI,KAAK+T,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AACnC,YAAM4J,IAAI,GAAG/X,IAAb;AACA,WAAKwM,gBAAL,CAAsB,WAAtB;AACAuL,MAAAA,IAAI,CAAC5K,EAAL,GAAU,KAAKC,eAAL,EAAV;AACA,WAAKW,SAAL;AACA,aAAO,KAAK1I,UAAL,CAAgB0S,IAAhB,EAAsB,8BAAtB,CAAP;AACD,KANM,MAMA;AACL,aAAO,MAAMvI,WAAN,CAAkBxP,IAAlB,CAAP;AACD;AACF;;AAED6iC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKt0B,YAAL,CAAkB,UAAlB,KAAiC,KAAKgE,SAAL,GAAiBtS,IAAjB,KAA0B3H,KAAK,CAACwE,MAAxE;AACD;;AAED8Y,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAKitB,eAAL,EAAJ,EAA4B;AAC1B,YAAMxB,GAAG,GAAG,KAAKj8B,SAAL,EAAZ;AACA,WAAK2E,IAAL;AACA,WAAK+2B,UAAL,CAAgBO,GAAhB,EAAqB,IAArB,EAA2B,IAA3B;AACAA,MAAAA,GAAG,CAACC,QAAJ,GAAe,IAAf;AACA,aAAOD,GAAP;AACD;;AAED,QAAI,KAAK18B,KAAL,CAAW5N,KAAX,KAAqB,WAAzB,EAAsC;AACpC,YAAMif,MAAM,GAAG,KAAKgrB,kBAAL,CAAwB,KAAK57B,SAAL,EAAxB,EAA0C,KAAKT,KAAL,CAAW5N,KAArD,EAA4D,IAA5D,CAAf;AACA,UAAIif,MAAJ,EAAY,OAAOA,MAAP;AACb;;AAED,WAAO,MAAMJ,4BAAN,EAAP;AACD;;AAEDktB,EAAAA,qBAAqB,CAAC37B,OAAD,EAAUvD,QAAV,EAAoB;AACvC,QAAI,KAAKe,KAAL,CAAW1E,IAAX,KAAoB3H,KAAK,CAACkE,MAA9B,EAAsC;AACpC,YAAMumC,KAAK,GAAG,KAAKxwB,SAAL,EAAd;;AAEA,UAAIwwB,KAAK,CAAC9iC,IAAN,KAAe3H,KAAK,CAACL,IAArB,IAA6B8qC,KAAK,CAAChsC,KAAN,KAAgB,MAAjD,EAAyD;AACvD,cAAMiJ,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,aAAK8G,MAAL,CAAY5T,KAAK,CAACkE,MAAlB;AACA,aAAKgQ,gBAAL,CAAsB,MAAtB;AACA,eAAO,KAAKgzB,sBAAL,CAA4Bx/B,IAA5B,EAAkC,IAAlC,CAAP;AACD;AACF;;AAED,WAAO,MAAM8iC,qBAAN,CAA4B37B,OAA5B,EAAqCvD,QAArC,CAAP;AACD;;AAEDi+B,EAAAA,mBAAmB,GAAG;AACpB,WAAO,KAAK1K,eAAL,CAAqB,CAAC,QAAD,EAAW,WAAX,EAAwB,SAAxB,CAArB,CAAP;AACD;;AAED6L,EAAAA,gBAAgB,CAAC7+B,SAAD,EAAY2c,MAAZ,EAAoBnc,KAApB,EAA2Bs+B,sBAA3B,EAAmD;AACjE,UAAMrB,aAAa,GAAG,KAAKC,mBAAL,EAAtB;AACA,QAAID,aAAJ,EAAmB9gB,MAAM,CAAC8gB,aAAP,GAAuBA,aAAvB;AACnB,UAAMoB,gBAAN,CAAuB7+B,SAAvB,EAAkC2c,MAAlC,EAA0Cnc,KAA1C,EAAiDs+B,sBAAjD;AACD;;AAEDC,EAAAA,4BAA4B,CAAC/+B,SAAD,EAAY2c,MAAZ,EAAoBnc,KAApB,EAA2B0N,QAA3B,EAAqC4wB,sBAArC,EAA6D;AACvF,UAAMxL,SAAS,GAAG,KAAKD,gBAAL,CAAsB,CAAC,UAAD,EAAa,UAAb,EAAyB,SAAzB,CAAtB,CAAlB;AACA5gC,IAAAA,MAAM,CAACwD,MAAP,CAAc0mB,MAAd,EAAsB2W,SAAtB;AACA,UAAMoD,GAAG,GAAG,KAAKP,wBAAL,CAA8BxZ,MAA9B,CAAZ;;AAEA,QAAI+Z,GAAJ,EAAS;AACP12B,MAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoBq2B,GAApB;;AAEA,UAAIpD,SAAS,CAAC6J,QAAd,EAAwB;AACtB,aAAKp/B,KAAL,CAAW4e,MAAM,CAAC3f,KAAlB,EAAyB,sDAAzB;AACD;;AAED,UAAIkR,QAAJ,EAAc;AACZ,aAAKnQ,KAAL,CAAW4e,MAAM,CAAC3f,KAAlB,EAAyB,oDAAzB;AACD;;AAED,UAAI2f,MAAM,CAAC8gB,aAAX,EAA0B;AACxB,aAAK1/B,KAAL,CAAW4e,MAAM,CAAC3f,KAAlB,EAA0B,4DAA2D2f,MAAM,CAAC8gB,aAAc,IAA1G;AACD;;AAED;AACD;;AAED,UAAMsB,4BAAN,CAAmC/+B,SAAnC,EAA8C2c,MAA9C,EAAsDnc,KAAtD,EAA6D0N,QAA7D,EAAuE4wB,sBAAvE;AACD;;AAEDE,EAAAA,4BAA4B,CAACC,YAAD,EAAe;AACzC,UAAM3wB,QAAQ,GAAG,KAAK9F,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAjB;AACA,QAAIgZ,QAAJ,EAAc2wB,YAAY,CAAC3wB,QAAb,GAAwB,IAAxB;;AAEd,QAAI2wB,YAAY,CAAC1I,QAAb,IAAyB,KAAK3tB,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA7B,EAAuD;AACrD,WAAKgJ,KAAL,CAAWkhC,YAAY,CAACjiC,KAAxB,EAA+B,mDAA/B;AACD;;AAED,QAAIiiC,YAAY,CAACpyB,OAAb,IAAwB,KAAKjE,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA5B,EAAsD;AACpD,WAAKgJ,KAAL,CAAWkhC,YAAY,CAACjiC,KAAxB,EAA+B,kDAA/B;AACD;AACF;;AAEDsU,EAAAA,wBAAwB,CAACzV,IAAD,EAAOoC,IAAP,EAAa;AACnC,UAAM2V,IAAI,GAAG3V,IAAI,CAACnC,IAAL,KAAc,YAAd,GAA6B,KAAKihC,0BAAL,CAAgClhC,IAAhC,EAAsCoC,IAAtC,CAA7B,GAA2E+I,SAAxF;AACA,WAAO4M,IAAI,IAAI,MAAMtC,wBAAN,CAA+BzV,IAA/B,EAAqCoC,IAArC,CAAf;AACD;;AAEDsT,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK+rB,oBAAL,EAAJ,EAAiC,OAAO,IAAP;AACjC,WAAO,MAAM/rB,4BAAN,EAAP;AACD;;AAEDG,EAAAA,gBAAgB,CAACzT,IAAD,EAAO0T,IAAP,EAAalR,QAAb,EAAuBC,QAAvB,EAAiCkR,gBAAjC,EAAmD;AACjE,QAAI,CAACA,gBAAD,IAAqB,CAAC,KAAKhJ,KAAL,CAAWzU,KAAK,CAACmB,QAAjB,CAA1B,EAAsD;AACpD,aAAO,MAAMoc,gBAAN,CAAuBzT,IAAvB,EAA6B0T,IAA7B,EAAmClR,QAAnC,EAA6CC,QAA7C,EAAuDkR,gBAAvD,CAAP;AACD;;AAED,UAAMC,MAAM,GAAG,KAAKC,QAAL,CAAc,MAAM,MAAMJ,gBAAN,CAAuBzT,IAAvB,EAA6B0T,IAA7B,EAAmClR,QAAnC,EAA6CC,QAA7C,CAApB,CAAf;;AAEA,QAAI,CAACmR,MAAM,CAAChW,IAAZ,EAAkB;AAChB+V,MAAAA,gBAAgB,CAAC5U,KAAjB,GAAyB6U,MAAM,CAACE,KAAP,CAAazM,GAAb,IAAoB,KAAK9E,KAAL,CAAWxD,KAAxD;AACA,aAAOiB,IAAP;AACD;;AAED,QAAI4T,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClB,WAAOH,MAAM,CAAChW,IAAd;AACD;;AAED4X,EAAAA,cAAc,CAAC5X,IAAD,EAAO4E,QAAP,EAAiBC,QAAjB,EAA2B;AACvC7E,IAAAA,IAAI,GAAG,MAAM4X,cAAN,CAAqB5X,IAArB,EAA2B4E,QAA3B,EAAqCC,QAArC,CAAP;;AAEA,QAAI,KAAK8H,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5BuG,MAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,WAAK3E,gBAAL,CAAsB9N,IAAtB;AACD;;AAED,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAMue,YAAY,GAAG,KAAK3W,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAArB;AACAgT,MAAAA,YAAY,CAACxW,UAAb,GAA0BrB,IAA1B;AACA6X,MAAAA,YAAY,CAAChK,cAAb,GAA8B,KAAKmrB,qBAAL,EAA9B;AACA,aAAO,KAAK3zB,UAAL,CAAgBwS,YAAhB,EAA8B,sBAA9B,CAAP;AACD;;AAED,WAAO7X,IAAP;AACD;;AAEDgY,EAAAA,sBAAsB,CAAChY,IAAD,EAAO;AAC3B,UAAM4E,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAMw+B,SAAS,GAAG,KAAKl1B,aAAL,CAAmB,SAAnB,CAAlB;AACA,QAAI/D,WAAJ;;AAEA,QAAI,KAAK2C,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1BmS,MAAAA,WAAW,GAAG,KAAK62B,2BAAL,EAAd;AACD;;AAED,QAAI,CAAC72B,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,MAAM4N,sBAAN,CAA6BhY,IAA7B,CAAd;AACD;;AAED,QAAIoK,WAAW,IAAIi5B,SAAnB,EAA8B;AAC5B,WAAKC,kBAAL,CAAwBl5B,WAAxB,EAAqCxF,QAArC,EAA+CC,QAA/C;AACAuF,MAAAA,WAAW,CAAC4G,OAAZ,GAAsB,IAAtB;AACD;;AAED,WAAO5G,WAAP;AACD;;AAEDqO,EAAAA,YAAY,CAACzY,IAAD,EAAO0Y,WAAP,EAAoBC,UAApB,EAAgC;AAC1C,QAAI,CAAC,CAACD,WAAD,IAAgBC,UAAjB,KAAgC,KAAKpK,YAAL,CAAkB,YAAlB,CAApC,EAAqE;AACnE;AACD;;AAED,UAAMkK,YAAN,CAAmBzY,IAAnB,EAAyB0Y,WAAzB,EAAsCC,UAAtC,EAAkD3Y,IAAI,CAACgR,OAAL,GAAetR,eAAf,GAAiCP,UAAnF;AACA,UAAMoF,cAAc,GAAG,KAAKi1B,wBAAL,EAAvB;AACA,QAAIj1B,cAAJ,EAAoBvE,IAAI,CAACuE,cAAL,GAAsBA,cAAtB;AACrB;;AAEDg/B,EAAAA,4BAA4B,CAACvjC,IAAD,EAAO;AACjC,QAAI,CAACA,IAAI,CAACyS,QAAN,IAAkB,KAAK9F,GAAL,CAASrU,KAAK,CAACgC,IAAf,CAAtB,EAA4C;AAC1C0F,MAAAA,IAAI,CAACwjC,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMvjC,IAAI,GAAG,KAAKu6B,wBAAL,EAAb;AACA,QAAIv6B,IAAJ,EAAUD,IAAI,CAAC6N,cAAL,GAAsB5N,IAAtB;AACX;;AAEDuZ,EAAAA,kBAAkB,CAACxZ,IAAD,EAAO;AACvB,SAAKujC,4BAAL,CAAkCvjC,IAAlC;;AAEA,QAAIA,IAAI,CAACgR,OAAL,IAAgB,KAAKjE,KAAL,CAAWzU,KAAK,CAACmrC,KAAjB,CAApB,EAA6C;AAC3C,WAAKvhC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,mDAA7B;AACD;;AAED,WAAO,MAAMqY,kBAAN,CAAyBxZ,IAAzB,CAAP;AACD;;AAEDyZ,EAAAA,yBAAyB,CAACzZ,IAAD,EAAO;AAC9B,QAAIA,IAAI,CAACshC,QAAT,EAAmB;AACjB,WAAKp/B,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,uDAAvB;AACD;;AAED,QAAInB,IAAI,CAAC4hC,aAAT,EAAwB;AACtB,WAAK1/B,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAwB,4DAA2DnB,IAAI,CAAC4hC,aAAc,IAAtG;AACD;;AAED,SAAK2B,4BAAL,CAAkCvjC,IAAlC;AACA,WAAO,MAAMyZ,yBAAN,CAAgCzZ,IAAhC,CAAP;AACD;;AAEDkE,EAAAA,eAAe,CAACC,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C6F,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzF,UAAME,cAAc,GAAG,KAAKi1B,wBAAL,EAAvB;AACA,QAAIj1B,cAAJ,EAAoBpE,MAAM,CAACoE,cAAP,GAAwBA,cAAxB;AACpB,UAAML,eAAN,CAAsBC,SAAtB,EAAiChE,MAAjC,EAAyC3B,WAAzC,EAAsDD,OAAtD,EAA+D6F,aAA/D,EAA8EC,iBAA9E;AACD;;AAEDwV,EAAAA,sBAAsB,CAAC1V,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C;AAC9D,UAAMgG,cAAc,GAAG,KAAKi1B,wBAAL,EAAvB;AACA,QAAIj1B,cAAJ,EAAoBpE,MAAM,CAACoE,cAAP,GAAwBA,cAAxB;AACpB,UAAMsV,sBAAN,CAA6B1V,SAA7B,EAAwChE,MAAxC,EAAgD3B,WAAhD,EAA6DD,OAA7D;AACD;;AAEDub,EAAAA,eAAe,CAAC9Z,IAAD,EAAO;AACpB,UAAM8Z,eAAN,CAAsB9Z,IAAtB;;AAEA,QAAIA,IAAI,CAACK,UAAL,IAAmB,KAAKkN,YAAL,CAAkB,GAAlB,CAAvB,EAA+C;AAC7CvN,MAAAA,IAAI,CAAC+Z,mBAAL,GAA2B,KAAKye,oBAAL,EAA3B;AACD;;AAED,QAAI,KAAKrqB,aAAL,CAAmB,YAAnB,CAAJ,EAAsC;AACpCnO,MAAAA,IAAI,CAACgQ,UAAL,GAAkB,KAAK2uB,qBAAL,CAA2B,YAA3B,CAAlB;AACD;AACF;;AAEDzkB,EAAAA,iBAAiB,CAACpY,IAAD,EAAO,GAAGo0B,IAAV,EAAgB;AAC/B,UAAM3xB,cAAc,GAAG,KAAKi1B,wBAAL,EAAvB;AACA,QAAIj1B,cAAJ,EAAoBzC,IAAI,CAACyC,cAAL,GAAsBA,cAAtB;AACpB,UAAM2V,iBAAN,CAAwBpY,IAAxB,EAA8B,GAAGo0B,IAAjC;AACD;;AAED5a,EAAAA,mBAAmB,CAACtb,IAAD,EAAOub,cAAP,EAAuB;AACxC,UAAMhX,cAAc,GAAG,KAAKi1B,wBAAL,EAAvB;AACA,QAAIj1B,cAAJ,EAAoBvE,IAAI,CAACuE,cAAL,GAAsBA,cAAtB;AACpB,UAAM+W,mBAAN,CAA0Btb,IAA1B,EAAgCub,cAAhC;AACD;;AAEDC,EAAAA,UAAU,CAACzD,IAAD,EAAO7X,IAAP,EAAa;AACrB,UAAMsb,UAAN,CAAiBzD,IAAjB,EAAuB7X,IAAvB;;AAEA,QAAI6X,IAAI,CAAC5K,EAAL,CAAQlN,IAAR,KAAiB,YAAjB,IAAiC,KAAK0M,GAAL,CAASrU,KAAK,CAACgC,IAAf,CAArC,EAA2D;AACzDyd,MAAAA,IAAI,CAACyrB,QAAL,GAAgB,IAAhB;AACD;;AAED,UAAMvjC,IAAI,GAAG,KAAKu6B,wBAAL,EAAb;;AAEA,QAAIv6B,IAAJ,EAAU;AACR8X,MAAAA,IAAI,CAAC5K,EAAL,CAAQU,cAAR,GAAyB5N,IAAzB;AACA,WAAK6N,gBAAL,CAAsBiK,IAAI,CAAC5K,EAA3B;AACD;AACF;;AAEDsO,EAAAA,iCAAiC,CAACzb,IAAD,EAAO0b,IAAP,EAAa;AAC5C,QAAI,KAAK3O,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B0G,MAAAA,IAAI,CAAC4N,UAAL,GAAkB,KAAKorB,qBAAL,EAAlB;AACD;;AAED,WAAO,MAAMvd,iCAAN,CAAwCzb,IAAxC,EAA8C0b,IAA9C,CAAP;AACD;;AAED5E,EAAAA,gBAAgB,CAAC,GAAGof,IAAJ,EAAU;AACxB,QAAIvxB,KAAJ;AACA,QAAIkX,GAAJ;AACA,QAAI6nB,QAAJ;;AAEA,QAAI,KAAK32B,KAAL,CAAWzU,KAAK,CAACoZ,WAAjB,CAAJ,EAAmC;AACjC/M,MAAAA,KAAK,GAAG,KAAKA,KAAL,CAAWyR,KAAX,EAAR;AACAyF,MAAAA,GAAG,GAAG,KAAK5F,QAAL,CAAc,MAAM,MAAMa,gBAAN,CAAuB,GAAGof,IAA1B,CAApB,EAAqDvxB,KAArD,CAAN;AACA,UAAI,CAACkX,GAAG,CAAC3F,KAAT,EAAgB,OAAO2F,GAAG,CAAC7b,IAAX;AAHiB,YAK/BmH,OAL+B,GAM7B,KAAKxC,KANwB,CAK/BwC,OAL+B;;AAQjC,UAAIA,OAAO,CAACA,OAAO,CAAClF,MAAR,GAAiB,CAAlB,CAAP,KAAgCwE,OAAO,CAACsV,MAA5C,EAAoD;AAClD5U,QAAAA,OAAO,CAAClF,MAAR,IAAkB,CAAlB;AACD,OAFD,MAEO,IAAIkF,OAAO,CAACA,OAAO,CAAClF,MAAR,GAAiB,CAAlB,CAAP,KAAgCwE,OAAO,CAACuV,MAA5C,EAAoD;AACzD7U,QAAAA,OAAO,CAAClF,MAAR,IAAkB,CAAlB;AACD;AACF;;AAED,QAAI,EAAE4Z,GAAG,IAAIA,GAAG,CAAC3F,KAAb,KAAuB,CAAC,KAAK3I,YAAL,CAAkB,GAAlB,CAA5B,EAAoD;AAClD,aAAO,MAAMuJ,gBAAN,CAAuB,GAAGof,IAA1B,CAAP;AACD;;AAED,QAAI3xB,cAAJ;AACAI,IAAAA,KAAK,GAAGA,KAAK,IAAI,KAAKA,KAAL,CAAWyR,KAAX,EAAjB;AACA,UAAMzc,KAAK,GAAG,KAAKsc,QAAL,CAAc+G,KAAK,IAAI;AACnCzY,MAAAA,cAAc,GAAG,KAAKk1B,qBAAL,EAAjB;AACA,YAAMr3B,IAAI,GAAG,MAAM0U,gBAAN,CAAuB,GAAGof,IAA1B,CAAb;;AAEA,UAAI9zB,IAAI,CAACnC,IAAL,KAAc,yBAAd,IAA2CmC,IAAI,CAACb,KAAL,IAAca,IAAI,CAACb,KAAL,CAAWiC,aAAxE,EAAuF;AACrFwZ,QAAAA,KAAK;AACN;;AAED,UAAIzY,cAAc,IAAIA,cAAc,CAACvC,MAAf,CAAsBC,MAAtB,KAAiC,CAAvD,EAA0D;AACxD,aAAKia,0BAAL,CAAgC9Z,IAAhC,EAAsCmC,cAAtC;AACD;;AAEDnC,MAAAA,IAAI,CAACmC,cAAL,GAAsBA,cAAtB;AACA,aAAOnC,IAAP;AACD,KAda,EAcXuC,KAdW,CAAd;AAeA,QAAI,CAAChL,KAAK,CAACuc,KAAP,IAAgB,CAACvc,KAAK,CAACujB,OAA3B,EAAoC,OAAOvjB,KAAK,CAACqG,IAAb;;AAEpC,QAAI,CAAC6b,GAAL,EAAU;AACR+a,MAAAA,MAAM,CAAC,CAAC,KAAK9a,SAAL,CAAe,KAAf,CAAF,CAAN;AACA4nB,MAAAA,QAAQ,GAAG,KAAKztB,QAAL,CAAc,MAAM,MAAMa,gBAAN,CAAuB,GAAGof,IAA1B,CAApB,EAAqDvxB,KAArD,CAAX;AACA,UAAI,CAAC++B,QAAQ,CAACxtB,KAAd,EAAqB,OAAOwtB,QAAQ,CAAC1jC,IAAhB;AACtB;;AAED,QAAI6b,GAAG,IAAIA,GAAG,CAAC7b,IAAf,EAAqB;AACnB,WAAK2E,KAAL,GAAakX,GAAG,CAAC1F,SAAjB;AACA,aAAO0F,GAAG,CAAC7b,IAAX;AACD;;AAED,QAAIrG,KAAK,CAACqG,IAAV,EAAgB;AACd,WAAK2E,KAAL,GAAahL,KAAK,CAACwc,SAAnB;AACA,aAAOxc,KAAK,CAACqG,IAAb;AACD;;AAED,QAAI0jC,QAAQ,IAAIA,QAAQ,CAAC1jC,IAAzB,EAA+B;AAC7B,WAAK2E,KAAL,GAAa++B,QAAQ,CAACvtB,SAAtB;AACA,aAAOutB,QAAQ,CAAC1jC,IAAhB;AACD;;AAED,QAAI6b,GAAG,IAAIA,GAAG,CAACM,MAAf,EAAuB,MAAMN,GAAG,CAAC3F,KAAV;AACvB,QAAIvc,KAAK,CAACwiB,MAAV,EAAkB,MAAMxiB,KAAK,CAACuc,KAAZ;AAClB,QAAIwtB,QAAQ,IAAIA,QAAQ,CAACvnB,MAAzB,EAAiC,MAAMunB,QAAQ,CAACxtB,KAAf;AACjC,UAAM2F,GAAG,IAAIA,GAAG,CAAC3F,KAAX,IAAoBvc,KAAK,CAACuc,KAA1B,IAAmCwtB,QAAQ,IAAIA,QAAQ,CAACxtB,KAA9D;AACD;;AAEDumB,EAAAA,eAAe,CAAC/3B,sBAAD,EAAyB;AACtC,QAAI,CAAC,KAAKoX,SAAL,CAAe,KAAf,CAAD,IAA0B,KAAKvO,YAAL,CAAkB,GAAlB,CAA9B,EAAsD;AACpD,aAAO,KAAKkxB,oBAAL,EAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAMhC,eAAN,CAAsB/3B,sBAAtB,CAAP;AACD;AACF;;AAED0X,EAAAA,UAAU,CAACpc,IAAD,EAAO;AACf,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM0c,MAAM,GAAG,KAAKC,QAAL,CAAc+G,KAAK,IAAI;AACpC,cAAMpP,UAAU,GAAG,KAAKqsB,oCAAL,CAA0C3hC,KAAK,CAACgB,KAAhD,CAAnB;AACA,YAAI,KAAKqb,kBAAL,MAA6B,CAAC,KAAK5H,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,CAAlC,EAA2DqjB,KAAK;AAChE,eAAOpP,UAAP;AACD,OAJc,CAAf;AAKA,UAAIoI,MAAM,CAACkH,OAAX,EAAoB;;AAEpB,UAAI,CAAClH,MAAM,CAACmG,MAAZ,EAAoB;AAClB,YAAInG,MAAM,CAACE,KAAX,EAAkB,KAAKvR,KAAL,GAAaqR,MAAM,CAACG,SAApB;AAClBnW,QAAAA,IAAI,CAAC4N,UAAL,GAAkBoI,MAAM,CAAChW,IAAzB;AACD;AACF;;AAED,WAAO,MAAMoc,UAAN,CAAiBpc,IAAjB,CAAP;AACD;;AAEDma,EAAAA,4BAA4B,CAACpF,KAAD,EAAQ;AAClC,QAAI,KAAKpI,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5B,UAAIsb,KAAK,CAAC9U,IAAN,KAAe,YAAnB,EAAiC;AAC/B,aAAKiC,KAAL,CAAW6S,KAAK,CAAC5T,KAAjB,EAAwB,gFAAxB;AACD;;AAED4T,MAAAA,KAAK,CAACtC,QAAN,GAAiB,IAAjB;AACD;;AAED,UAAMxS,IAAI,GAAG,KAAKu6B,wBAAL,EAAb;AACA,QAAIv6B,IAAJ,EAAU8U,KAAK,CAAClH,cAAN,GAAuB5N,IAAvB;AACV,SAAK6N,gBAAL,CAAsBiH,KAAtB;AACA,WAAOA,KAAP;AACD;;AAEDrP,EAAAA,YAAY,CAAC1F,IAAD,EAAO2F,SAAP,EAAkBpD,kBAAlB,EAAsC;AAChD,YAAQvC,IAAI,CAACC,IAAb;AACE,WAAK,sBAAL;AACE,eAAO,MAAMyF,YAAN,CAAmB,KAAKyP,mBAAL,CAAyBnV,IAAzB,CAAnB,EAAmD2F,SAAnD,EAA8DpD,kBAA9D,CAAP;;AAEF,WAAK,qBAAL;AACE,eAAO,MAAMmD,YAAN,CAAmB1F,IAAnB,EAAyB2F,SAAzB,EAAoCpD,kBAApC,CAAP;;AAEF,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACEvC,QAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKqE,YAAL,CAAkB1F,IAAI,CAACqB,UAAvB,EAAmCsE,SAAnC,EAA8CpD,kBAA9C,CAAlB;AACA,eAAOvC,IAAP;;AAEF;AACE,eAAO,MAAM0F,YAAN,CAAmB1F,IAAnB,EAAyB2F,SAAzB,EAAoCpD,kBAApC,CAAP;AAdJ;AAgBD;;AAEDJ,EAAAA,SAAS,CAACC,IAAD,EAAOC,WAAW,GAAG1C,SAArB,EAAgC2C,YAAhC,EAA8CC,kBAA9C,EAAkE;AACzE,YAAQH,IAAI,CAACnC,IAAb;AACE,WAAK,sBAAL;AACE;;AAEF,WAAK,qBAAL;AACE,aAAKkC,SAAL,CAAeC,IAAI,CAAC4/B,SAApB,EAA+B3/B,WAA/B,EAA4CC,YAA5C,EAA0D,oBAA1D;AACA;;AAEF,WAAK,gBAAL;AACA,WAAK,qBAAL;AACA,WAAK,iBAAL;AACE,aAAKH,SAAL,CAAeC,IAAI,CAACf,UAApB,EAAgCgB,WAAhC,EAA6CC,YAA7C,EAA2DC,kBAA3D;AACA;;AAEF;AACE,cAAMJ,SAAN,CAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,YAAnC,EAAiDC,kBAAjD;AACA;AAhBJ;AAkBD;;AAEDohC,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKh/B,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACsE,KAAX;AACE,eAAO,KAAKwQ,eAAL,CAAqB,IAArB,CAAP;;AAEF;AACE,eAAO,MAAMu2B,gBAAN,EAAP;AALJ;AAOD;;AAEDC,EAAAA,4BAA4B,CAACxhC,IAAD,EAAO;AACjC,QAAI,KAAKmL,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMkQ,aAAa,GAAG,KAAK+a,oBAAL,EAAtB;;AAEA,UAAI,KAAKzrB,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAJ,EAA8B;AAC5B,cAAMwiB,IAAI,GAAG,MAAMkoB,4BAAN,CAAmCxhC,IAAnC,CAAb;AACAsZ,QAAAA,IAAI,CAACnX,cAAL,GAAsBkZ,aAAtB;AACA,eAAO/B,IAAP;AACD;;AAED,WAAK9M,UAAL,CAAgB,KAAKjK,KAAL,CAAWxD,KAA3B,EAAkC7I,KAAK,CAACY,MAAxC;AACD;;AAED,WAAO,MAAM0qC,4BAAN,CAAmCxhC,IAAnC,CAAP;AACD;;AAEDsX,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKnM,YAAL,CAAkB,GAAlB,KAA0B,MAAMmM,aAAN,EAAjC;AACD;;AAEDC,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK5M,KAAL,CAAWzU,KAAK,CAACgC,IAAjB,KAA0B,KAAKyS,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAA1B,IAAqD,MAAMqgB,eAAN,EAA5D;AACD;;AAEDS,EAAAA,iBAAiB,CAAC,GAAG8b,IAAJ,EAAU;AACzB,UAAMl2B,IAAI,GAAG,MAAMoa,iBAAN,CAAwB,GAAG8b,IAA3B,CAAb;;AAEA,QAAIl2B,IAAI,CAACC,IAAL,KAAc,mBAAd,IAAqCD,IAAI,CAAC6N,cAA1C,IAA4D7N,IAAI,CAAC+Q,KAAL,CAAW5P,KAAX,GAAmBnB,IAAI,CAAC6N,cAAL,CAAoB1M,KAAvG,EAA8G;AAC5G,WAAKe,KAAL,CAAWlC,IAAI,CAAC6N,cAAL,CAAoB1M,KAA/B,EAAsC,4DAA4D,2DAAlG;AACD;;AAED,WAAOnB,IAAP;AACD;;AAED4Y,EAAAA,gBAAgB,CAAC1S,IAAD,EAAO;AACrB,QAAI,KAAKvB,KAAL,CAAWsH,MAAX,KAAsB/F,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA9C,CAAJ,EAAuD;AACrD,aAAO,KAAK4S,QAAL,CAAcxgB,KAAK,CAAC0C,UAApB,EAAgC,CAAhC,CAAP;AACD,KAFD,MAEO;AACL,aAAO,MAAM4d,gBAAN,CAAuB1S,IAAvB,CAAP;AACD;AACF;;AAEDqR,EAAAA,gBAAgB,CAAC6B,QAAD,EAAWzT,SAAX,EAAsB;AACpC,SAAK,IAAI+D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,QAAQ,CAACnX,MAA7B,EAAqCyH,CAAC,EAAtC,EAA0C;AACxC,YAAMtH,IAAI,GAAGgX,QAAQ,CAAC1P,CAAD,CAArB;AACA,UAAI,CAACtH,IAAL,EAAW;;AAEX,cAAQA,IAAI,CAACnC,IAAb;AACE,aAAK,sBAAL;AACEmZ,UAAAA,QAAQ,CAAC1P,CAAD,CAAR,GAAc,KAAKyL,mBAAL,CAAyB/S,IAAzB,CAAd;AACA;;AAEF,aAAK,gBAAL;AACA,aAAK,iBAAL;AACE,cAAI,CAACuD,SAAL,EAAgB;AACdyT,YAAAA,QAAQ,CAAC1P,CAAD,CAAR,GAAc,KAAKyL,mBAAL,CAAyB/S,IAAzB,CAAd;AACD,WAFD,MAEO;AACL,iBAAKF,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,6CAAvB;AACD;;AAED;AAbJ;AAeD;;AAED,WAAO,MAAMoW,gBAAN,CAAuB,GAAGe,SAA1B,CAAP;AACD;;AAEDnD,EAAAA,mBAAmB,CAACnV,IAAD,EAAO;AACxBA,IAAAA,IAAI,CAACqB,UAAL,CAAgBwM,cAAhB,GAAiC7N,IAAI,CAAC6N,cAAtC;AACA,SAAKC,gBAAL,CAAsB9N,IAAI,CAACqB,UAA3B,EAAuCrB,IAAI,CAAC6N,cAAL,CAAoBpM,GAA3D,EAAgEzB,IAAI,CAAC6N,cAAL,CAAoBzM,GAApB,CAAwBK,GAAxF;AACA,WAAOzB,IAAI,CAACqB,UAAZ;AACD;;AAEDiY,EAAAA,gBAAgB,CAACF,QAAD,EAAWyqB,UAAX,EAAuB;AACrC,SAAK,IAAIn6B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0P,QAAQ,CAACnX,MAA7B,EAAqCyH,CAAC,EAAtC,EAA0C;AACxC,YAAMtH,IAAI,GAAGgX,QAAQ,CAAC1P,CAAD,CAArB;;AAEA,UAAItH,IAAI,IAAIA,IAAI,CAAC0hC,aAAb,IAA8B1hC,IAAI,CAACnC,IAAL,KAAc,sBAAhD,EAAwE;AACtE,aAAKiC,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,wCAAvB;AACD;AACF;;AAED,WAAOiY,QAAP;AACD;;AAEDiD,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKtP,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,MAAM+iB,gBAAN,EAAlC;AACD;;AAEDV,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAK5O,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,KAA2B,MAAMqiB,qBAAN,EAAlC;AACD;;AAEDooB,EAAAA,uBAAuB,GAAG;AACxB,WAAO,MAAMA,uBAAN,MAAmC,KAAKlB,eAAL,EAA1C;AACD;;AAEDhP,EAAAA,+BAA+B,CAAC7zB,IAAD,EAAO;AACpC,QAAI,KAAKuN,YAAL,CAAkB,GAAlB,CAAJ,EAA4B;AAC1B,YAAMkQ,aAAa,GAAG,KAAK+iB,kBAAL,CAAwB,MAAM,KAAKhI,oBAAL,EAA9B,CAAtB;AACA,UAAI/a,aAAJ,EAAmBzd,IAAI,CAACuE,cAAL,GAAsBkZ,aAAtB;AACpB;;AAED,WAAO,MAAMoW,+BAAN,CAAsC7zB,IAAtC,CAAP;AACD;;AAEDgkC,EAAAA,iCAAiC,CAAC7jC,MAAD,EAAS;AACxC,UAAM8jC,SAAS,GAAG,MAAMD,iCAAN,CAAwC7jC,MAAxC,CAAlB;AACA,UAAM+jC,UAAU,GAAG/jC,MAAM,CAAC6B,MAAP,CAAc,CAAd,CAAnB;AACA,UAAMmiC,eAAe,GAAGD,UAAU,IAAIA,UAAU,CAACjkC,IAAX,KAAoB,YAAlC,IAAkDikC,UAAU,CAACjsC,IAAX,KAAoB,MAA9F;AACA,WAAOksC,eAAe,GAAGF,SAAS,GAAG,CAAf,GAAmBA,SAAzC;AACD;;AAz8DsD,CAAzD;;AA68DA3rC,KAAK,CAAC8rC,WAAN,GAAoB,IAAI9sC,SAAJ,CAAc,IAAd,EAAoB;AACtCL,EAAAA,UAAU,EAAE;AAD0B,CAApB,CAApB;;AAGA,IAAIotC,YAAY,GAAIhkC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACzDikC,EAAAA,gBAAgB,CAACC,YAAD,EAAe;AAC7B,QAAI,KAAKx3B,KAAL,CAAWzU,KAAK,CAAC8rC,WAAjB,CAAJ,EAAmC;AACjC,YAAMpkC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA,WAAKy6B,aAAL,CAAmB,kCAAnB;AACAxkC,MAAAA,IAAI,CAAC/H,IAAL,GAAY,MAAMmV,eAAN,CAAsB,IAAtB,CAAZ;AACA,WAAKo3B,aAAL,CAAmB,kCAAnB;AACA,WAAKt4B,MAAL,CAAY5T,KAAK,CAAC8rC,WAAlB;AACA,aAAO,KAAKK,iBAAL,CAAuBzkC,IAAvB,EAA6BukC,YAA7B,CAAP;AACD;AACF;;AAEDE,EAAAA,iBAAiB,CAACzkC,IAAD,EAAOukC,YAAP,EAAqB;AACpC,UAAMG,UAAU,GAAG,CAAC,EAAE1kC,IAAI,CAACukC,YAAL,IAAqBvkC,IAAI,CAACC,IAAL,KAAc,aAArC,CAApB;AACAD,IAAAA,IAAI,CAACukC,YAAL,GAAoBA,YAApB;AACA,WAAOG,UAAU,GAAG1kC,IAAH,GAAU,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAA3B;AACD;;AAED4Y,EAAAA,gBAAgB,CAAC1S,IAAD,EAAO;AACrB,QAAIA,IAAI,KAAK,EAAT,IAAe,KAAK8B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,aAAO,KAAKqP,QAAL,CAAcxgB,KAAK,CAAC8rC,WAApB,EAAiC,CAAjC,CAAP;AACD;;AAED,WAAO,MAAMxrB,gBAAN,CAAuB,GAAGN,SAA1B,CAAP;AACD;;AAED7T,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK6/B,gBAAL,CAAsB,YAAtB,KAAuC,MAAM7/B,aAAN,CAAoB,GAAG6T,SAAvB,CAA9C;AACD;;AAEDlL,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKk3B,gBAAL,CAAsB,YAAtB,KAAuC,MAAMl3B,eAAN,CAAsB,GAAGkL,SAAzB,CAA9C;AACD;;AAED+C,EAAAA,iBAAiB,CAAC3S,IAAD,EAAO;AACtB,QAAIA,IAAI,KAAKyC,SAAb,EAAwB,MAAMkQ,iBAAN,CAAwB,GAAG/C,SAA3B;AACzB;;AAEDqrB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKW,gBAAL,CAAsB,SAAtB,KAAoC,MAAMX,gBAAN,CAAuB,GAAGrrB,SAA1B,CAA3C;AACD;;AAEDnW,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,QAAIA,IAAI,CAACnC,IAAL,KAAc,aAAlB,EAAiC,MAAMkC,SAAN,CAAgB,GAAGmW,SAAnB;AAClC;;AAED5S,EAAAA,YAAY,CAAC1F,IAAD,EAAO;AACjB,QAAIA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,aAAtB,IAAuCD,IAAI,CAACukC,YAAL,KAAsB,YAAjE,EAA+E;AAC7EvkC,MAAAA,IAAI,CAACukC,YAAL,GAAoB,SAApB;AACA,aAAOvkC,IAAP;AACD;;AAED,WAAO,MAAM0F,YAAN,CAAmB,GAAG4S,SAAtB,CAAP;AACD;;AAEDqsB,EAAAA,mBAAmB,CAAC3kC,IAAD,EAAO;AACxB,QAAIA,IAAI,CAACxI,KAAL,IAAcwI,IAAI,CAACxI,KAAL,CAAWyI,IAAX,KAAoB,aAAtC,EAAqD;AACrD,UAAM0kC,mBAAN,CAA0B,GAAGrsB,SAA7B;AACD;;AAED7C,EAAAA,wBAAwB,CAACzV,IAAD,EAAOoC,IAAP,EAAa;AACnC,QAAIA,IAAI,CAACnC,IAAL,KAAc,aAAd,IAA+BmC,IAAI,CAACb,KAAL,IAAca,IAAI,CAACb,KAAL,CAAWiC,aAA5D,EAA2E;AACzE,aAAO,MAAMiS,wBAAN,CAA+B,GAAG6C,SAAlC,CAAP;AACD;;AAED,QAAI,KAAKvL,KAAL,CAAWzU,KAAK,CAACgB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM2H,IAAI,GAAGjB,IAAb;AACAiB,MAAAA,IAAI,CAACzJ,KAAL,GAAa,KAAKitC,iBAAL,CAAuBriC,IAAvB,EAA6B,YAA7B,CAAb;AACA,WAAK2H,IAAL;AACA9I,MAAAA,IAAI,CAACmC,IAAL,GAAY,KAAKmS,cAAL,CAAoB,OAApB,CAAZ;AACA,aAAO,KAAKlQ,UAAL,CAAgBpE,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,SAAK8M,SAAL;AACA/N,IAAAA,IAAI,CAAC/H,IAAL,GAAYmK,IAAI,CAACnK,IAAjB;AACA,WAAO,KAAKwsC,iBAAL,CAAuBzkC,IAAvB,EAA6B,WAA7B,CAAP;AACD;;AAED4kC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAKN,gBAAL,CAAsB,gBAAtB,KAA2C,MAAMM,UAAN,CAAiB,GAAGtsB,SAApB,CAAlD;AACD;;AAEDusB,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAKP,gBAAL,CAAsB,YAAtB,KAAuC,MAAMO,eAAN,CAAsB,GAAGvsB,SAAzB,CAA9C;AACD;;AAEDwoB,EAAAA,UAAU,CAAC9gC,IAAD,EAAO0Y,WAAP,EAAoBC,UAApB,EAAgC;AACxC,UAAM1Y,IAAI,GAAGyY,WAAW,GAAG,kBAAH,GAAwB,iBAAhD;AACA,SAAK3O,IAAL;AACA,SAAK+6B,cAAL,CAAoB9kC,IAApB;AACA,UAAMokC,WAAW,GAAG,KAAKE,gBAAL,CAAsB,YAAtB,CAApB;;AAEA,QAAIF,WAAJ,EAAiB;AACf,UAAI,KAAKr3B,KAAL,CAAWzU,KAAK,CAACyE,QAAjB,KAA8B,KAAKgQ,KAAL,CAAWzU,KAAK,CAAC8rC,WAAjB,CAA9B,IAA+D,KAAKr3B,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAnE,EAA6F;AAC3FkH,QAAAA,IAAI,CAACmN,EAAL,GAAUi3B,WAAV;AACD,OAFD,MAEO,IAAIzrB,UAAU,IAAI,CAACD,WAAnB,EAAgC;AACrC1Y,QAAAA,IAAI,CAACmN,EAAL,GAAU,IAAV;AACAnN,QAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKqhC,iBAAL,CAAuBL,WAAvB,EAAoC,WAApC,CAAZ;AACA,eAAO,KAAK/+B,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD,OAJM,MAIA;AACL,aAAK2O,UAAL,CAAgB,IAAhB,EAAsB,0BAAtB;AACD;AACF,KAVD,MAUO;AACL,WAAK6J,YAAL,CAAkBzY,IAAlB,EAAwB0Y,WAAxB,EAAqCC,UAArC;AACD;;AAED,SAAKmB,eAAL,CAAqB9Z,IAArB;AACAA,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKkhC,gBAAL,CAAsB,WAAtB,KAAsC,KAAKS,cAAL,CAAoB,CAAC,CAAC/kC,IAAI,CAACK,UAA3B,CAAlD;AACA,WAAO,KAAKgF,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;AAEDuP,EAAAA,WAAW,CAACxP,IAAD,EAAO;AAChB,UAAMokC,WAAW,GAAG,KAAKE,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACF,WAAL,EAAkB,OAAO,MAAM50B,WAAN,CAAkB,GAAG8I,SAArB,CAAP;;AAElB,QAAI,CAAC,KAAK/J,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKxB,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAnC,EAA4D;AAC1D4G,MAAAA,IAAI,CAACkY,UAAL,GAAkB,EAAlB;AACAlY,MAAAA,IAAI,CAACgG,MAAL,GAAc,IAAd;AACAhG,MAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAKq6B,iBAAL,CAAuBL,WAAvB,EAAoC,aAApC,CAAnB;AACA,aAAO,KAAK/+B,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,SAAKsd,YAAL,CAAkB,mBAAlB;AACA,UAAM9C,SAAS,GAAG,KAAKpV,SAAL,EAAlB;AACAoV,IAAAA,SAAS,CAACwqB,QAAV,GAAqBZ,WAArB;AACApkC,IAAAA,IAAI,CAACkY,UAAL,GAAkB,CAAC,KAAK7S,UAAL,CAAgBmV,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,WAAO,MAAMhL,WAAN,CAAkBxP,IAAlB,CAAP;AACD;;AAEDilC,EAAAA,gCAAgC,CAACjlC,IAAD,EAAO;AACrC,QAAIA,IAAI,CAACkY,UAAL,IAAmBlY,IAAI,CAACkY,UAAL,CAAgBjW,MAAhB,GAAyB,CAAhD,EAAmD;AACjD,aAAO,IAAP;AACD;;AAED,WAAO,MAAMgjC,gCAAN,CAAuC,GAAG3sB,SAA1C,CAAP;AACD;;AAED4sB,EAAAA,WAAW,CAACllC,IAAD,EAAO;AAAA,UAEdkY,UAFc,GAGZlY,IAHY,CAEdkY,UAFc;;AAKhB,QAAIA,UAAU,IAAIA,UAAU,CAACjW,MAA7B,EAAqC;AACnCjC,MAAAA,IAAI,CAACkY,UAAL,GAAkBA,UAAU,CAACitB,MAAX,CAAkBnlC,IAAI,IAAIA,IAAI,CAACglC,QAAL,CAAc/kC,IAAd,KAAuB,aAAjD,CAAlB;AACD;;AAED,UAAMilC,WAAN,CAAkBllC,IAAlB;AACAA,IAAAA,IAAI,CAACkY,UAAL,GAAkBA,UAAlB;AACD;;AAEDjJ,EAAAA,WAAW,CAACjP,IAAD,EAAO;AAChB,UAAMokC,WAAW,GAAG,KAAKE,gBAAL,CAAsB,YAAtB,CAApB;AACA,QAAI,CAACF,WAAL,EAAkB,OAAO,MAAMn1B,WAAN,CAAkB,GAAGqJ,SAArB,CAAP;AAClBtY,IAAAA,IAAI,CAACkY,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAK3J,YAAL,CAAkB,MAAlB,CAAD,IAA8B,CAAC,KAAKxB,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAnC,EAA4D;AAC1D4G,MAAAA,IAAI,CAACgG,MAAL,GAAc,KAAKy+B,iBAAL,CAAuBL,WAAvB,EAAoC,eAApC,CAAd;AACA,WAAKr2B,SAAL;AACA,aAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED,UAAMwa,SAAS,GAAG,KAAKke,eAAL,CAAqB0L,WAArB,CAAlB;AACA5pB,IAAAA,SAAS,CAACC,KAAV,GAAkB2pB,WAAlB;AACA,SAAK/+B,UAAL,CAAgBmV,SAAhB,EAA2B,wBAA3B;AACAxa,IAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqBgW,SAArB;;AAEA,QAAI,KAAK7N,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAJ,EAA2B;AACzB,YAAMgsC,aAAa,GAAG,KAAKC,6BAAL,CAAmCrlC,IAAnC,CAAtB;AACA,UAAI,CAAColC,aAAL,EAAoB,KAAKE,0BAAL,CAAgCtlC,IAAhC;AACrB;;AAED,SAAKwM,gBAAL,CAAsB,MAAtB;AACAxM,IAAAA,IAAI,CAACgG,MAAL,GAAc,KAAKu/B,iBAAL,EAAd;AACA,SAAKx3B,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDulC,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKjB,gBAAL,CAAsB,eAAtB,KAA0C,MAAMiB,iBAAN,CAAwB,GAAGjtB,SAA3B,CAAjD;AACD;;AApLwD,CAA3D;;AAwLA,IAAIktB,WAAW,GAAInlC,UAAU,IAAI,cAAcA,UAAd,CAAyB;AACxDolC,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAK14B,KAAL,CAAWzU,KAAK,CAAC6C,MAAjB,CAAJ,EAA8B;AAC5B,YAAMuqC,gBAAgB,GAAG,KAAK/gC,KAAL,CAAWxD,KAApC;AACA,YAAMnB,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAKuH,GAAL,CAASrU,KAAK,CAAC6C,MAAf;;AAEA,UAAI,KAAK4R,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1B,cAAMA,IAAI,GAAG,KAAKohC,mBAAL,CAAyB,KAAK10B,KAAL,CAAWxD,KAApC,CAAb;AACA,cAAMwkC,UAAU,GAAG,KAAKlxB,gBAAL,CAAsBzU,IAAtB,EAA4B/H,IAA5B,CAAnB;AACA0tC,QAAAA,UAAU,CAAC1lC,IAAX,GAAkB,uBAAlB;;AAEA,YAAI,KAAK8M,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAJ,EAA8B;AAC5B,iBAAOysC,UAAP;AACD;AACF;;AAED,WAAK/2B,UAAL,CAAgB82B,gBAAhB;AACD;AACF;;AAEDjhC,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKghC,gBAAL,MAA2B,MAAMhhC,aAAN,CAAoB,GAAG6T,SAAvB,CAAlC;AACD;;AAvBuD,CAA1D;;AA2BA,SAASwD,SAAT,CAAmB8pB,OAAnB,EAA4B3tC,IAA5B,EAAkC;AAChC,SAAO2tC,OAAO,CAACC,IAAR,CAAaC,MAAM,IAAI;AAC5B,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAc7tC,IAArB;AACD,KAFD,MAEO;AACL,aAAO6tC,MAAM,KAAK7tC,IAAlB;AACD;AACF,GANM,CAAP;AAOD;;AACD,SAASoT,eAAT,CAAyBu6B,OAAzB,EAAkC3tC,IAAlC,EAAwCguC,MAAxC,EAAgD;AAC9C,QAAMH,MAAM,GAAGF,OAAO,CAAC3I,IAAR,CAAa6I,MAAM,IAAI;AACpC,QAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,aAAOA,MAAM,CAAC,CAAD,CAAN,KAAc7tC,IAArB;AACD,KAFD,MAEO;AACL,aAAO6tC,MAAM,KAAK7tC,IAAlB;AACD;AACF,GANc,CAAf;;AAQA,MAAI6tC,MAAM,IAAIC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAd,EAAqC;AACnC,WAAOA,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAV,CAAP;AACD;;AAED,SAAO,IAAP;AACD;;AACD,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,QAArB,CAA3B;;AACA,SAASC,eAAT,CAAyBP,OAAzB,EAAkC;AAChC,MAAI9pB,SAAS,CAAC8pB,OAAD,EAAU,YAAV,CAAb,EAAsC;AACpC,QAAI9pB,SAAS,CAAC8pB,OAAD,EAAU,mBAAV,CAAb,EAA6C;AAC3C,YAAM,IAAI/5B,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,UAAMu6B,sBAAsB,GAAG/6B,eAAe,CAACu6B,OAAD,EAAU,YAAV,EAAwB,wBAAxB,CAA9C;;AAEA,QAAIQ,sBAAsB,IAAI,IAA9B,EAAoC;AAClC,YAAM,IAAIv6B,KAAJ,CAAU,wEAAwE,2DAAxE,GAAsI,kEAAtI,GAA2M,qEAArN,CAAN;AACD,KAFD,MAEO,IAAI,OAAOu6B,sBAAP,KAAkC,SAAtC,EAAiD;AACtD,YAAM,IAAIv6B,KAAJ,CAAU,6CAAV,CAAN;AACD;AACF;;AAED,MAAIiQ,SAAS,CAAC8pB,OAAD,EAAU,MAAV,CAAT,IAA8B9pB,SAAS,CAAC8pB,OAAD,EAAU,YAAV,CAA3C,EAAoE;AAClE,UAAM,IAAI/5B,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAIiQ,SAAS,CAAC8pB,OAAD,EAAU,cAAV,CAAT,IAAsC9pB,SAAS,CAAC8pB,OAAD,EAAU,aAAV,CAAnD,EAA6E;AAC3E,UAAM,IAAI/5B,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MAAIiQ,SAAS,CAAC8pB,OAAD,EAAU,kBAAV,CAAT,IAA0C,CAACM,kBAAkB,CAACxnB,QAAnB,CAA4BrT,eAAe,CAACu6B,OAAD,EAAU,kBAAV,EAA8B,UAA9B,CAA3C,CAA/C,EAAsI;AACpI,UAAM,IAAI/5B,KAAJ,CAAU,iFAAiFq6B,kBAAkB,CAACniC,GAAnB,CAAuBgD,CAAC,IAAK,IAAGA,CAAE,GAAlC,EAAsCs/B,IAAtC,CAA2C,IAA3C,CAA3F,CAAN;AACD;AACF;;AACD,MAAMC,YAAY,GAAG;AACnBlmC,EAAAA,MADmB;AAEnByb,EAAAA,GAFmB;AAGnB5Q,EAAAA,IAHmB;AAInB6rB,EAAAA,UAJmB;AAKnB0O,EAAAA,WALmB;AAMnBnB,EAAAA;AANmB,CAArB;AAQA,MAAMkC,gBAAgB,GAAG3vC,MAAM,CAAC4vC,IAAP,CAAYF,YAAZ,CAAzB;AAEA,MAAMG,cAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE,QADS;AAErBC,EAAAA,cAAc,EAAEx7B,SAFK;AAGrBy7B,EAAAA,SAAS,EAAE,CAHU;AAIrBC,EAAAA,yBAAyB,EAAE,KAJN;AAKrBC,EAAAA,0BAA0B,EAAE,KALP;AAMrBC,EAAAA,2BAA2B,EAAE,KANR;AAOrBC,EAAAA,uBAAuB,EAAE,KAPJ;AAQrBC,EAAAA,sBAAsB,EAAE,KARH;AASrBrB,EAAAA,OAAO,EAAE,EATY;AAUrBsB,EAAAA,UAAU,EAAE,IAVS;AAWrBC,EAAAA,MAAM,EAAE,KAXa;AAYrBC,EAAAA,MAAM,EAAE,KAZa;AAarBC,EAAAA,8BAA8B,EAAE,KAbX;AAcrBC,EAAAA,aAAa,EAAE;AAdM,CAAvB;;AAgBA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAMtvC,OAAO,GAAG,EAAhB;;AAEA,OAAK,IAAImL,EAAE,GAAG,CAAT,EAAYokC,YAAY,GAAG7wC,MAAM,CAAC4vC,IAAP,CAAYC,cAAZ,CAAhC,EAA6DpjC,EAAE,GAAGokC,YAAY,CAACxlC,MAA/E,EAAuFoB,EAAE,EAAzF,EAA6F;AAC3F,UAAMN,GAAG,GAAG0kC,YAAY,CAACpkC,EAAD,CAAxB;AACAnL,IAAAA,OAAO,CAAC6K,GAAD,CAAP,GAAeykC,IAAI,IAAIA,IAAI,CAACzkC,GAAD,CAAJ,IAAa,IAArB,GAA4BykC,IAAI,CAACzkC,GAAD,CAAhC,GAAwC0jC,cAAc,CAAC1jC,GAAD,CAArE;AACD;;AAED,SAAO7K,OAAP;AACD;;AAED,MAAMwvC,QAAN,CAAe;AACbnwC,EAAAA,WAAW,CAACkV,IAAD,EAAOk7B,GAAP,EAAY;AACrB,SAAKl7B,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAci7B,GAAd;AACD;;AAJY;;AAOf,MAAMC,cAAN,CAAqB;AACnBrwC,EAAAA,WAAW,CAAC4J,KAAD,EAAQM,GAAR,EAAa;AACtB,SAAKN,KAAL,GAAaA,KAAb;AACA,SAAKM,GAAL,GAAWA,GAAX;AACD;;AAJkB;;AAOrB,SAASomC,WAAT,CAAqB7/B,KAArB,EAA4B8/B,MAA5B,EAAoC;AAClC,MAAIr7B,IAAI,GAAG,CAAX;AACA,MAAI+lB,SAAS,GAAG,CAAhB;AACA,MAAIzlB,KAAJ;AACAhH,EAAAA,UAAU,CAACgiC,SAAX,GAAuB,CAAvB;;AAEA,SAAO,CAACh7B,KAAK,GAAGhH,UAAU,CAAC6F,IAAX,CAAgB5D,KAAhB,CAAT,KAAoC+E,KAAK,CAACi7B,KAAN,GAAcF,MAAzD,EAAiE;AAC/Dr7B,IAAAA,IAAI;AACJ+lB,IAAAA,SAAS,GAAGzsB,UAAU,CAACgiC,SAAvB;AACD;;AAED,SAAO,IAAIL,QAAJ,CAAaj7B,IAAb,EAAmBq7B,MAAM,GAAGtV,SAA5B,CAAP;AACD;;AAED,MAAMyV,UAAN,CAAiB;AACf1wC,EAAAA,WAAW,GAAG;AACZ,SAAK2wC,iBAAL,GAAyB,KAAzB;AACA,SAAKC,2BAAL,GAAmC,KAAnC;AACD;;AAEDrsB,EAAAA,SAAS,CAAC7jB,IAAD,EAAO;AACd,WAAO,KAAK2tC,OAAL,CAAa/8B,GAAb,CAAiB5Q,IAAjB,CAAP;AACD;;AAEDoT,EAAAA,eAAe,CAACy6B,MAAD,EAAS7tC,IAAT,EAAe;AAC5B,QAAI,KAAK6jB,SAAL,CAAegqB,MAAf,CAAJ,EAA4B,OAAO,KAAKF,OAAL,CAAawC,GAAb,CAAiBtC,MAAjB,EAAyB7tC,IAAzB,CAAP;AAC7B;;AAZc;;AAgBjB,SAAS+gB,IAAT,CAAc/B,KAAd,EAAqB;AACnB,SAAOA,KAAK,CAACA,KAAK,CAAChV,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,MAAMomC,cAAN,SAA6BJ,UAA7B,CAAwC;AACtCx8B,EAAAA,UAAU,CAACC,OAAD,EAAU;AAClB,QAAI,KAAK48B,QAAT,EAAmB58B,OAAO,CAACtK,GAAR,CAAYknC,QAAZ,GAAuB,KAAKA,QAA5B;AACnB,SAAK3jC,KAAL,CAAW4jC,gBAAX,CAA4B/jC,IAA5B,CAAiCkH,OAAjC;AACA,SAAK/G,KAAL,CAAW6jC,eAAX,CAA2BhkC,IAA3B,CAAgCkH,OAAhC;AACD;;AAED+8B,EAAAA,gCAAgC,CAACzoC,IAAD,EAAOiZ,QAAP,EAAiByvB,eAAjB,EAAkC;AAChE,QAAI,KAAK/jC,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA3B,KAAsC,CAA1C,EAA6C;AAC3C;AACD;;AAED,QAAI0mC,WAAW,GAAG,IAAlB;AACA,QAAIj/B,CAAC,GAAGuP,QAAQ,CAAChX,MAAjB;;AAEA,WAAO0mC,WAAW,KAAK,IAAhB,IAAwBj/B,CAAC,GAAG,CAAnC,EAAsC;AACpCi/B,MAAAA,WAAW,GAAG1vB,QAAQ,CAAC,EAAEvP,CAAH,CAAtB;AACD;;AAED,QAAIi/B,WAAW,KAAK,IAApB,EAA0B;AACxB;AACD;;AAED,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjkC,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA/C,EAAuD2mC,CAAC,EAAxD,EAA4D;AAC1D,UAAI,KAAKjkC,KAAL,CAAW6jC,eAAX,CAA2BI,CAA3B,EAA8BnnC,GAA9B,GAAoC,KAAKkD,KAAL,CAAWkkC,mBAAX,CAA+BpnC,GAAvE,EAA4E;AAC1E,aAAKkD,KAAL,CAAW6jC,eAAX,CAA2BM,MAA3B,CAAkCF,CAAlC,EAAqC,CAArC;AACAA,QAAAA,CAAC;AACF;AACF;;AAED,UAAMG,mBAAmB,GAAG,EAA5B;;AAEA,SAAK,IAAIr/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/E,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA/C,EAAuDyH,CAAC,EAAxD,EAA4D;AAC1D,YAAMs/B,cAAc,GAAG,KAAKrkC,KAAL,CAAW6jC,eAAX,CAA2B9+B,CAA3B,CAAvB;;AAEA,UAAIs/B,cAAc,CAACvnC,GAAf,GAAqBzB,IAAI,CAACyB,GAA9B,EAAmC;AACjCsnC,QAAAA,mBAAmB,CAACvkC,IAApB,CAAyBwkC,cAAzB;;AAEA,YAAI,CAACN,eAAL,EAAsB;AACpB,eAAK/jC,KAAL,CAAW6jC,eAAX,CAA2BM,MAA3B,CAAkCp/B,CAAlC,EAAqC,CAArC;AACAA,UAAAA,CAAC;AACF;AACF,OAPD,MAOO;AACL,YAAI1J,IAAI,CAACuoC,gBAAL,KAA0Bp9B,SAA9B,EAAyC;AACvCnL,UAAAA,IAAI,CAACuoC,gBAAL,GAAwB,EAAxB;AACD;;AAEDvoC,QAAAA,IAAI,CAACuoC,gBAAL,CAAsB/jC,IAAtB,CAA2BwkC,cAA3B;AACD;AACF;;AAED,QAAIN,eAAJ,EAAqB,KAAK/jC,KAAL,CAAW6jC,eAAX,GAA6B,EAA7B;;AAErB,QAAIO,mBAAmB,CAAC9mC,MAApB,GAA6B,CAAjC,EAAoC;AAClC0mC,MAAAA,WAAW,CAACJ,gBAAZ,GAA+BQ,mBAA/B;AACD,KAFD,MAEO,IAAIJ,WAAW,CAACJ,gBAAZ,KAAiCp9B,SAArC,EAAgD;AACrDw9B,MAAAA,WAAW,CAACJ,gBAAZ,GAA+B,EAA/B;AACD;AACF;;AAEDU,EAAAA,cAAc,CAACjpC,IAAD,EAAO;AACnB,QAAIA,IAAI,CAACC,IAAL,KAAc,SAAd,IAA2BD,IAAI,CAACoD,IAAL,CAAUnB,MAAV,GAAmB,CAAlD,EAAqD;AACrD,UAAMgV,KAAK,GAAG,KAAKtS,KAAL,CAAWukC,YAAzB;AACA,QAAIC,UAAJ,EAAgBC,SAAhB,EAA2Bb,gBAA3B,EAA6C7+B,CAA7C,EAAgDk/B,CAAhD;;AAEA,QAAI,KAAKjkC,KAAL,CAAW4jC,gBAAX,CAA4BtmC,MAA5B,GAAqC,CAAzC,EAA4C;AAC1C,UAAI,KAAK0C,KAAL,CAAW4jC,gBAAX,CAA4B,CAA5B,EAA+BpnC,KAA/B,IAAwCnB,IAAI,CAACyB,GAAjD,EAAsD;AACpD8mC,QAAAA,gBAAgB,GAAG,KAAK5jC,KAAL,CAAW4jC,gBAA9B;AACA,aAAK5jC,KAAL,CAAW4jC,gBAAX,GAA8B,EAA9B;AACD,OAHD,MAGO;AACL,aAAK5jC,KAAL,CAAW4jC,gBAAX,CAA4BtmC,MAA5B,GAAqC,CAArC;AACD;AACF,KAPD,MAOO,IAAIgV,KAAK,CAAChV,MAAN,GAAe,CAAnB,EAAsB;AAC3B,YAAMonC,WAAW,GAAGrwB,IAAI,CAAC/B,KAAD,CAAxB;;AAEA,UAAIoyB,WAAW,CAACd,gBAAZ,IAAgCc,WAAW,CAACd,gBAAZ,CAA6B,CAA7B,EAAgCpnC,KAAhC,IAAyCnB,IAAI,CAACyB,GAAlF,EAAuF;AACrF8mC,QAAAA,gBAAgB,GAAGc,WAAW,CAACd,gBAA/B;AACA,eAAOc,WAAW,CAACd,gBAAnB;AACD;AACF;;AAED,QAAItxB,KAAK,CAAChV,MAAN,GAAe,CAAf,IAAoB+W,IAAI,CAAC/B,KAAD,CAAJ,CAAY9V,KAAZ,IAAqBnB,IAAI,CAACmB,KAAlD,EAAyD;AACvDgoC,MAAAA,UAAU,GAAGlyB,KAAK,CAAC3P,GAAN,EAAb;AACD;;AAED,WAAO2P,KAAK,CAAChV,MAAN,GAAe,CAAf,IAAoB+W,IAAI,CAAC/B,KAAD,CAAJ,CAAY9V,KAAZ,IAAqBnB,IAAI,CAACmB,KAArD,EAA4D;AAC1DioC,MAAAA,SAAS,GAAGnyB,KAAK,CAAC3P,GAAN,EAAZ;AACD;;AAED,QAAI,CAAC8hC,SAAD,IAAcD,UAAlB,EAA8BC,SAAS,GAAGD,UAAZ;;AAE9B,QAAIA,UAAJ,EAAgB;AACd,cAAQnpC,IAAI,CAACC,IAAb;AACE,aAAK,kBAAL;AACE,eAAKwoC,gCAAL,CAAsCzoC,IAAtC,EAA4CA,IAAI,CAACyC,UAAjD;AACA;;AAEF,aAAK,eAAL;AACE,eAAKgmC,gCAAL,CAAsCzoC,IAAtC,EAA4CA,IAAI,CAACyC,UAAjD,EAA6D,IAA7D;AACA;;AAEF,aAAK,gBAAL;AACE,eAAKgmC,gCAAL,CAAsCzoC,IAAtC,EAA4CA,IAAI,CAACsY,SAAjD;AACA;;AAEF,aAAK,iBAAL;AACE,eAAKmwB,gCAAL,CAAsCzoC,IAAtC,EAA4CA,IAAI,CAACiZ,QAAjD;AACA;;AAEF,aAAK,cAAL;AACE,eAAKwvB,gCAAL,CAAsCzoC,IAAtC,EAA4CA,IAAI,CAACiZ,QAAjD,EAA2D,IAA3D;AACA;AAnBJ;AAqBD,KAtBD,MAsBO,IAAI,KAAKtU,KAAL,CAAWkkC,mBAAX,KAAmC,KAAKlkC,KAAL,CAAWkkC,mBAAX,CAA+B5oC,IAA/B,KAAwC,iBAAxC,IAA6DD,IAAI,CAACC,IAAL,KAAc,iBAA3E,IAAgG,KAAK0E,KAAL,CAAWkkC,mBAAX,CAA+B5oC,IAA/B,KAAwC,iBAAxC,IAA6DD,IAAI,CAACC,IAAL,KAAc,iBAA9M,CAAJ,EAAsO;AAC3O,WAAKwoC,gCAAL,CAAsCzoC,IAAtC,EAA4C,CAAC,KAAK2E,KAAL,CAAWkkC,mBAAZ,CAA5C,EAA8E,IAA9E;AACD;;AAED,QAAIO,SAAJ,EAAe;AACb,UAAIA,SAAS,CAACZ,eAAd,EAA+B;AAC7B,YAAIY,SAAS,KAAKppC,IAAd,IAAsBopC,SAAS,CAACZ,eAAV,CAA0BvmC,MAA1B,GAAmC,CAAzD,IAA8D+W,IAAI,CAACowB,SAAS,CAACZ,eAAX,CAAJ,CAAgC/mC,GAAhC,IAAuCzB,IAAI,CAACmB,KAA9G,EAAqH;AACnHnB,UAAAA,IAAI,CAACwoC,eAAL,GAAuBY,SAAS,CAACZ,eAAjC;AACA,iBAAOY,SAAS,CAACZ,eAAjB;AACD,SAHD,MAGO;AACL,eAAK9+B,CAAC,GAAG0/B,SAAS,CAACZ,eAAV,CAA0BvmC,MAA1B,GAAmC,CAA5C,EAA+CyH,CAAC,IAAI,CAApD,EAAuD,EAAEA,CAAzD,EAA4D;AAC1D,gBAAI0/B,SAAS,CAACZ,eAAV,CAA0B9+B,CAA1B,EAA6BjI,GAA7B,IAAoCzB,IAAI,CAACmB,KAA7C,EAAoD;AAClDnB,cAAAA,IAAI,CAACwoC,eAAL,GAAuBY,SAAS,CAACZ,eAAV,CAA0BM,MAA1B,CAAiC,CAAjC,EAAoCp/B,CAAC,GAAG,CAAxC,CAAvB;AACA;AACD;AACF;AACF;AACF;AACF,KAdD,MAcO,IAAI,KAAK/E,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA3B,GAAoC,CAAxC,EAA2C;AAChD,UAAI+W,IAAI,CAAC,KAAKrU,KAAL,CAAW6jC,eAAZ,CAAJ,CAAiC/mC,GAAjC,IAAwCzB,IAAI,CAACmB,KAAjD,EAAwD;AACtD,YAAI,KAAKwD,KAAL,CAAWkkC,mBAAf,EAAoC;AAClC,eAAKD,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAKjkC,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA3C,EAAmD2mC,CAAC,EAApD,EAAwD;AACtD,gBAAI,KAAKjkC,KAAL,CAAW6jC,eAAX,CAA2BI,CAA3B,EAA8BnnC,GAA9B,GAAoC,KAAKkD,KAAL,CAAWkkC,mBAAX,CAA+BpnC,GAAvE,EAA4E;AAC1E,mBAAKkD,KAAL,CAAW6jC,eAAX,CAA2BM,MAA3B,CAAkCF,CAAlC,EAAqC,CAArC;AACAA,cAAAA,CAAC;AACF;AACF;AACF;;AAED,YAAI,KAAKjkC,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA3B,GAAoC,CAAxC,EAA2C;AACzCjC,UAAAA,IAAI,CAACwoC,eAAL,GAAuB,KAAK7jC,KAAL,CAAW6jC,eAAlC;AACA,eAAK7jC,KAAL,CAAW6jC,eAAX,GAA6B,EAA7B;AACD;AACF,OAdD,MAcO;AACL,aAAK9+B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAK/E,KAAL,CAAW6jC,eAAX,CAA2BvmC,MAA3C,EAAmDyH,CAAC,EAApD,EAAwD;AACtD,cAAI,KAAK/E,KAAL,CAAW6jC,eAAX,CAA2B9+B,CAA3B,EAA8BjI,GAA9B,GAAoCzB,IAAI,CAACmB,KAA7C,EAAoD;AAClD;AACD;AACF;;AAED,cAAMqnC,eAAe,GAAG,KAAK7jC,KAAL,CAAW6jC,eAAX,CAA2B9mC,KAA3B,CAAiC,CAAjC,EAAoCgI,CAApC,CAAxB;;AAEA,YAAI8+B,eAAe,CAACvmC,MAApB,EAA4B;AAC1BjC,UAAAA,IAAI,CAACwoC,eAAL,GAAuBA,eAAvB;AACD;;AAEDD,QAAAA,gBAAgB,GAAG,KAAK5jC,KAAL,CAAW6jC,eAAX,CAA2B9mC,KAA3B,CAAiCgI,CAAjC,CAAnB;;AAEA,YAAI6+B,gBAAgB,CAACtmC,MAAjB,KAA4B,CAAhC,EAAmC;AACjCsmC,UAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AACF;;AAED,SAAK5jC,KAAL,CAAWkkC,mBAAX,GAAiC7oC,IAAjC;;AAEA,QAAIuoC,gBAAJ,EAAsB;AACpB,UAAIA,gBAAgB,CAACtmC,MAAjB,IAA2BsmC,gBAAgB,CAAC,CAAD,CAAhB,CAAoBpnC,KAApB,IAA6BnB,IAAI,CAACmB,KAA7D,IAAsE6X,IAAI,CAACuvB,gBAAD,CAAJ,CAAuB9mC,GAAvB,IAA8BzB,IAAI,CAACyB,GAA7G,EAAkH;AAChHzB,QAAAA,IAAI,CAACspC,aAAL,GAAqBf,gBAArB;AACD,OAFD,MAEO;AACLvoC,QAAAA,IAAI,CAACuoC,gBAAL,GAAwBA,gBAAxB;AACD;AACF;;AAEDtxB,IAAAA,KAAK,CAACzS,IAAN,CAAWxE,IAAX;AACD;;AAlLqC;;AAsLxC,MAAMupC,cAAN,SAA6BlB,cAA7B,CAA4C;AAC1CmB,EAAAA,sBAAsB,CAAC//B,GAAD,EAAM;AAC1B,QAAIrI,GAAJ;AACA,QAAIqI,GAAG,KAAK,KAAK9E,KAAL,CAAWxD,KAAvB,EAA8BC,GAAG,GAAG,KAAKuD,KAAL,CAAWE,QAAjB,CAA9B,KAA6D,IAAI4E,GAAG,KAAK,KAAK9E,KAAL,CAAW0J,YAAvB,EAAqCjN,GAAG,GAAG,KAAKuD,KAAL,CAAW8kC,eAAjB,CAArC,KAA2E,IAAIhgC,GAAG,KAAK,KAAK9E,KAAL,CAAWlD,GAAvB,EAA4BL,GAAG,GAAG,KAAKuD,KAAL,CAAW+kC,MAAjB,CAA5B,KAAyD,IAAIjgC,GAAG,KAAK,KAAK9E,KAAL,CAAWsD,UAAvB,EAAmC7G,GAAG,GAAG,KAAKuD,KAAL,CAAW8uB,aAAjB,CAAnC,KAAuEryB,GAAG,GAAGymC,WAAW,CAAC,KAAK7/B,KAAN,EAAayB,GAAb,CAAjB;AACxQ,WAAOrI,GAAP;AACD;;AAEDc,EAAAA,KAAK,CAACuH,GAAD,EAAM6V,OAAN,EAAe;AAClBqqB,IAAAA,kBADkB;AAElBzjC,IAAAA;AAFkB,MAGhB,EAHC,EAGG;AACN,UAAM9E,GAAG,GAAG,KAAKooC,sBAAL,CAA4B//B,GAA5B,CAAZ;AACA6V,IAAAA,OAAO,IAAK,KAAIle,GAAG,CAACqL,IAAK,IAAGrL,GAAG,CAACsL,MAAO,GAAvC;AACA,UAAMk9B,GAAG,GAAG,IAAIC,WAAJ,CAAgBvqB,OAAhB,CAAZ;AACAsqB,IAAAA,GAAG,CAACngC,GAAJ,GAAUA,GAAV;AACAmgC,IAAAA,GAAG,CAACxoC,GAAJ,GAAUA,GAAV;;AAEA,QAAIuoC,kBAAJ,EAAwB;AACtBC,MAAAA,GAAG,CAACE,aAAJ,GAAoBH,kBAApB;AACD;;AAED,QAAIzjC,IAAI,KAAKiF,SAAb,EAAwB;AACtBy+B,MAAAA,GAAG,CAAC1jC,IAAJ,GAAWA,IAAX;AACD;;AAED,QAAI,KAAKhO,OAAL,CAAaovC,aAAjB,EAAgC;AAC9B,UAAI,CAAC,KAAKyC,WAAV,EAAuB,KAAKplC,KAAL,CAAWqlC,MAAX,CAAkBxlC,IAAlB,CAAuBolC,GAAvB;AACvB,aAAOA,GAAP;AACD,KAHD,MAGO;AACL,YAAMA,GAAN;AACD;AACF;;AA/ByC;;AAmC5C,MAAMK,KAAN,CAAY;AACV1yC,EAAAA,WAAW,GAAG;AACZ,SAAKyyC,MAAL,GAAc,EAAd;AACA,SAAKE,gBAAL,GAAwB,CAAC,CAAzB;AACA,SAAK5zB,SAAL,GAAiB,EAAjB;AACA,SAAKS,yBAAL,GAAiC,EAAjC;AACA,SAAKozB,YAAL,GAAoB,KAApB;AACA,SAAKC,sBAAL,GAA8B,KAA9B;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKp+B,MAAL,GAAc,KAAd;AACA,SAAK8F,kBAAL,GAA0B,KAA1B;AACA,SAAK2iB,cAAL,GAAsB,KAAtB;AACA,SAAK4V,eAAL,GAAuB,KAAvB;AACA,SAAKvsB,cAAL,GAAsB,KAAtB;AACA,SAAKnW,UAAL,GAAkB,KAAlB;AACA,SAAK2iC,YAAL,GAAoB;AAClBC,MAAAA,wBAAwB,EAAE,CADR;AAElBC,MAAAA,aAAa,EAAE;AAFG,KAApB;AAIA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,0BAAL,GAAkC,KAAlC;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,cAAL,GAAsB,CAAC,EAAD,CAAtB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAAjB;AACA,SAAKC,QAAL,GAAgB,CAAC,CAAjB;AACA,SAAK5D,MAAL,GAAc,EAAd;AACA,SAAK6D,QAAL,GAAgB,EAAhB;AACA,SAAK1C,gBAAL,GAAwB,EAAxB;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKU,YAAL,GAAoB,EAApB;AACA,SAAKL,mBAAL,GAA2B,IAA3B;AACA,SAAKp/B,GAAL,GAAW,CAAX;AACA,SAAK+oB,SAAL,GAAiB,CAAjB;AACA,SAAKvyB,IAAL,GAAY3H,KAAK,CAACK,GAAlB;AACA,SAAK5B,KAAL,GAAa,IAAb;AACA,SAAKoK,KAAL,GAAa,CAAb;AACA,SAAKM,GAAL,GAAW,CAAX;AACA,SAAKgyB,aAAL,GAAqB,IAArB;AACA,SAAKgW,eAAL,GAAuB,IAAvB;AACA,SAAKp7B,YAAL,GAAoB,CAApB;AACA,SAAKpG,UAAL,GAAkB,CAAlB;AACA,SAAKd,OAAL,GAAe,CAACV,OAAO,CAACC,cAAT,CAAf;AACA,SAAKU,WAAL,GAAmB,IAAnB;AACA,SAAK5B,WAAL,GAAmB,KAAnB;AACA,SAAK0lC,aAAL,GAAqB,KAArB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,6BAAL,GAAqC,IAArC;AACD;;AAEDrrB,EAAAA,IAAI,CAAC9nB,OAAD,EAAU;AACZ,SAAKkQ,MAAL,GAAclQ,OAAO,CAACgvC,UAAR,KAAuB,KAAvB,GAA+B,KAA/B,GAAuChvC,OAAO,CAACwuC,UAAR,KAAuB,QAA5E;AACA,SAAKnU,OAAL,GAAer6B,OAAO,CAAC0uC,SAAvB;AACA,SAAK/hC,QAAL,GAAgB,KAAK6kC,MAAL,GAAc,KAAK4B,WAAL,EAA9B;AACD;;AAEDA,EAAAA,WAAW,GAAG;AACZ,WAAO,IAAI5D,QAAJ,CAAa,KAAKnV,OAAlB,EAA2B,KAAK9oB,GAAL,GAAW,KAAK+oB,SAA3C,CAAP;AACD;;AAEDpc,EAAAA,KAAK,CAACm1B,UAAD,EAAa;AAChB,UAAM5mC,KAAK,GAAG,IAAIslC,KAAJ,EAAd;AACA,UAAMzD,IAAI,GAAG5vC,MAAM,CAAC4vC,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAI98B,CAAC,GAAG,CAAR,EAAWzH,MAAM,GAAGukC,IAAI,CAACvkC,MAA9B,EAAsCyH,CAAC,GAAGzH,MAA1C,EAAkDyH,CAAC,EAAnD,EAAuD;AACrD,YAAM3G,GAAG,GAAGyjC,IAAI,CAAC98B,CAAD,CAAhB;AACA,UAAI8B,GAAG,GAAG,KAAKzI,GAAL,CAAV;;AAEA,UAAI,CAACwoC,UAAD,IAAexF,KAAK,CAACC,OAAN,CAAcx6B,GAAd,CAAnB,EAAuC;AACrCA,QAAAA,GAAG,GAAGA,GAAG,CAAC9J,KAAJ,EAAN;AACD;;AAEDiD,MAAAA,KAAK,CAAC5B,GAAD,CAAL,GAAayI,GAAb;AACD;;AAED,WAAO7G,KAAP;AACD;;AA7ES;;AAiFZ,IAAI6mC,QAAQ,GAAG,SAASC,OAAT,CAAiBvlC,IAAjB,EAAuB;AACpC,SAAOA,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA7B;AACD,CAFD;;AAGA,MAAMwlC,iBAAiB,GAAG,IAAInjC,GAAJ,CAAQ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAR,CAA1B;AACA,MAAMojC,iCAAiC,GAAG;AACxCC,EAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,GAAzB,EAA8B,GAA9B,CAD6B;AAExCC,EAAAA,GAAG,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,GAAb;AAFmC,CAA1C;AAIA,MAAMC,+BAA+B,GAAG,EAAxC;AACAA,+BAA+B,CAACC,GAAhC,GAAsC,CAAC,EAAD,EAAK,EAAL,CAAtC;AACAD,+BAA+B,CAACE,GAAhC,GAAsC,CAAC,GAAGF,+BAA+B,CAACC,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,CAAtC;AACAD,+BAA+B,CAACG,GAAhC,GAAsC,CAAC,GAAGH,+BAA+B,CAACE,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,CAAtC;AACAF,+BAA+B,CAACD,GAAhC,GAAsC,CAAC,GAAGC,+BAA+B,CAACG,GAApC,EAAyC,EAAzC,EAA6C,EAA7C,EAAiD,EAAjD,EAAqD,EAArD,EAAyD,EAAzD,EAA6D,EAA7D,EAAiE,EAAjE,EAAqE,EAArE,EAAyE,EAAzE,EAA6E,GAA7E,EAAkF,GAAlF,EAAuF,GAAvF,CAAtC;;AACA,MAAMC,KAAN,CAAY;AACV30C,EAAAA,WAAW,CAACoN,KAAD,EAAQ;AACjB,SAAK1E,IAAL,GAAY0E,KAAK,CAAC1E,IAAlB;AACA,SAAKlJ,KAAL,GAAa4N,KAAK,CAAC5N,KAAnB;AACA,SAAKoK,KAAL,GAAawD,KAAK,CAACxD,KAAnB;AACA,SAAKM,GAAL,GAAWkD,KAAK,CAAClD,GAAjB;AACA,SAAKL,GAAL,GAAW,IAAIwmC,cAAJ,CAAmBjjC,KAAK,CAACE,QAAzB,EAAmCF,KAAK,CAAC+kC,MAAzC,CAAX;AACD;;AAPS;;AAUZ,MAAMyC,SAAN,SAAwB5C,cAAxB,CAAuC;AACrChyC,EAAAA,WAAW,CAACW,OAAD,EAAU8P,KAAV,EAAiB;AAC1B;AACA,SAAKrD,KAAL,GAAa,IAAIslC,KAAJ,EAAb;AACA,SAAKtlC,KAAL,CAAWqb,IAAX,CAAgB9nB,OAAhB;AACA,SAAK8P,KAAL,GAAaA,KAAb;AACA,SAAK/F,MAAL,GAAc+F,KAAK,CAAC/F,MAApB;AACA,SAAK8nC,WAAL,GAAmB,KAAnB;AACD;;AAEDhgC,EAAAA,IAAI,GAAG;AACL,QAAI,CAAC,KAAKggC,WAAV,EAAuB;AACrB,WAAKqC,mBAAL;;AAEA,UAAI,KAAKl0C,OAAL,CAAakvC,MAAjB,EAAyB;AACvB,aAAKziC,KAAL,CAAWyiC,MAAX,CAAkB5iC,IAAlB,CAAuB,IAAI0nC,KAAJ,CAAU,KAAKvnC,KAAf,CAAvB;AACD;AACF;;AAED,SAAKA,KAAL,CAAWsD,UAAX,GAAwB,KAAKtD,KAAL,CAAWlD,GAAnC;AACA,SAAKkD,KAAL,CAAW0J,YAAX,GAA0B,KAAK1J,KAAL,CAAWxD,KAArC;AACA,SAAKwD,KAAL,CAAW8uB,aAAX,GAA2B,KAAK9uB,KAAL,CAAW+kC,MAAtC;AACA,SAAK/kC,KAAL,CAAW8kC,eAAX,GAA6B,KAAK9kC,KAAL,CAAWE,QAAxC;AACA,SAAKmZ,SAAL;AACD;;AAEDrR,EAAAA,GAAG,CAAC1M,IAAD,EAAO;AACR,QAAI,KAAK8M,KAAL,CAAW9M,IAAX,CAAJ,EAAsB;AACpB,WAAK8J,IAAL;AACA,aAAO,IAAP;AACD,KAHD,MAGO;AACL,aAAO,KAAP;AACD;AACF;;AAEDgD,EAAAA,KAAK,CAAC9M,IAAD,EAAO;AACV,WAAO,KAAK0E,KAAL,CAAW1E,IAAX,KAAoBA,IAA3B;AACD;;AAEDsS,EAAAA,SAAS,GAAG;AACV,UAAM85B,GAAG,GAAG,KAAK1nC,KAAjB;AACA,SAAKA,KAAL,GAAa0nC,GAAG,CAACj2B,KAAJ,CAAU,IAAV,CAAb;AACA,SAAK2zB,WAAL,GAAmB,IAAnB;AACA,SAAKhgC,IAAL;AACA,SAAKggC,WAAL,GAAmB,KAAnB;AACA,UAAMuC,IAAI,GAAG,KAAK3nC,KAAlB;AACA,SAAKA,KAAL,GAAa0nC,GAAb;AACA,WAAOC,IAAP;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,UAAMC,UAAU,GAAG,KAAK7nC,KAAL,CAAW8E,GAA9B;AACAtD,IAAAA,cAAc,CAAC4hC,SAAf,GAA2ByE,UAA3B;AACA,UAAMC,IAAI,GAAGtmC,cAAc,CAACyF,IAAf,CAAoB,KAAK5D,KAAzB,CAAb;AACA,WAAOwkC,UAAU,GAAGC,IAAI,CAAC,CAAD,CAAJ,CAAQxqC,MAA5B;AACD;;AAEDu6B,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKx0B,KAAL,CAAW6Q,UAAX,CAAsB,KAAK0zB,cAAL,EAAtB,CAAP;AACD;;AAEDG,EAAAA,SAAS,CAACtkC,MAAD,EAAS;AAChB,SAAKzD,KAAL,CAAWyD,MAAX,GAAoBA,MAApB;AACA,QAAI,CAAC,KAAK2E,KAAL,CAAWzU,KAAK,CAACC,GAAjB,CAAD,IAA0B,CAAC,KAAKwU,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAA/B,EAAyD;AACzD,SAAKiM,KAAL,CAAW8E,GAAX,GAAiB,KAAK9E,KAAL,CAAWxD,KAA5B;;AAEA,WAAO,KAAKwD,KAAL,CAAW8E,GAAX,GAAiB,KAAK9E,KAAL,CAAW6tB,SAAnC,EAA8C;AAC5C,WAAK7tB,KAAL,CAAW6tB,SAAX,GAAuB,KAAKxqB,KAAL,CAAW2kC,WAAX,CAAuB,IAAvB,EAA6B,KAAKhoC,KAAL,CAAW6tB,SAAX,GAAuB,CAApD,IAAyD,CAAhF;AACA,QAAE,KAAK7tB,KAAL,CAAW4tB,OAAb;AACD;;AAED,SAAKvU,SAAL;AACD;;AAEDzW,EAAAA,UAAU,GAAG;AACX,WAAO,KAAK5C,KAAL,CAAWwC,OAAX,CAAmB,KAAKxC,KAAL,CAAWwC,OAAX,CAAmBlF,MAAnB,GAA4B,CAA/C,CAAP;AACD;;AAED+b,EAAAA,SAAS,GAAG;AACV,UAAMzW,UAAU,GAAG,KAAKA,UAAL,EAAnB;AACA,QAAI,CAACA,UAAD,IAAe,CAACA,UAAU,CAAChB,aAA/B,EAA8C,KAAKqmC,SAAL;AAC9C,SAAKjoC,KAAL,CAAWumC,aAAX,GAA2B,KAA3B;AACA,SAAKvmC,KAAL,CAAWwmC,aAAX,GAA2B,IAA3B;AACA,SAAKxmC,KAAL,CAAWxD,KAAX,GAAmB,KAAKwD,KAAL,CAAW8E,GAA9B;AACA,SAAK9E,KAAL,CAAWE,QAAX,GAAsB,KAAKF,KAAL,CAAW2mC,WAAX,EAAtB;;AAEA,QAAI,KAAK3mC,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,WAAKsJ,WAAL,CAAiBjT,KAAK,CAACK,GAAvB;AACA;AACD;;AAED,QAAI4O,UAAU,CAACf,QAAf,EAAyB;AACvBe,MAAAA,UAAU,CAACf,QAAX,CAAoB,IAApB;AACD,KAFD,MAEO;AACL,WAAKoS,gBAAL,CAAsB,KAAK5Q,KAAL,CAAW6kC,WAAX,CAAuB,KAAKloC,KAAL,CAAW8E,GAAlC,CAAtB;AACD;AACF;;AAEDqjC,EAAAA,WAAW,CAACC,KAAD,EAAQC,IAAR,EAAc7rC,KAAd,EAAqBM,GAArB,EAA0BoD,QAA1B,EAAoC6kC,MAApC,EAA4C;AACrD,UAAMh+B,OAAO,GAAG;AACdzL,MAAAA,IAAI,EAAE8sC,KAAK,GAAG,cAAH,GAAoB,aADjB;AAEdh2C,MAAAA,KAAK,EAAEi2C,IAFO;AAGd7rC,MAAAA,KAAK,EAAEA,KAHO;AAIdM,MAAAA,GAAG,EAAEA,GAJS;AAKdL,MAAAA,GAAG,EAAE,IAAIwmC,cAAJ,CAAmB/iC,QAAnB,EAA6B6kC,MAA7B;AALS,KAAhB;AAOA,QAAI,KAAKxxC,OAAL,CAAakvC,MAAjB,EAAyB,KAAKziC,KAAL,CAAWyiC,MAAX,CAAkB5iC,IAAlB,CAAuBkH,OAAvB;AACzB,SAAK/G,KAAL,CAAWsmC,QAAX,CAAoBzmC,IAApB,CAAyBkH,OAAzB;AACA,SAAKD,UAAL,CAAgBC,OAAhB;AACD;;AAED4S,EAAAA,gBAAgB,GAAG;AACjB,UAAMzZ,QAAQ,GAAG,KAAKF,KAAL,CAAW2mC,WAAX,EAAjB;AACA,UAAMnqC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,UAAMhI,GAAG,GAAG,KAAKuG,KAAL,CAAW2P,OAAX,CAAmB,IAAnB,EAAyB,KAAKhT,KAAL,CAAW8E,GAAX,GAAiB,CAA1C,CAAZ;AACA,QAAIhI,GAAG,KAAK,CAAC,CAAb,EAAgB,MAAM,KAAKS,KAAL,CAAWf,KAAX,EAAkB,sBAAlB,CAAN;AAChB,SAAKwD,KAAL,CAAW8E,GAAX,GAAiBhI,GAAG,GAAG,CAAvB;AACAsE,IAAAA,UAAU,CAACgiC,SAAX,GAAuB5mC,KAAvB;AACA,QAAI4L,KAAJ;;AAEA,WAAO,CAACA,KAAK,GAAGhH,UAAU,CAAC6F,IAAX,CAAgB,KAAK5D,KAArB,CAAT,KAAyC+E,KAAK,CAACi7B,KAAN,GAAc,KAAKrjC,KAAL,CAAW8E,GAAzE,EAA8E;AAC5E,QAAE,KAAK9E,KAAL,CAAW4tB,OAAb;AACA,WAAK5tB,KAAL,CAAW6tB,SAAX,GAAuBzlB,KAAK,CAACi7B,KAAN,GAAcj7B,KAAK,CAAC,CAAD,CAAL,CAAS9K,MAA9C;AACD;;AAED,QAAI,KAAK8nC,WAAT,EAAsB;AACtB,SAAK+C,WAAL,CAAiB,IAAjB,EAAuB,KAAK9kC,KAAL,CAAWtG,KAAX,CAAiBP,KAAK,GAAG,CAAzB,EAA4BM,GAA5B,CAAvB,EAAyDN,KAAzD,EAAgE,KAAKwD,KAAL,CAAW8E,GAA3E,EAAgF5E,QAAhF,EAA0F,KAAKF,KAAL,CAAW2mC,WAAX,EAA1F;AACD;;AAED2B,EAAAA,eAAe,CAACC,SAAD,EAAY;AACzB,UAAM/rC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,UAAM5E,QAAQ,GAAG,KAAKF,KAAL,CAAW2mC,WAAX,EAAjB;AACA,QAAInZ,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,IAAkByjC,SAAxC,CAAT;;AAEA,QAAI,KAAKvoC,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAA1B,EAAkC;AAChC,aAAO,CAACgE,SAAS,CAACksB,EAAD,CAAV,IAAkB,EAAE,KAAKxtB,KAAL,CAAW8E,GAAb,GAAmB,KAAKxH,MAAjD,EAAyD;AACvDkwB,QAAAA,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAL;AACD;AACF;;AAED,QAAI,KAAKsgC,WAAT,EAAsB;AACtB,SAAK+C,WAAL,CAAiB,KAAjB,EAAwB,KAAK9kC,KAAL,CAAWtG,KAAX,CAAiBP,KAAK,GAAG+rC,SAAzB,EAAoC,KAAKvoC,KAAL,CAAW8E,GAA/C,CAAxB,EAA6EtI,KAA7E,EAAoF,KAAKwD,KAAL,CAAW8E,GAA/F,EAAoG5E,QAApG,EAA8G,KAAKF,KAAL,CAAW2mC,WAAX,EAA9G;AACD;;AAEDsB,EAAAA,SAAS,GAAG;AACVO,IAAAA,IAAI,EAAE,OAAO,KAAKxoC,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAA7B,EAAqC;AACzC,YAAMkwB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;;AAEA,cAAQ0oB,EAAR;AACE,aAAK,EAAL;AACA,aAAK,GAAL;AACA,aAAK,CAAL;AACE,YAAE,KAAKxtB,KAAL,CAAW8E,GAAb;AACA;;AAEF,aAAK,EAAL;AACE,cAAI,KAAKzB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,cAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;;AAEH,aAAK,EAAL;AACA,aAAK,IAAL;AACA,aAAK,IAAL;AACE,YAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA,YAAE,KAAK9E,KAAL,CAAW4tB,OAAb;AACA,eAAK5tB,KAAL,CAAW6tB,SAAX,GAAuB,KAAK7tB,KAAL,CAAW8E,GAAlC;AACA;;AAEF,aAAK,EAAL;AACE,kBAAQ,KAAKzB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAR;AACE,iBAAK,EAAL;AACE,mBAAK6U,gBAAL;AACA;;AAEF,iBAAK,EAAL;AACE,mBAAK2uB,eAAL,CAAqB,CAArB;AACA;;AAEF;AACE,oBAAME,IAAN;AAVJ;;AAaA;;AAEF;AACE,cAAI/mC,YAAY,CAAC+rB,EAAD,CAAhB,EAAsB;AACpB,cAAE,KAAKxtB,KAAL,CAAW8E,GAAb;AACD,WAFD,MAEO;AACL,kBAAM0jC,IAAN;AACD;;AAzCL;AA4CD;AACF;;AAED5hC,EAAAA,WAAW,CAACtL,IAAD,EAAOuL,GAAP,EAAY;AACrB,SAAK7G,KAAL,CAAWlD,GAAX,GAAiB,KAAKkD,KAAL,CAAW8E,GAA5B;AACA,SAAK9E,KAAL,CAAW+kC,MAAX,GAAoB,KAAK/kC,KAAL,CAAW2mC,WAAX,EAApB;AACA,UAAM9jC,QAAQ,GAAG,KAAK7C,KAAL,CAAW1E,IAA5B;AACA,SAAK0E,KAAL,CAAW1E,IAAX,GAAkBA,IAAlB;AACA,SAAK0E,KAAL,CAAW5N,KAAX,GAAmByU,GAAnB;AACA,QAAI,CAAC,KAAKu+B,WAAV,EAAuB,KAAKlyC,aAAL,CAAmB2P,QAAnB;AACxB;;AAED4lC,EAAAA,oBAAoB,GAAG;AACrB,QAAI,KAAKzoC,KAAL,CAAW8E,GAAX,KAAmB,CAAnB,IAAwB,KAAK4jC,qBAAL,EAA5B,EAA0D;AACxD;AACD;;AAED,UAAMC,OAAO,GAAG,KAAK3oC,KAAL,CAAW8E,GAAX,GAAiB,CAAjC;AACA,UAAMM,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsBy0B,OAAtB,CAAb;;AAEA,QAAIvjC,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,YAAM,KAAK7H,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,mCAA3B,CAAN;AACD;;AAED,QAAI,CAAC,KAAKqS,SAAL,CAAe,wBAAf,KAA4C,KAAKA,SAAL,CAAe,qBAAf,CAA7C,KAAuF,KAAKnX,KAAL,CAAWimC,UAAX,GAAwB,CAAnH,EAAsH;AACpH,QAAE,KAAKjmC,KAAL,CAAW8E,GAAb;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAAC2B,IAAvB;AACA;AACD,KAJD,MAIO,IAAI,KAAKoR,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AAC3E,WAAKyN,QAAL,CAAcxgB,KAAK,CAAC2B,IAApB,EAA0B,CAA1B;AACD,KAFM,MAEA;AACL,YAAM,KAAKiI,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,0BAA3B,CAAN;AACD;AACF;;AAED8jC,EAAAA,aAAa,GAAG;AACd,UAAMxjC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,IAAI,EAAR,IAAcA,IAAI,IAAI,EAA1B,EAA8B;AAC5B,WAAKyjC,UAAL,CAAgB,IAAhB;AACA;AACD;;AAED,QAAIzjC,IAAI,KAAK,EAAT,IAAe,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAAjE,EAAqE;AACnE,WAAK9E,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAACuB,QAAvB;AACD,KAHD,MAGO;AACL,QAAE,KAAK8K,KAAL,CAAW8E,GAAb;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAACkB,GAAvB;AACD;AACF;;AAEDi0C,EAAAA,eAAe,GAAG;AAChB,QAAI,KAAK9oC,KAAL,CAAWyC,WAAX,IAA0B,CAAC,KAAKzC,KAAL,CAAWsH,MAA1C,EAAkD;AAChD,QAAE,KAAKtH,KAAL,CAAW8E,GAAb;AACA,WAAKikC,UAAL;AACA;AACD;;AAED,UAAM3jC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,KAAK,EAAb,EAAiB;AACf,WAAK+O,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACD,KAFD,MAEO;AACL,WAAK0e,QAAL,CAAcxgB,KAAK,CAAC+C,KAApB,EAA2B,CAA3B;AACD;AACF;;AAEDgyC,EAAAA,qBAAqB,GAAG;AACtB,QAAI,KAAK1oC,KAAL,CAAW8E,GAAX,KAAmB,CAAnB,IAAwB,KAAKxH,MAAL,GAAc,CAA1C,EAA6C,OAAO,KAAP;AAC7C,UAAMd,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,SAAK9E,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,QAAI0oB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAT;AACA,QAAI0oB,EAAE,KAAK,EAAX,EAAe,OAAO,KAAP;;AAEf,WAAO,CAAClsB,SAAS,CAACksB,EAAD,CAAV,IAAkB,EAAE,KAAKxtB,KAAL,CAAW8E,GAAb,GAAmB,KAAKxH,MAAjD,EAAyD;AACvDkwB,MAAAA,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAL;AACD;;AAED,UAAM1S,KAAK,GAAG,KAAKiR,KAAL,CAAWtG,KAAX,CAAiBP,KAAK,GAAG,CAAzB,EAA4B,KAAKwD,KAAL,CAAW8E,GAAvC,CAAd;AACA,SAAK8B,WAAL,CAAiBjT,KAAK,CAAC4B,oBAAvB,EAA6CnD,KAA7C;AACA,WAAO,IAAP;AACD;;AAED+mB,EAAAA,qBAAqB,CAAC5X,IAAD,EAAO;AAC1B,QAAIjG,IAAI,GAAGiG,IAAI,KAAK,EAAT,GAAc5N,KAAK,CAAC8C,IAApB,GAA2B9C,KAAK,CAAC6C,MAA5C;AACA,QAAIwyC,KAAK,GAAG,CAAZ;AACA,QAAI5jC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAX;AACA,UAAMrC,WAAW,GAAG,KAAKzC,KAAL,CAAWyC,WAA/B;;AAEA,QAAIlB,IAAI,KAAK,EAAT,IAAe6D,IAAI,KAAK,EAA5B,EAAgC;AAC9B4jC,MAAAA,KAAK;AACL5jC,MAAAA,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAP;AACAxJ,MAAAA,IAAI,GAAG3H,KAAK,CAACgD,QAAb;AACD;;AAED,QAAIyO,IAAI,KAAK,EAAT,IAAe,CAAC3C,WAApB,EAAiC;AAC/BumC,MAAAA,KAAK;AACL1tC,MAAAA,IAAI,GAAG3H,KAAK,CAAC8B,MAAb;AACD;;AAED,SAAK0e,QAAL,CAAc7Y,IAAd,EAAoB0tC,KAApB;AACD;;AAED1vB,EAAAA,kBAAkB,CAAC/X,IAAD,EAAO;AACvB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,KAAK7D,IAAb,EAAmB;AACjB,UAAI,KAAK8B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAAlD,EAAsD;AACpD,aAAKqP,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACD,OAFD,MAEO;AACL,aAAK0e,QAAL,CAAc5S,IAAI,KAAK,GAAT,GAAe5N,KAAK,CAACoC,SAArB,GAAiCpC,KAAK,CAACqC,UAArD,EAAiE,CAAjE;AACD;;AAED;AACD;;AAED,QAAIuL,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAI6D,IAAI,KAAK,EAAb,EAAiB;AACf,aAAK+O,QAAL,CAAcxgB,KAAK,CAACkC,QAApB,EAA8B,CAA9B;AACA;AACD;AACF;;AAED,QAAIuP,IAAI,KAAK,EAAb,EAAiB;AACf,WAAK+O,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACA;AACD;;AAED,SAAK0e,QAAL,CAAc5S,IAAI,KAAK,GAAT,GAAe5N,KAAK,CAACsC,SAArB,GAAiCtC,KAAK,CAACwC,UAArD,EAAiE,CAAjE;AACD;;AAED8yC,EAAAA,eAAe,GAAG;AAChB,UAAM7jC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,KAAK,EAAb,EAAiB;AACf,WAAK+O,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACD,KAFD,MAEO;AACL,WAAK0e,QAAL,CAAcxgB,KAAK,CAACuC,UAApB,EAAgC,CAAhC;AACD;AACF;;AAEDgzC,EAAAA,kBAAkB,CAAC3nC,IAAD,EAAO;AACvB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,KAAK7D,IAAb,EAAmB;AACjB,UAAI6D,IAAI,KAAK,EAAT,IAAe,CAAC,KAAKpB,QAArB,IAAiC,KAAKX,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAA/E,KAAsF,KAAK9E,KAAL,CAAWsD,UAAX,KAA0B,CAA1B,IAA+BnC,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAW8E,GAAnD,CAAf,CAArH,CAAJ,EAAmM;AACjM,aAAKwjC,eAAL,CAAqB,CAArB;AACA,aAAKL,SAAL;AACA,aAAK5uB,SAAL;AACA;AACD;;AAED,WAAKlF,QAAL,CAAcxgB,KAAK,CAAC+B,MAApB,EAA4B,CAA5B;AACA;AACD;;AAED,QAAI0P,IAAI,KAAK,EAAb,EAAiB;AACf,WAAK+O,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACD,KAFD,MAEO;AACL,WAAK0e,QAAL,CAAcxgB,KAAK,CAAC4C,OAApB,EAA6B,CAA7B;AACD;AACF;;AAED4yC,EAAAA,eAAe,CAAC5nC,IAAD,EAAO;AACpB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;AACA,QAAIskC,IAAI,GAAG,CAAX;;AAEA,QAAIhkC,IAAI,KAAK7D,IAAb,EAAmB;AACjB6nC,MAAAA,IAAI,GAAG7nC,IAAI,KAAK,EAAT,IAAe,KAAK8B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAA7D,GAAkE,CAAlE,GAAsE,CAA7E;;AAEA,UAAI,KAAKzB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiBskC,IAAvC,MAAiD,EAArD,EAAyD;AACvD,aAAKj1B,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B2zC,IAAI,GAAG,CAAnC;AACA;AACD;;AAED,WAAKj1B,QAAL,CAAcxgB,KAAK,CAAC2C,QAApB,EAA8B8yC,IAA9B;AACA;AACD;;AAED,QAAIhkC,IAAI,KAAK,EAAT,IAAe7D,IAAI,KAAK,EAAxB,IAA8B,CAAC,KAAKyC,QAApC,IAAgD,KAAKX,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAA9F,IAAoG,KAAKzB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAAtJ,EAA0J;AACxJ,WAAKwjC,eAAL,CAAqB,CAArB;AACA,WAAKL,SAAL;AACA,WAAK5uB,SAAL;AACA;AACD;;AAED,QAAIjU,IAAI,KAAK,EAAb,EAAiB;AACfgkC,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,SAAKj1B,QAAL,CAAcxgB,KAAK,CAAC0C,UAApB,EAAgC+yC,IAAhC;AACD;;AAEDC,EAAAA,iBAAiB,CAAC9nC,IAAD,EAAO;AACtB,UAAM6D,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,QAAIM,IAAI,KAAK,EAAb,EAAiB;AACf,WAAK+O,QAAL,CAAcxgB,KAAK,CAACyC,QAApB,EAA8B,KAAKiN,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAA9C,GAAmD,CAAnD,GAAuD,CAArF;AACA;AACD;;AAED,QAAIvD,IAAI,KAAK,EAAT,IAAe6D,IAAI,KAAK,EAA5B,EAAgC;AAC9B,WAAKpF,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAACqB,KAAvB;AACA;AACD;;AAED,SAAKmf,QAAL,CAAc5S,IAAI,KAAK,EAAT,GAAc5N,KAAK,CAAC6B,EAApB,GAAyB7B,KAAK,CAACgC,IAA7C,EAAmD,CAAnD;AACD;;AAED2zC,EAAAA,kBAAkB,GAAG;AACnB,UAAMlkC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;AACA,UAAMykC,KAAK,GAAG,KAAKlmC,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAd;;AAEA,QAAIM,IAAI,KAAK,EAAT,IAAe,CAAC,KAAKpF,KAAL,CAAWsH,MAA/B,EAAuC;AACrC,UAAIiiC,KAAK,KAAK,EAAd,EAAkB;AAChB,aAAKp1B,QAAL,CAAcxgB,KAAK,CAAC8B,MAApB,EAA4B,CAA5B;AACD,OAFD,MAEO;AACL,aAAK0e,QAAL,CAAcxgB,KAAK,CAACmC,iBAApB,EAAuC,CAAvC;AACD;AACF,KAND,MAMO,IAAIsP,IAAI,KAAK,EAAT,IAAe,EAAEmkC,KAAK,IAAI,EAAT,IAAeA,KAAK,IAAI,EAA1B,CAAnB,EAAkD;AACvD,WAAKvpC,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAACoB,WAAvB;AACD,KAHM,MAGA;AACL,QAAE,KAAKiL,KAAL,CAAW8E,GAAb;AACA,WAAK8B,WAAL,CAAiBjT,KAAK,CAACmB,QAAvB;AACD;AACF;;AAEDmf,EAAAA,gBAAgB,CAAC1S,IAAD,EAAO;AACrB,YAAQA,IAAR;AACE,WAAK,EAAL;AACE,aAAKqnC,aAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK5oC,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACY,MAAvB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKyL,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACa,MAAvB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKwL,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACe,IAAvB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKsL,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACc,KAAvB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKuL,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACM,QAAvB;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAK+L,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACO,QAAvB;AACA;;AAEF,WAAK,GAAL;AACE,UAAE,KAAK8L,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACQ,MAAvB;AACA;;AAEF,WAAK,GAAL;AACE,UAAE,KAAK6L,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACU,MAAvB;AACA;;AAEF,WAAK,EAAL;AACE,YAAI,KAAK8iB,SAAL,CAAe,cAAf,KAAkC,KAAK9T,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,EAApF,EAAwF;AACtF,eAAKqP,QAAL,CAAcxgB,KAAK,CAACiB,WAApB,EAAiC,CAAjC;AACD,SAFD,MAEO;AACL,YAAE,KAAKoL,KAAL,CAAW8E,GAAb;AACA,eAAK8B,WAAL,CAAiBjT,KAAK,CAACgB,KAAvB;AACD;;AAED;;AAEF,WAAK,EAAL;AACE,aAAK20C,kBAAL;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKtpC,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACwB,SAAvB;AACA;;AAEF,WAAK,EAAL;AACE;AACE,gBAAMiQ,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,cAAIM,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKokC,eAAL,CAAqB,EAArB;AACA;AACD;;AAED,cAAIpkC,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,EAA7B,EAAiC;AAC/B,iBAAKokC,eAAL,CAAqB,CAArB;AACA;AACD;;AAED,cAAIpkC,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,iBAAKokC,eAAL,CAAqB,CAArB;AACA;AACD;AACF;;AAEH,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKX,UAAL,CAAgB,KAAhB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKY,UAAL,CAAgBloC,IAAhB;AACA;;AAEF,WAAK,EAAL;AACE,aAAKunC,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAK3vB,qBAAL,CAA2B5X,IAA3B;AACA;;AAEF,WAAK,GAAL;AACA,WAAK,EAAL;AACE,aAAK+X,kBAAL,CAAwB/X,IAAxB;AACA;;AAEF,WAAK,EAAL;AACE,aAAK0nC,eAAL;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAKC,kBAAL,CAAwB3nC,IAAxB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAK4nC,eAAL,CAAqB5nC,IAArB;AACA;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,aAAK8nC,iBAAL,CAAuB9nC,IAAvB;AACA;;AAEF,WAAK,GAAL;AACE,aAAK4S,QAAL,CAAcxgB,KAAK,CAACiC,KAApB,EAA2B,CAA3B;AACA;;AAEF,WAAK,EAAL;AACE,UAAE,KAAKoK,KAAL,CAAW8E,GAAb;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAAC0B,EAAvB;AACA;;AAEF,WAAK,EAAL;AACE,aAAKozC,oBAAL;AACA;;AAEF,WAAK,EAAL;AACE,aAAKr0B,QAAL;AACA;;AAEF;AACE,YAAIpP,iBAAiB,CAACzD,IAAD,CAArB,EAA6B;AAC3B,eAAK6S,QAAL;AACA;AACD;;AA3JL;;AA+JA,UAAM,KAAK7W,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA4B,yBAAwBzG,MAAM,CAAC+vB,aAAP,CAAqB7sB,IAArB,CAA2B,GAA/E,CAAN;AACD;;AAED4S,EAAAA,QAAQ,CAAC7Y,IAAD,EAAO8tC,IAAP,EAAa;AACnB,UAAMpb,GAAG,GAAG,KAAK3qB,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAW8E,GAA5B,EAAiC,KAAK9E,KAAL,CAAW8E,GAAX,GAAiBskC,IAAlD,CAAZ;AACA,SAAKppC,KAAL,CAAW8E,GAAX,IAAkBskC,IAAlB;AACA,SAAKxiC,WAAL,CAAiBtL,IAAjB,EAAuB0yB,GAAvB;AACD;;AAED+a,EAAAA,UAAU,GAAG;AACX,UAAMvsC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,QAAI4kC,OAAJ,EAAaC,OAAb;;AAEA,aAAS;AACP,UAAI,KAAK3pC,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,cAAM,KAAKC,KAAL,CAAWf,KAAX,EAAkB,iCAAlB,CAAN;AACD;;AAED,YAAMgxB,EAAE,GAAG,KAAKnqB,KAAL,CAAWumC,MAAX,CAAkB,KAAK5pC,KAAL,CAAW8E,GAA7B,CAAX;;AAEA,UAAI3D,SAAS,CAACiC,IAAV,CAAeoqB,EAAf,CAAJ,EAAwB;AACtB,cAAM,KAAKjwB,KAAL,CAAWf,KAAX,EAAkB,iCAAlB,CAAN;AACD;;AAED,UAAIktC,OAAJ,EAAa;AACXA,QAAAA,OAAO,GAAG,KAAV;AACD,OAFD,MAEO;AACL,YAAIlc,EAAE,KAAK,GAAX,EAAgB;AACdmc,UAAAA,OAAO,GAAG,IAAV;AACD,SAFD,MAEO,IAAInc,EAAE,KAAK,GAAP,IAAcmc,OAAlB,EAA2B;AAChCA,UAAAA,OAAO,GAAG,KAAV;AACD,SAFM,MAEA,IAAInc,EAAE,KAAK,GAAP,IAAc,CAACmc,OAAnB,EAA4B;AACjC;AACD;;AAEDD,QAAAA,OAAO,GAAGlc,EAAE,KAAK,IAAjB;AACD;;AAED,QAAE,KAAKxtB,KAAL,CAAW8E,GAAb;AACD;;AAED,UAAM+kC,OAAO,GAAG,KAAKxmC,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,CAAhB;AACA,MAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA,QAAIglC,IAAI,GAAG,EAAX;;AAEA,WAAO,KAAK9pC,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAA7B,EAAqC;AACnC,YAAMysC,IAAI,GAAG,KAAK1mC,KAAL,CAAW,KAAKrD,KAAL,CAAW8E,GAAtB,CAAb;AACA,YAAMklC,QAAQ,GAAG,KAAK3mC,KAAL,CAAW6kC,WAAX,CAAuB,KAAKloC,KAAL,CAAW8E,GAAlC,CAAjB;;AAEA,UAAIiiC,iBAAiB,CAAC7iC,GAAlB,CAAsB6lC,IAAtB,CAAJ,EAAiC;AAC/B,YAAID,IAAI,CAAC92B,OAAL,CAAa+2B,IAAb,IAAqB,CAAC,CAA1B,EAA6B;AAC3B,eAAKxsC,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAX,GAAiB,CAA5B,EAA+B,mCAA/B;AACD;AACF,OAJD,MAIO,IAAIO,gBAAgB,CAAC2kC,QAAD,CAAhB,IAA8BA,QAAQ,KAAK,EAA/C,EAAmD;AACxD,aAAKzsC,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAX,GAAiB,CAA5B,EAA+B,iCAA/B;AACD,OAFM,MAEA;AACL;AACD;;AAED,QAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACAglC,MAAAA,IAAI,IAAIC,IAAR;AACD;;AAED,SAAKnjC,WAAL,CAAiBjT,KAAK,CAACG,MAAvB,EAA+B;AAC7B8H,MAAAA,OAAO,EAAEiuC,OADoB;AAE7BhuC,MAAAA,KAAK,EAAEiuC;AAFsB,KAA/B;AAID;;AAEDG,EAAAA,OAAO,CAACC,KAAD,EAAQC,GAAR,EAAaC,QAAb,EAAuBC,iBAAiB,GAAG,IAA3C,EAAiD;AACtD,UAAM7tC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,UAAMwlC,iBAAiB,GAAGJ,KAAK,KAAK,EAAV,GAAelD,iCAAiC,CAACE,GAAjD,GAAuDF,iCAAiC,CAACC,SAAnH;AACA,UAAMsD,eAAe,GAAGL,KAAK,KAAK,EAAV,GAAe/C,+BAA+B,CAACD,GAA/C,GAAqDgD,KAAK,KAAK,EAAV,GAAe/C,+BAA+B,CAACG,GAA/C,GAAqD4C,KAAK,KAAK,CAAV,GAAc/C,+BAA+B,CAACE,GAA9C,GAAoDF,+BAA+B,CAACC,GAAtN;AACA,QAAIn1B,OAAO,GAAG,KAAd;AACA,QAAIu4B,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIzlC,CAAC,GAAG,CAAR,EAAW/I,CAAC,GAAGmuC,GAAG,IAAI,IAAP,GAAcM,QAAd,GAAyBN,GAA7C,EAAkDplC,CAAC,GAAG/I,CAAtD,EAAyD,EAAE+I,CAA3D,EAA8D;AAC5D,YAAMxD,IAAI,GAAG,KAAK8B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAb;AACA,UAAI+B,GAAJ;;AAEA,UAAI,KAAKsQ,SAAL,CAAe,kBAAf,CAAJ,EAAwC;AACtC,YAAI5V,IAAI,KAAK,EAAb,EAAiB;AACf,gBAAMmpC,IAAI,GAAG,KAAKrnC,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;AACA,gBAAMM,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,CAAb;;AAEA,cAAIylC,eAAe,CAACv3B,OAAhB,CAAwB5N,IAAxB,MAAkC,CAAC,CAAvC,EAA0C;AACxC,iBAAK7H,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,wDAA3B;AACD,WAFD,MAEO,IAAIwlC,iBAAiB,CAACt3B,OAAlB,CAA0B03B,IAA1B,IAAkC,CAAC,CAAnC,IAAwCJ,iBAAiB,CAACt3B,OAAlB,CAA0B5N,IAA1B,IAAkC,CAAC,CAA3E,IAAgFulC,MAAM,CAACC,KAAP,CAAaxlC,IAAb,CAApF,EAAwG;AAC7G,iBAAK7H,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,wDAA3B;AACD;;AAED,cAAI,CAACulC,iBAAL,EAAwB;AACtB,iBAAK9sC,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,4FAA3B;AACD;;AAED,YAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA;AACD;AACF;;AAED,UAAIvD,IAAI,IAAI,EAAZ,EAAgB;AACdsF,QAAAA,GAAG,GAAGtF,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFD,MAEO,IAAIA,IAAI,IAAI,EAAZ,EAAgB;AACrBsF,QAAAA,GAAG,GAAGtF,IAAI,GAAG,EAAP,GAAY,EAAlB;AACD,OAFM,MAEA,IAAIslC,QAAQ,CAACtlC,IAAD,CAAZ,EAAoB;AACzBsF,QAAAA,GAAG,GAAGtF,IAAI,GAAG,EAAb;AACD,OAFM,MAEA;AACLsF,QAAAA,GAAG,GAAG4jC,QAAN;AACD;;AAED,UAAI5jC,GAAG,IAAIqjC,KAAX,EAAkB;AAChB,YAAI,KAAK32C,OAAL,CAAaovC,aAAb,IAA8B97B,GAAG,IAAI,CAAzC,EAA4C;AAC1CA,UAAAA,GAAG,GAAG,CAAN;AACA,eAAKtJ,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAX,GAAmBuI,CAAnB,GAAuB,CAAlC,EAAqC,8BAA8BmlC,KAAnE;AACD,SAHD,MAGO,IAAIE,QAAJ,EAAc;AACnBvjC,UAAAA,GAAG,GAAG,CAAN;AACAoL,UAAAA,OAAO,GAAG,IAAV;AACD,SAHM,MAGA;AACL;AACD;AACF;;AAED,QAAE,KAAKjS,KAAL,CAAW8E,GAAb;AACA0lC,MAAAA,KAAK,GAAGA,KAAK,GAAGN,KAAR,GAAgBrjC,GAAxB;AACD;;AAED,QAAI,KAAK7G,KAAL,CAAW8E,GAAX,KAAmBtI,KAAnB,IAA4B2tC,GAAG,IAAI,IAAP,IAAe,KAAKnqC,KAAL,CAAW8E,GAAX,GAAiBtI,KAAjB,KAA2B2tC,GAAtE,IAA6El4B,OAAjF,EAA0F;AACxF,aAAO,IAAP;AACD;;AAED,WAAOu4B,KAAP;AACD;;AAEDhB,EAAAA,eAAe,CAACU,KAAD,EAAQ;AACrB,UAAM1tC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,QAAI+lC,QAAQ,GAAG,KAAf;AACA,SAAK7qC,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,UAAM+B,GAAG,GAAG,KAAKojC,OAAL,CAAaC,KAAb,CAAZ;;AAEA,QAAIrjC,GAAG,IAAI,IAAX,EAAiB;AACf,WAAKtJ,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAX,GAAmB,CAA9B,EAAiC,8BAA8B0tC,KAA/D;AACD;;AAED,QAAI,KAAK/yB,SAAL,CAAe,QAAf,CAAJ,EAA8B;AAC5B,UAAI,KAAK9T,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,MAA0C,GAA9C,EAAmD;AACjD,UAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA+lC,QAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,QAAI7lC,iBAAiB,CAAC,KAAK3B,KAAL,CAAW6kC,WAAX,CAAuB,KAAKloC,KAAL,CAAW8E,GAAlC,CAAD,CAArB,EAA+D;AAC7D,YAAM,KAAKvH,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,kCAA3B,CAAN;AACD;;AAED,QAAI+lC,QAAJ,EAAc;AACZ,YAAM7c,GAAG,GAAG,KAAK3qB,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,EAAwCgmC,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;AACA,WAAKlkC,WAAL,CAAiBjT,KAAK,CAACE,MAAvB,EAA+Bm6B,GAA/B;AACA;AACD;;AAED,SAAKpnB,WAAL,CAAiBjT,KAAK,CAACC,GAAvB,EAA4BiT,GAA5B;AACD;;AAEDgiC,EAAAA,UAAU,CAACkC,aAAD,EAAgB;AACxB,UAAMvuC,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,QAAIkmC,OAAO,GAAG,KAAd;AACA,QAAIH,QAAQ,GAAG,KAAf;AACA,QAAII,oBAAoB,GAAG,KAA3B;;AAEA,QAAI,CAACF,aAAD,IAAkB,KAAKd,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD;AAC/C,WAAK1sC,KAAL,CAAWf,KAAX,EAAkB,gBAAlB;AACD;;AAED,QAAI0uC,KAAK,GAAG,KAAKlrC,KAAL,CAAW8E,GAAX,GAAiBtI,KAAjB,IAA0B,CAA1B,IAA+B,KAAK6G,KAAL,CAAW6Q,UAAX,CAAsB1X,KAAtB,MAAiC,EAA5E;;AAEA,QAAI0uC,KAAJ,EAAW;AACT,UAAI,KAAKlrC,KAAL,CAAWyD,MAAf,EAAuB;AACrB,aAAKlG,KAAL,CAAWf,KAAX,EAAkB,sDAAlB;AACD;;AAED,UAAI,OAAO4G,IAAP,CAAY,KAAKC,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,CAAZ,CAAJ,EAA0D;AACxDomC,QAAAA,KAAK,GAAG,KAAR;AACAD,QAAAA,oBAAoB,GAAG,IAAvB;AACD;AACF;;AAED,QAAI7lC,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;;AAEA,QAAIM,IAAI,KAAK,EAAT,IAAe,CAAC8lC,KAApB,EAA2B;AACzB,QAAE,KAAKlrC,KAAL,CAAW8E,GAAb;AACA,WAAKmlC,OAAL,CAAa,EAAb;AACAe,MAAAA,OAAO,GAAG,IAAV;AACA5lC,MAAAA,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAP;AACD;;AAED,QAAI,CAACM,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,GAAzB,KAAiC,CAAC8lC,KAAtC,EAA6C;AAC3C9lC,MAAAA,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,EAAE,KAAKlU,KAAL,CAAW8E,GAAnC,CAAP;;AAEA,UAAIM,IAAI,KAAK,EAAT,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC9B,UAAE,KAAKpF,KAAL,CAAW8E,GAAb;AACD;;AAED,UAAI,KAAKmlC,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B,KAAK1sC,KAAL,CAAWf,KAAX,EAAkB,gBAAlB;AAC/BwuC,MAAAA,OAAO,GAAG,IAAV;AACA5lC,MAAAA,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAP;AACD;;AAED,QAAI,KAAKqS,SAAL,CAAe,kBAAf,MAAuC+zB,KAAK,IAAID,oBAAhD,CAAJ,EAA2E;AACzE,YAAME,aAAa,GAAG,KAAK9nC,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,EAAwCkO,OAAxC,CAAgD,GAAhD,CAAtB;;AAEA,UAAIm4B,aAAa,GAAG,CAApB,EAAuB;AACrB,aAAK5tC,KAAL,CAAW4tC,aAAa,GAAG3uC,KAA3B,EAAkC,mDAAlC;AACD;AACF;;AAED,QAAI,KAAK2a,SAAL,CAAe,QAAf,CAAJ,EAA8B;AAC5B,UAAI/R,IAAI,KAAK,GAAb,EAAkB;AAChB,YAAI4lC,OAAO,IAAIE,KAAX,IAAoBD,oBAAxB,EAA8C;AAC5C,eAAK1tC,KAAL,CAAWf,KAAX,EAAkB,uBAAlB;AACD;;AAED,UAAE,KAAKwD,KAAL,CAAW8E,GAAb;AACA+lC,QAAAA,QAAQ,GAAG,IAAX;AACD;AACF;;AAED,QAAI7lC,iBAAiB,CAAC,KAAK3B,KAAL,CAAW6kC,WAAX,CAAuB,KAAKloC,KAAL,CAAW8E,GAAlC,CAAD,CAArB,EAA+D;AAC7D,YAAM,KAAKvH,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,kCAA3B,CAAN;AACD;;AAED,UAAMkpB,GAAG,GAAG,KAAK3qB,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,EAAwB,KAAKwD,KAAL,CAAW8E,GAAnC,EAAwCgmC,OAAxC,CAAgD,OAAhD,EAAyD,EAAzD,CAAZ;;AAEA,QAAID,QAAJ,EAAc;AACZ,WAAKjkC,WAAL,CAAiBjT,KAAK,CAACE,MAAvB,EAA+Bm6B,GAA/B;AACA;AACD;;AAED,UAAMnnB,GAAG,GAAGqkC,KAAK,GAAG7c,QAAQ,CAACL,GAAD,EAAM,CAAN,CAAX,GAAsBod,UAAU,CAACpd,GAAD,CAAjD;AACA,SAAKpnB,WAAL,CAAiBjT,KAAK,CAACC,GAAvB,EAA4BiT,GAA5B;AACD;;AAEDwkC,EAAAA,aAAa,CAACC,cAAD,EAAiB;AAC5B,UAAM9d,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;AACA,QAAIvD,IAAJ;;AAEA,QAAIisB,EAAE,KAAK,GAAX,EAAgB;AACd,YAAM+d,OAAO,GAAG,EAAE,KAAKvrC,KAAL,CAAW8E,GAA7B;AACAvD,MAAAA,IAAI,GAAG,KAAKiqC,WAAL,CAAiB,KAAKnoC,KAAL,CAAW2P,OAAX,CAAmB,GAAnB,EAAwB,KAAKhT,KAAL,CAAW8E,GAAnC,IAA0C,KAAK9E,KAAL,CAAW8E,GAAtE,EAA2E,IAA3E,EAAiFwmC,cAAjF,CAAP;AACA,QAAE,KAAKtrC,KAAL,CAAW8E,GAAb;;AAEA,UAAIvD,IAAI,KAAK,IAAb,EAAmB;AACjB,UAAE,KAAKvB,KAAL,CAAW0mC,6BAAb;AACD,OAFD,MAEO,IAAInlC,IAAI,GAAG,QAAX,EAAqB;AAC1B,YAAI+pC,cAAJ,EAAoB;AAClB,eAAK/tC,KAAL,CAAWguC,OAAX,EAAoB,0BAApB;AACD,SAFD,MAEO;AACL,eAAKvrC,KAAL,CAAW0mC,6BAAX,GAA2C6E,OAAO,GAAG,CAArD;AACA,iBAAO,IAAP;AACD;AACF;AACF,KAfD,MAeO;AACLhqC,MAAAA,IAAI,GAAG,KAAKiqC,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAP;AACD;;AAED,WAAO/pC,IAAP;AACD;;AAEDkoC,EAAAA,UAAU,CAAC1b,KAAD,EAAQ;AAChB,QAAIrrB,GAAG,GAAG,EAAV;AAAA,QACI6qB,UAAU,GAAG,EAAE,KAAKvtB,KAAL,CAAW8E,GAD9B;;AAGA,aAAS;AACP,UAAI,KAAK9E,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,cAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8BAA7B,CAAN;AACD;;AAED,YAAMgxB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;AACA,UAAI0oB,EAAE,KAAKO,KAAX,EAAkB;;AAElB,UAAIP,EAAE,KAAK,EAAX,EAAe;AACb9qB,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACApC,QAAAA,GAAG,IAAI,KAAK+oC,eAAL,CAAqB,KAArB,CAAP;AACAle,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAJD,MAIO,IAAI0oB,EAAE,KAAK,IAAP,IAAeA,EAAE,KAAK,IAA1B,EAAgC;AACrC,UAAE,KAAKxtB,KAAL,CAAW8E,GAAb;AACA,UAAE,KAAK9E,KAAL,CAAW4tB,OAAb;AACD,OAHM,MAGA,IAAItsB,SAAS,CAACksB,EAAD,CAAb,EAAmB;AACxB,cAAM,KAAKjwB,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8BAA7B,CAAN;AACD,OAFM,MAEA;AACL,UAAE,KAAKwD,KAAL,CAAW8E,GAAb;AACD;AACF;;AAEDpC,IAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAX,EAA7B,CAAP;AACA,SAAK8B,WAAL,CAAiBjT,KAAK,CAACI,MAAvB,EAA+B2O,GAA/B;AACD;;AAEDL,EAAAA,aAAa,GAAG;AACd,QAAIK,GAAG,GAAG,EAAV;AAAA,QACI6qB,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAD5B;AAAA,QAEI4mC,eAAe,GAAG,KAFtB;;AAIA,aAAS;AACP,UAAI,KAAK1rC,KAAL,CAAW8E,GAAX,IAAkB,KAAKxH,MAA3B,EAAmC;AACjC,cAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,uBAA7B,CAAN;AACD;;AAED,YAAMgxB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAX;;AAEA,UAAI0oB,EAAE,KAAK,EAAP,IAAaA,EAAE,KAAK,EAAP,IAAa,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAX,GAAiB,CAAvC,MAA8C,GAA5E,EAAiF;AAC/E,YAAI,KAAK9E,KAAL,CAAW8E,GAAX,KAAmB,KAAK9E,KAAL,CAAWxD,KAA9B,IAAuC,KAAK4L,KAAL,CAAWzU,KAAK,CAACsB,QAAjB,CAA3C,EAAuE;AACrE,cAAIu4B,EAAE,KAAK,EAAX,EAAe;AACb,iBAAKxtB,KAAL,CAAW8E,GAAX,IAAkB,CAAlB;AACA,iBAAK8B,WAAL,CAAiBjT,KAAK,CAACyB,YAAvB;AACA;AACD,WAJD,MAIO;AACL,cAAE,KAAK4K,KAAL,CAAW8E,GAAb;AACA,iBAAK8B,WAAL,CAAiBjT,KAAK,CAACwB,SAAvB;AACA;AACD;AACF;;AAEDuN,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACA,aAAK8B,WAAL,CAAiBjT,KAAK,CAACsB,QAAvB,EAAiCy2C,eAAe,GAAG,IAAH,GAAUhpC,GAA1D;AACA;AACD;;AAED,UAAI8qB,EAAE,KAAK,EAAX,EAAe;AACb9qB,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACA,cAAM4kC,OAAO,GAAG,KAAK+B,eAAL,CAAqB,IAArB,CAAhB;;AAEA,YAAI/B,OAAO,KAAK,IAAhB,EAAsB;AACpBgC,UAAAA,eAAe,GAAG,IAAlB;AACD,SAFD,MAEO;AACLhpC,UAAAA,GAAG,IAAIgnC,OAAP;AACD;;AAEDnc,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAXD,MAWO,IAAIxD,SAAS,CAACksB,EAAD,CAAb,EAAmB;AACxB9qB,QAAAA,GAAG,IAAI,KAAKW,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAP;AACA,UAAE,KAAK9E,KAAL,CAAW8E,GAAb;;AAEA,gBAAQ0oB,EAAR;AACE,eAAK,EAAL;AACE,gBAAI,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,gBAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;;AAEH,eAAK,EAAL;AACEpC,YAAAA,GAAG,IAAI,IAAP;AACA;;AAEF;AACEA,YAAAA,GAAG,IAAIrE,MAAM,CAAC4G,YAAP,CAAoBuoB,EAApB,CAAP;AACA;AAZJ;;AAeA,UAAE,KAAKxtB,KAAL,CAAW4tB,OAAb;AACA,aAAK5tB,KAAL,CAAW6tB,SAAX,GAAuB,KAAK7tB,KAAL,CAAW8E,GAAlC;AACAyoB,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAtBM,MAsBA;AACL,UAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;AACF;AACF;;AAED2mC,EAAAA,eAAe,CAACE,UAAD,EAAa;AAC1B,UAAML,cAAc,GAAG,CAACK,UAAxB;AACA,UAAMne,EAAE,GAAG,KAAKnqB,KAAL,CAAW6Q,UAAX,CAAsB,EAAE,KAAKlU,KAAL,CAAW8E,GAAnC,CAAX;AACA,MAAE,KAAK9E,KAAL,CAAW8E,GAAb;;AAEA,YAAQ0oB,EAAR;AACE,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE;AACE,gBAAMjsB,IAAI,GAAG,KAAKiqC,WAAL,CAAiB,CAAjB,EAAoB,KAApB,EAA2BF,cAA3B,CAAb;AACA,iBAAO/pC,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBlD,MAAM,CAAC4G,YAAP,CAAoB1D,IAApB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE;AACE,gBAAMA,IAAI,GAAG,KAAK8pC,aAAL,CAAmBC,cAAnB,CAAb;AACA,iBAAO/pC,IAAI,KAAK,IAAT,GAAgB,IAAhB,GAAuBlD,MAAM,CAAC+vB,aAAP,CAAqB7sB,IAArB,CAA9B;AACD;;AAEH,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,eAAO,IAAP;;AAEF,WAAK,GAAL;AACE,eAAO,QAAP;;AAEF,WAAK,GAAL;AACE,eAAO,IAAP;;AAEF,WAAK,EAAL;AACE,YAAI,KAAK8B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,MAA0C,EAA9C,EAAkD;AAChD,YAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACD;;AAEH,WAAK,EAAL;AACE,aAAK9E,KAAL,CAAW6tB,SAAX,GAAuB,KAAK7tB,KAAL,CAAW8E,GAAlC;AACA,UAAE,KAAK9E,KAAL,CAAW4tB,OAAb;;AAEF,WAAK,IAAL;AACA,WAAK,IAAL;AACE,eAAO,EAAP;;AAEF,WAAK,EAAL;AACA,WAAK,EAAL;AACE,YAAI+d,UAAJ,EAAgB;AACd,gBAAMJ,OAAO,GAAG,KAAKvrC,KAAL,CAAW8E,GAAX,GAAiB,CAAjC;AACA,eAAK9E,KAAL,CAAW0mC,6BAAX,GAA2C6E,OAA3C;AACA,iBAAO,IAAP;AACD;;AAEH;AACE,YAAI/d,EAAE,IAAI,EAAN,IAAYA,EAAE,IAAI,EAAtB,EAA0B;AACxB,gBAAM+d,OAAO,GAAG,KAAKvrC,KAAL,CAAW8E,GAAX,GAAiB,CAAjC;AACA,cAAI8mC,QAAQ,GAAG,KAAKvoC,KAAL,CAAW8qB,MAAX,CAAkB,KAAKnuB,KAAL,CAAW8E,GAAX,GAAiB,CAAnC,EAAsC,CAAtC,EAAyCsD,KAAzC,CAA+C,SAA/C,EAA0D,CAA1D,CAAf;AACA,cAAI8iC,KAAK,GAAG7c,QAAQ,CAACud,QAAD,EAAW,CAAX,CAApB;;AAEA,cAAIV,KAAK,GAAG,GAAZ,EAAiB;AACfU,YAAAA,QAAQ,GAAGA,QAAQ,CAAC7uC,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAmuC,YAAAA,KAAK,GAAG7c,QAAQ,CAACud,QAAD,EAAW,CAAX,CAAhB;AACD;;AAED,eAAK5rC,KAAL,CAAW8E,GAAX,IAAkB8mC,QAAQ,CAACtuC,MAAT,GAAkB,CAApC;AACA,gBAAM8H,IAAI,GAAG,KAAK/B,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW8E,GAAjC,CAAb;;AAEA,cAAI8mC,QAAQ,KAAK,GAAb,IAAoBxmC,IAAI,KAAK,EAA7B,IAAmCA,IAAI,KAAK,EAAhD,EAAoD;AAClD,gBAAIumC,UAAJ,EAAgB;AACd,mBAAK3rC,KAAL,CAAW0mC,6BAAX,GAA2C6E,OAA3C;AACA,qBAAO,IAAP;AACD,aAHD,MAGO,IAAI,KAAKvrC,KAAL,CAAWyD,MAAf,EAAuB;AAC5B,mBAAKlG,KAAL,CAAWguC,OAAX,EAAoB,8BAApB;AACD,aAFM,MAEA,IAAI,CAAC,KAAKvrC,KAAL,CAAWumC,aAAhB,EAA+B;AACpC,mBAAKvmC,KAAL,CAAWumC,aAAX,GAA2B,IAA3B;AACA,mBAAKvmC,KAAL,CAAWwmC,aAAX,GAA2B+E,OAA3B;AACD;AACF;;AAED,iBAAOltC,MAAM,CAAC4G,YAAP,CAAoBimC,KAApB,CAAP;AACD;;AAED,eAAO7sC,MAAM,CAAC4G,YAAP,CAAoBuoB,EAApB,CAAP;AAjFJ;AAmFD;;AAEDge,EAAAA,WAAW,CAACrB,GAAD,EAAMC,QAAN,EAAgBkB,cAAhB,EAAgC;AACzC,UAAMC,OAAO,GAAG,KAAKvrC,KAAL,CAAW8E,GAA3B;AACA,UAAM+mC,CAAC,GAAG,KAAK5B,OAAL,CAAa,EAAb,EAAiBE,GAAjB,EAAsBC,QAAtB,EAAgC,KAAhC,CAAV;;AAEA,QAAIyB,CAAC,KAAK,IAAV,EAAgB;AACd,UAAIP,cAAJ,EAAoB;AAClB,aAAK/tC,KAAL,CAAWguC,OAAX,EAAoB,+BAApB;AACD,OAFD,MAEO;AACL,aAAKvrC,KAAL,CAAW8E,GAAX,GAAiBymC,OAAO,GAAG,CAA3B;AACA,aAAKvrC,KAAL,CAAW0mC,6BAAX,GAA2C6E,OAAO,GAAG,CAArD;AACD;AACF;;AAED,WAAOM,CAAP;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI/nC,IAAI,GAAG,EAAX;AACA,SAAK/D,KAAL,CAAWa,WAAX,GAAyB,KAAzB;AACA,UAAMrE,KAAK,GAAG,KAAKwD,KAAL,CAAW8E,GAAzB;AACA,QAAIyoB,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAA5B;;AAEA,WAAO,KAAK9E,KAAL,CAAW8E,GAAX,GAAiB,KAAKxH,MAA7B,EAAqC;AACnC,YAAMkwB,EAAE,GAAG,KAAKnqB,KAAL,CAAW6kC,WAAX,CAAuB,KAAKloC,KAAL,CAAW8E,GAAlC,CAAX;;AAEA,UAAIO,gBAAgB,CAACmoB,EAAD,CAApB,EAA0B;AACxB,aAAKxtB,KAAL,CAAW8E,GAAX,IAAkB0oB,EAAE,IAAI,MAAN,GAAe,CAAf,GAAmB,CAArC;AACD,OAFD,MAEO,IAAI,KAAKxtB,KAAL,CAAWiD,UAAX,IAAyBuqB,EAAE,KAAK,EAApC,EAAwC;AAC7C,UAAE,KAAKxtB,KAAL,CAAW8E,GAAb;AACD,OAFM,MAEA,IAAI0oB,EAAE,KAAK,EAAX,EAAe;AACpB,aAAKxtB,KAAL,CAAWa,WAAX,GAAyB,IAAzB;AACAkD,QAAAA,IAAI,IAAI,KAAKV,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAR;AACA,cAAMinC,QAAQ,GAAG,KAAK/rC,KAAL,CAAW8E,GAA5B;AACA,cAAMknC,eAAe,GAAG,KAAKhsC,KAAL,CAAW8E,GAAX,KAAmBtI,KAAnB,GAA2BwI,iBAA3B,GAA+CK,gBAAvE;;AAEA,YAAI,KAAKhC,KAAL,CAAW6Q,UAAX,CAAsB,EAAE,KAAKlU,KAAL,CAAW8E,GAAnC,MAA4C,GAAhD,EAAqD;AACnD,eAAKvH,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA2B,2CAA3B;AACA;AACD;;AAED,UAAE,KAAK9E,KAAL,CAAW8E,GAAb;AACA,cAAMmnC,GAAG,GAAG,KAAKZ,aAAL,CAAmB,IAAnB,CAAZ;;AAEA,YAAIY,GAAG,KAAK,IAAZ,EAAkB;AAChB,cAAI,CAACD,eAAe,CAACC,GAAD,CAApB,EAA2B;AACzB,iBAAK1uC,KAAL,CAAWwuC,QAAX,EAAqB,wBAArB;AACD;;AAEDhoC,UAAAA,IAAI,IAAI1F,MAAM,CAAC+vB,aAAP,CAAqB6d,GAArB,CAAR;AACD;;AAED1e,QAAAA,UAAU,GAAG,KAAKvtB,KAAL,CAAW8E,GAAxB;AACD,OAvBM,MAuBA;AACL;AACD;AACF;;AAED,WAAOf,IAAI,GAAG,KAAKV,KAAL,CAAWtG,KAAX,CAAiBwwB,UAAjB,EAA6B,KAAKvtB,KAAL,CAAW8E,GAAxC,CAAd;AACD;;AAED7B,EAAAA,UAAU,CAACc,IAAD,EAAO;AACf,WAAOA,IAAI,KAAK,YAAT,IAAyBA,IAAI,KAAK,iBAAzC;AACD;;AAEDqQ,EAAAA,QAAQ,GAAG;AACT,UAAMrQ,IAAI,GAAG,KAAK+nC,SAAL,EAAb;AACA,UAAMxwC,IAAI,GAAGnI,QAAQ,CAACswC,GAAT,CAAa1/B,IAAb,KAAsBpQ,KAAK,CAACL,IAAzC;;AAEA,QAAI,KAAK0M,KAAL,CAAWiD,UAAX,KAA0B,CAAC,KAAKA,UAAL,CAAgBc,IAAhB,CAAD,IAA0B,CAAC,KAAK/D,KAAL,CAAWsH,MAAhE,CAAJ,EAA6E;AAC3E,WAAK/J,KAAL,CAAW,KAAKyC,KAAL,CAAW8E,GAAtB,EAA4B,sBAAqBf,IAAK,EAAtD;AACD;;AAED,SAAK6C,WAAL,CAAiBtL,IAAjB,EAAuByI,IAAvB;AACD;;AAED0jC,EAAAA,mBAAmB,GAAG;AACpB,UAAMlP,EAAE,GAAG,KAAKv4B,KAAL,CAAW1E,IAAX,CAAgBvI,OAA3B;;AAEA,QAAIwlC,EAAE,IAAI,KAAKv4B,KAAL,CAAWa,WAArB,EAAkC;AAChC,WAAKtD,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA8B,8BAA6B+7B,EAAG,EAA9D;AACD;AACF;;AAEDr1B,EAAAA,YAAY,CAACL,QAAD,EAAW;AACrB,UAAMqpC,MAAM,GAAG,KAAKtpC,UAAL,EAAf;;AAEA,QAAIspC,MAAM,KAAKpqC,OAAO,CAACQ,kBAAnB,IAAyC4pC,MAAM,KAAKpqC,OAAO,CAACS,iBAAhE,EAAmF;AACjF,aAAO,IAAP;AACD;;AAED,QAAIM,QAAQ,KAAKlP,KAAK,CAACgB,KAAnB,KAA6Bu3C,MAAM,KAAKpqC,OAAO,CAACC,cAAnB,IAAqCmqC,MAAM,KAAKpqC,OAAO,CAACE,eAArF,CAAJ,EAA2G;AACzG,aAAO,CAACkqC,MAAM,CAACvqC,MAAf;AACD;;AAED,QAAIkB,QAAQ,KAAKlP,KAAK,CAAC6D,OAAnB,IAA8BqL,QAAQ,KAAKlP,KAAK,CAACL,IAAnB,IAA2B,KAAK0M,KAAL,CAAWyC,WAAxE,EAAqF;AACnF,aAAOtB,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWxD,KAAnD,CAAf,CAAP;AACD;;AAED,QAAIqG,QAAQ,KAAKlP,KAAK,CAACwD,KAAnB,IAA4B0L,QAAQ,KAAKlP,KAAK,CAACe,IAA/C,IAAuDmO,QAAQ,KAAKlP,KAAK,CAACK,GAA1E,IAAiF6O,QAAQ,KAAKlP,KAAK,CAACa,MAApG,IAA8GqO,QAAQ,KAAKlP,KAAK,CAACqB,KAArI,EAA4I;AAC1I,aAAO,IAAP;AACD;;AAED,QAAI6N,QAAQ,KAAKlP,KAAK,CAACQ,MAAvB,EAA+B;AAC7B,aAAO+3C,MAAM,KAAKpqC,OAAO,CAACC,cAA1B;AACD;;AAED,QAAIc,QAAQ,KAAKlP,KAAK,CAACiE,IAAnB,IAA2BiL,QAAQ,KAAKlP,KAAK,CAACkE,MAA9C,IAAwDgL,QAAQ,KAAKlP,KAAK,CAACL,IAA/E,EAAqF;AACnF,aAAO,KAAP;AACD;;AAED,QAAIuP,QAAQ,KAAKlP,KAAK,CAAC0C,UAAvB,EAAmC;AACjC,aAAO,IAAP;AACD;;AAED,WAAO,CAAC,KAAK2J,KAAL,CAAWyC,WAAnB;AACD;;AAEDvP,EAAAA,aAAa,CAAC2P,QAAD,EAAW;AACtB,UAAMvH,IAAI,GAAG,KAAK0E,KAAL,CAAW1E,IAAxB;AACA,QAAI6wC,MAAJ;;AAEA,QAAI7wC,IAAI,CAACvI,OAAL,KAAiB8P,QAAQ,KAAKlP,KAAK,CAACkB,GAAnB,IAA0BgO,QAAQ,KAAKlP,KAAK,CAACoB,WAA9D,CAAJ,EAAgF;AAC9E,WAAKiL,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD,KAFD,MAEO,IAAI0pC,MAAM,GAAG7wC,IAAI,CAACpI,aAAlB,EAAiC;AACtCi5C,MAAAA,MAAM,CAACp1B,IAAP,CAAY,IAAZ,EAAkBlU,QAAlB;AACD,KAFM,MAEA;AACL,WAAK7C,KAAL,CAAWyC,WAAX,GAAyBnH,IAAI,CAACjJ,UAA9B;AACD;AACF;;AA9oCoC;;AAkpCvC,MAAM6oB,OAAO,GAAG,sBAAhB;;AACA,MAAMkxB,UAAN,SAAyB5E,SAAzB,CAAmC;AACjC6E,EAAAA,QAAQ,CAAChxC,IAAD,EAAO+C,GAAP,EAAYyI,GAAZ,EAAiB;AACvB,QAAI,CAACxL,IAAL,EAAW;AACX,UAAMuB,KAAK,GAAGvB,IAAI,CAACuB,KAAL,GAAavB,IAAI,CAACuB,KAAL,IAAc,EAAzC;AACAA,IAAAA,KAAK,CAACwB,GAAD,CAAL,GAAayI,GAAb;AACD;;AAED+B,EAAAA,YAAY,CAAC0jC,EAAD,EAAK;AACf,WAAO,KAAKlkC,KAAL,CAAWzU,KAAK,CAAC0C,UAAjB,KAAgC,KAAK2J,KAAL,CAAW5N,KAAX,KAAqBk6C,EAA5D;AACD;;AAED5zB,EAAAA,qBAAqB,CAAC4zB,EAAD,EAAK;AACxB,UAAMlnC,IAAI,GAAG,KAAKwiC,cAAL,EAAb;;AAEA,QAAI,KAAKvkC,KAAL,CAAWumC,MAAX,CAAkBxkC,IAAlB,MAA4BknC,EAAhC,EAAoC;AAClC,UAAIlnC,IAAI,GAAG,CAAP,KAAa,KAAK/B,KAAL,CAAW/F,MAA5B,EAAoC;AAClC,eAAO,IAAP;AACD;;AAED,YAAMivC,SAAS,GAAG,KAAKlpC,KAAL,CAAW6Q,UAAX,CAAsB9O,IAAI,GAAG,CAA7B,CAAlB;AACA,aAAOmnC,SAAS,KAAKD,EAAE,CAACp4B,UAAH,CAAc,CAAd,CAAd,IAAkCq4B,SAAS,KAAK,EAAvD;AACD;;AAED,WAAO,KAAP;AACD;;AAEDr/B,EAAAA,gBAAgB,CAACo/B,EAAD,EAAK;AACnB,QAAI,KAAK1jC,YAAL,CAAkB0jC,EAAlB,CAAJ,EAA2B;AACzB,WAAKlnC,IAAL;AACD,KAFD,MAEO;AACL,WAAK6E,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAAC0C,UAA5B;AACD;AACF;;AAEDm2C,EAAAA,aAAa,CAACF,EAAD,EAAK;AAChB,QAAI,KAAK1jC,YAAL,CAAkB0jC,EAAlB,CAAJ,EAA2B;AACzB,WAAKlnC,IAAL;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDwE,EAAAA,YAAY,CAACtW,IAAD,EAAO;AACjB,WAAO,KAAK8U,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK0M,KAAL,CAAW5N,KAAX,KAAqBkB,IAA/C,IAAuD,CAAC,KAAK0M,KAAL,CAAWa,WAA1E;AACD;;AAED4rC,EAAAA,oBAAoB,CAACC,SAAD,EAAYp5C,IAAZ,EAAkB;AACpC,UAAMq5C,OAAO,GAAGD,SAAS,GAAGp5C,IAAI,CAACgK,MAAjC;AACA,WAAO,KAAK+F,KAAL,CAAWtG,KAAX,CAAiB2vC,SAAjB,EAA4BC,OAA5B,MAAyCr5C,IAAzC,KAAkDq5C,OAAO,KAAK,KAAKtpC,KAAL,CAAW/F,MAAvB,IAAiC,CAAC+H,gBAAgB,CAAC,KAAKhC,KAAL,CAAW6Q,UAAX,CAAsBy4B,OAAtB,CAAD,CAApG,CAAP;AACD;;AAEDv2B,EAAAA,qBAAqB,CAAC9iB,IAAD,EAAO;AAC1B,UAAM8R,IAAI,GAAG,KAAKwiC,cAAL,EAAb;AACA,WAAO,KAAK6E,oBAAL,CAA0BrnC,IAA1B,EAAgC9R,IAAhC,CAAP;AACD;;AAEDkW,EAAAA,aAAa,CAAClW,IAAD,EAAO;AAClB,WAAO,KAAKsW,YAAL,CAAkBtW,IAAlB,KAA2B,KAAK0U,GAAL,CAASrU,KAAK,CAACL,IAAf,CAAlC;AACD;;AAEDuU,EAAAA,gBAAgB,CAACvU,IAAD,EAAOqnB,OAAP,EAAgB;AAC9B,QAAI,CAAC,KAAKnR,aAAL,CAAmBlW,IAAnB,CAAL,EAA+B,KAAK2W,UAAL,CAAgB,IAAhB,EAAsB0Q,OAAtB;AAChC;;AAED3K,EAAAA,kBAAkB,GAAG;AACnB,WAAO,KAAK5H,KAAL,CAAWzU,KAAK,CAACK,GAAjB,KAAyB,KAAKoU,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAzB,IAAqD,KAAKk+B,qBAAL,EAA5D;AACD;;AAEDA,EAAAA,qBAAqB,GAAG;AACtB,WAAOpxB,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWxD,KAAnD,CAAf,CAAP;AACD;;AAEDw/B,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKh0B,GAAL,CAASrU,KAAK,CAACe,IAAf,KAAwB,KAAKsb,kBAAL,EAA/B;AACD;;AAED5G,EAAAA,SAAS,GAAG;AACV,QAAI,CAAC,KAAK4yB,gBAAL,EAAL,EAA8B,KAAK/xB,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAACe,IAA5B;AAC/B;;AAED6S,EAAAA,MAAM,CAACjM,IAAD,EAAOwJ,GAAP,EAAY;AAChB,SAAKkD,GAAL,CAAS1M,IAAT,KAAkB,KAAK2O,UAAL,CAAgBnF,GAAhB,EAAqBxJ,IAArB,CAAlB;AACD;;AAEDukC,EAAAA,aAAa,CAACllB,OAAO,GAAG,mBAAX,EAAgC;AAC3C,QAAI,KAAK3a,KAAL,CAAWxD,KAAX,GAAmB,KAAKwD,KAAL,CAAWsD,UAAlC,EAA8C;AAC5C,WAAK/F,KAAL,CAAW,KAAKyC,KAAL,CAAWsD,UAAtB,EAAkCqX,OAAlC;AACD;AACF;;AAED1Q,EAAAA,UAAU,CAACnF,GAAD,EAAM8nC,aAAa,GAAG,kBAAtB,EAA0C;AAClD,QAAI,OAAOA,aAAP,KAAyB,QAA7B,EAAuC;AACrCA,MAAAA,aAAa,GAAI,+BAA8BA,aAAa,CAAC/5C,KAAM,GAAnE;AACD;;AAED,UAAM,KAAK0K,KAAL,CAAWuH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK9E,KAAL,CAAWxD,KAA1C,EAAiDowC,aAAjD,CAAN;AACD;;AAEDj0B,EAAAA,YAAY,CAACrlB,IAAD,EAAOwR,GAAP,EAAY;AACtB,QAAI,CAAC,KAAKqS,SAAL,CAAe7jB,IAAf,CAAL,EAA2B;AACzB,YAAM,KAAKiK,KAAL,CAAWuH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK9E,KAAL,CAAWxD,KAA1C,EAAkD,kEAAiElJ,IAAK,GAAxH,EAA4H;AAChI0xC,QAAAA,kBAAkB,EAAE,CAAC1xC,IAAD;AAD4G,OAA5H,CAAN;AAGD;;AAED,WAAO,IAAP;AACD;;AAEDu5C,EAAAA,eAAe,CAACC,KAAD,EAAQhoC,GAAR,EAAa;AAC1B,QAAI,CAACgoC,KAAK,CAAC5L,IAAN,CAAW2K,CAAC,IAAI,KAAK10B,SAAL,CAAe00B,CAAf,CAAhB,CAAL,EAAyC;AACvC,YAAM,KAAKtuC,KAAL,CAAWuH,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,KAAK9E,KAAL,CAAWxD,KAA1C,EAAkD,sFAAqFswC,KAAK,CAACpL,IAAN,CAAW,IAAX,CAAiB,GAAxJ,EAA4J;AAChKsD,QAAAA,kBAAkB,EAAE8H;AAD4I,OAA5J,CAAN;AAGD;AACF;;AAEDC,EAAAA,8BAA8B,GAAG;AAC/B,QAAI,KAAK/sC,KAAL,CAAWomC,QAAX,KAAwB,CAAC,CAAzB,KAA+B,KAAKpmC,KAAL,CAAWqmC,QAAX,KAAwB,CAAC,CAAzB,IAA8B,KAAKrmC,KAAL,CAAWomC,QAAX,GAAsB,KAAKpmC,KAAL,CAAWqmC,QAA9F,CAAJ,EAA6G;AAC3G,WAAK9oC,KAAL,CAAW,KAAKyC,KAAL,CAAWomC,QAAtB,EAAgC,0DAAhC;AACD;;AAED,QAAI,KAAKpmC,KAAL,CAAWqmC,QAAX,KAAwB,CAAC,CAA7B,EAAgC;AAC9B,WAAK9oC,KAAL,CAAW,KAAKyC,KAAL,CAAWqmC,QAAtB,EAAgC,uDAAhC;AACD;AACF;;AAED2G,EAAAA,eAAe,CAACxwC,KAAD,EAAQ;AACrB,aAAS;AACPgF,MAAAA,cAAc,CAAC4hC,SAAf,GAA2B5mC,KAA3B;AACAA,MAAAA,KAAK,IAAIgF,cAAc,CAACyF,IAAf,CAAoB,KAAK5D,KAAzB,EAAgC,CAAhC,EAAmC/F,MAA5C;AACA,YAAM8K,KAAK,GAAG8S,OAAO,CAACjU,IAAR,CAAa,KAAK5D,KAAL,CAAWtG,KAAX,CAAiBP,KAAjB,CAAb,CAAd;AACA,UAAI,CAAC4L,KAAL,EAAY;AACZ,UAAIA,KAAK,CAAC,CAAD,CAAL,KAAa,YAAjB,EAA+B,OAAO,IAAP;AAC/B5L,MAAAA,KAAK,IAAI4L,KAAK,CAAC,CAAD,CAAL,CAAS9K,MAAlB;AACAkE,MAAAA,cAAc,CAAC4hC,SAAf,GAA2B5mC,KAA3B;AACAA,MAAAA,KAAK,IAAIgF,cAAc,CAACyF,IAAf,CAAoB,KAAK5D,KAAzB,EAAgC,CAAhC,EAAmC/F,MAA5C;;AAEA,UAAI,KAAK+F,KAAL,CAAW7G,KAAX,MAAsB,GAA1B,EAA+B;AAC7BA,QAAAA,KAAK;AACN;AACF;;AAED,WAAO,KAAP;AACD;;AAED8U,EAAAA,QAAQ,CAAC27B,EAAD,EAAKC,QAAQ,GAAG,KAAKltC,KAAL,CAAWyR,KAAX,EAAhB,EAAoC;AAC1C,UAAM07B,WAAW,GAAG;AAClB9xC,MAAAA,IAAI,EAAE;AADY,KAApB;;AAIA,QAAI;AACF,YAAMA,IAAI,GAAG4xC,EAAE,CAAC,CAAC5xC,IAAI,GAAG,IAAR,KAAiB;AAC/B8xC,QAAAA,WAAW,CAAC9xC,IAAZ,GAAmBA,IAAnB;AACA,cAAM8xC,WAAN;AACD,OAHc,CAAf;;AAKA,UAAI,KAAKntC,KAAL,CAAWqlC,MAAX,CAAkB/nC,MAAlB,GAA2B4vC,QAAQ,CAAC7H,MAAT,CAAgB/nC,MAA/C,EAAuD;AACrD,cAAMkU,SAAS,GAAG,KAAKxR,KAAvB;AACA,aAAKA,KAAL,GAAaktC,QAAb;AACA,eAAO;AACL7xC,UAAAA,IADK;AAELkW,UAAAA,KAAK,EAAEC,SAAS,CAAC6zB,MAAV,CAAiB6H,QAAQ,CAAC7H,MAAT,CAAgB/nC,MAAjC,CAFF;AAGLka,UAAAA,MAAM,EAAE,KAHH;AAILe,UAAAA,OAAO,EAAE,KAJJ;AAKL/G,UAAAA;AALK,SAAP;AAOD;;AAED,aAAO;AACLnW,QAAAA,IADK;AAELkW,QAAAA,KAAK,EAAE,IAFF;AAGLiG,QAAAA,MAAM,EAAE,KAHH;AAILe,QAAAA,OAAO,EAAE,KAJJ;AAKL/G,QAAAA,SAAS,EAAE;AALN,OAAP;AAOD,KAzBD,CAyBE,OAAOD,KAAP,EAAc;AACd,YAAMC,SAAS,GAAG,KAAKxR,KAAvB;AACA,WAAKA,KAAL,GAAaktC,QAAb;;AAEA,UAAI37B,KAAK,YAAY2zB,WAArB,EAAkC;AAChC,eAAO;AACL7pC,UAAAA,IAAI,EAAE,IADD;AAELkW,UAAAA,KAFK;AAGLiG,UAAAA,MAAM,EAAE,IAHH;AAILe,UAAAA,OAAO,EAAE,KAJJ;AAKL/G,UAAAA;AALK,SAAP;AAOD;;AAED,UAAID,KAAK,KAAK47B,WAAd,EAA2B;AACzB,eAAO;AACL9xC,UAAAA,IAAI,EAAE8xC,WAAW,CAAC9xC,IADb;AAELkW,UAAAA,KAAK,EAAE,IAFF;AAGLiG,UAAAA,MAAM,EAAE,KAHH;AAILe,UAAAA,OAAO,EAAE,IAJJ;AAKL/G,UAAAA;AALK,SAAP;AAOD;;AAED,YAAMD,KAAN;AACD;AACF;;AA1MgC;;AA8MnC,MAAM67B,IAAN,CAAW;AACTx6C,EAAAA,WAAW,CAACy6C,MAAD,EAASvoC,GAAT,EAAcrI,GAAd,EAAmB;AAC5B,SAAKnB,IAAL,GAAY,EAAZ;AACA,SAAKkB,KAAL,GAAasI,GAAb;AACA,SAAKhI,GAAL,GAAW,CAAX;AACA,SAAKL,GAAL,GAAW,IAAIwmC,cAAJ,CAAmBxmC,GAAnB,CAAX;AACA,QAAI4wC,MAAM,IAAIA,MAAM,CAAC95C,OAAP,CAAeivC,MAA7B,EAAqC,KAAK8K,KAAL,GAAa,CAACxoC,GAAD,EAAM,CAAN,CAAb;AACrC,QAAIuoC,MAAM,IAAIA,MAAM,CAAC1J,QAArB,EAA+B,KAAKlnC,GAAL,CAASknC,QAAT,GAAoB0J,MAAM,CAAC1J,QAA3B;AAChC;;AAEDptB,EAAAA,OAAO,GAAG;AACR,UAAMmY,OAAO,GAAG,IAAI0e,IAAJ,EAAhB;AACA,UAAMvL,IAAI,GAAG5vC,MAAM,CAAC4vC,IAAP,CAAY,IAAZ,CAAb;;AAEA,SAAK,IAAI98B,CAAC,GAAG,CAAR,EAAWzH,MAAM,GAAGukC,IAAI,CAACvkC,MAA9B,EAAsCyH,CAAC,GAAGzH,MAA1C,EAAkDyH,CAAC,EAAnD,EAAuD;AACrD,YAAM3G,GAAG,GAAGyjC,IAAI,CAAC98B,CAAD,CAAhB;;AAEA,UAAI3G,GAAG,KAAK,iBAAR,IAA6BA,GAAG,KAAK,kBAArC,IAA2DA,GAAG,KAAK,eAAvE,EAAwF;AACtFswB,QAAAA,OAAO,CAACtwB,GAAD,CAAP,GAAe,KAAKA,GAAL,CAAf;AACD;AACF;;AAED,WAAOswB,OAAP;AACD;;AAvBQ;;AA2BX,MAAM6e,SAAN,SAAwBnB,UAAxB,CAAmC;AACjC3rC,EAAAA,SAAS,GAAG;AACV,WAAO,IAAI2sC,IAAJ,CAAS,IAAT,EAAe,KAAKptC,KAAL,CAAWxD,KAA1B,EAAiC,KAAKwD,KAAL,CAAWE,QAA5C,CAAP;AACD;;AAED3D,EAAAA,WAAW,CAACuI,GAAD,EAAMrI,GAAN,EAAW;AACpB,WAAO,IAAI2wC,IAAJ,CAAS,IAAT,EAAetoC,GAAf,EAAoBrI,GAApB,CAAP;AACD;;AAEDs3B,EAAAA,eAAe,CAACz4B,IAAD,EAAO;AACpB,WAAO,KAAKiB,WAAL,CAAiBjB,IAAI,CAACkB,KAAtB,EAA6BlB,IAAI,CAACmB,GAAL,CAASD,KAAtC,CAAP;AACD;;AAEDkE,EAAAA,UAAU,CAACrF,IAAD,EAAOC,IAAP,EAAa;AACrB,WAAO,KAAKuB,YAAL,CAAkBxB,IAAlB,EAAwBC,IAAxB,EAA8B,KAAK0E,KAAL,CAAWsD,UAAzC,EAAqD,KAAKtD,KAAL,CAAW8uB,aAAhE,CAAP;AACD;;AAEDjyB,EAAAA,YAAY,CAACxB,IAAD,EAAOC,IAAP,EAAawJ,GAAb,EAAkBrI,GAAlB,EAAuB;AAEjCpB,IAAAA,IAAI,CAACC,IAAL,GAAYA,IAAZ;AACAD,IAAAA,IAAI,CAACyB,GAAL,GAAWgI,GAAX;AACAzJ,IAAAA,IAAI,CAACoB,GAAL,CAASK,GAAT,GAAeL,GAAf;AACA,QAAI,KAAKlJ,OAAL,CAAaivC,MAAjB,EAAyBnnC,IAAI,CAACiyC,KAAL,CAAW,CAAX,IAAgBxoC,GAAhB;AACzB,SAAKw/B,cAAL,CAAoBjpC,IAApB;AACA,WAAOA,IAAP;AACD;;AAEDsjC,EAAAA,kBAAkB,CAACtjC,IAAD,EAAOmB,KAAP,EAAc0D,QAAd,EAAwB;AACxC7E,IAAAA,IAAI,CAACmB,KAAL,GAAaA,KAAb;AACAnB,IAAAA,IAAI,CAACoB,GAAL,CAASD,KAAT,GAAiB0D,QAAjB;AACA,QAAI,KAAK3M,OAAL,CAAaivC,MAAjB,EAAyBnnC,IAAI,CAACiyC,KAAL,CAAW,CAAX,IAAgB9wC,KAAhB;AAC1B;;AAED2M,EAAAA,gBAAgB,CAAC9N,IAAD,EAAOyB,GAAG,GAAG,KAAKkD,KAAL,CAAWsD,UAAxB,EAAoCyhC,MAAM,GAAG,KAAK/kC,KAAL,CAAW8uB,aAAxD,EAAuE;AACrFzzB,IAAAA,IAAI,CAACyB,GAAL,GAAWA,GAAX;AACAzB,IAAAA,IAAI,CAACoB,GAAL,CAASK,GAAT,GAAeioC,MAAf;AACA,QAAI,KAAKxxC,OAAL,CAAaivC,MAAjB,EAAyBnnC,IAAI,CAACiyC,KAAL,CAAW,CAAX,IAAgBxwC,GAAhB;AAC1B;;AAEDya,EAAAA,0BAA0B,CAAClc,IAAD,EAAOmyC,YAAP,EAAqB;AAC7C,SAAK7O,kBAAL,CAAwBtjC,IAAxB,EAA8BmyC,YAAY,CAAChxC,KAA3C,EAAkDgxC,YAAY,CAAC/wC,GAAb,CAAiBD,KAAnE;AACD;;AAzCgC;;AA6CnC,MAAMixC,UAAN,SAAyBF,SAAzB,CAAmC;AACjCxsC,EAAAA,YAAY,CAAC1F,IAAD,EAAO2F,SAAP,EAAkBpD,kBAAlB,EAAsC;AAChD,QAAI8vC,YAAJ;;AAEA,QAAIryC,IAAJ,EAAU;AACR,cAAQA,IAAI,CAACC,IAAb;AACE,aAAK,YAAL;AACA,aAAK,eAAL;AACA,aAAK,cAAL;AACA,aAAK,mBAAL;AACE;;AAEF,aAAK,kBAAL;AACED,UAAAA,IAAI,CAACC,IAAL,GAAY,eAAZ;;AAEA,eAAK,IAAIyJ,CAAC,GAAG,CAAR,EAAWzH,MAAM,GAAGjC,IAAI,CAACyC,UAAL,CAAgBR,MAApC,EAA4C+W,IAAI,GAAG/W,MAAM,GAAG,CAAjE,EAAoEyH,CAAC,GAAGzH,MAAxE,EAAgFyH,CAAC,EAAjF,EAAqF;AACnF,gBAAI4N,WAAJ;;AAEA,kBAAMxV,IAAI,GAAG9B,IAAI,CAACyC,UAAL,CAAgBiH,CAAhB,CAAb;AACA,kBAAM7D,MAAM,GAAG6D,CAAC,KAAKsP,IAArB;AACA,iBAAKpT,gCAAL,CAAsC9D,IAAtC,EAA4C6D,SAA5C,EAAuDE,MAAvD;;AAEA,gBAAIA,MAAM,IAAI/D,IAAI,CAAC7B,IAAL,KAAc,aAAxB,KAA0C,CAACqX,WAAW,GAAGtX,IAAI,CAACuB,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8C+V,WAAW,CAACE,aAApG,CAAJ,EAAwH;AACtH,mBAAK86B,gBAAL,CAAsBtyC,IAAI,CAACuB,KAAL,CAAWiW,aAAjC;AACD;AACF;;AAED;;AAEF,aAAK,gBAAL;AACE,eAAK9R,YAAL,CAAkB1F,IAAI,CAACjJ,KAAvB,EAA8B4O,SAA9B,EAAyCpD,kBAAzC;AACA;;AAEF,aAAK,eAAL;AACE;AACE,iBAAKgwC,qBAAL,CAA2BvyC,IAA3B;AACAA,YAAAA,IAAI,CAACC,IAAL,GAAY,aAAZ;AACA,kBAAMuyC,GAAG,GAAGxyC,IAAI,CAAC2T,QAAjB;AACA,iBAAKjO,YAAL,CAAkB8sC,GAAlB,EAAuB7sC,SAAvB,EAAkCpD,kBAAlC;AACA;AACD;;AAEH,aAAK,iBAAL;AACEvC,UAAAA,IAAI,CAACC,IAAL,GAAY,cAAZ;AACA,eAAKsX,gBAAL,CAAsBvX,IAAI,CAACiZ,QAA3B,EAAqCtT,SAArC,EAAgDpD,kBAAhD,EAAoE,CAAC8vC,YAAY,GAAGryC,IAAI,CAACuB,KAArB,KAA+B,IAA/B,GAAsC,KAAK,CAA3C,GAA+C8wC,YAAY,CAAC76B,aAAhI;AACA;;AAEF,aAAK,sBAAL;AACE,cAAIxX,IAAI,CAACmZ,QAAL,KAAkB,GAAtB,EAA2B;AACzB,iBAAKjX,KAAL,CAAWlC,IAAI,CAACqa,IAAL,CAAU5Y,GAArB,EAA0B,6DAA1B;AACD;;AAEDzB,UAAAA,IAAI,CAACC,IAAL,GAAY,mBAAZ;AACA,iBAAOD,IAAI,CAACmZ,QAAZ;AACA,eAAKzT,YAAL,CAAkB1F,IAAI,CAACqa,IAAvB,EAA6B1U,SAA7B,EAAwCpD,kBAAxC;AACA;;AAEF,aAAK,yBAAL;AACEvC,UAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKqE,YAAL,CAAkB1F,IAAI,CAACqB,UAAvB,EAAmCsE,SAAnC,EAA8CpD,kBAA9C,CAAlB;AACA;;AAEF,aAAK,kBAAL;AACE,cAAI,CAACoD,SAAL,EAAgB;;AAElB;AA3DF;AA6DD;;AAED,WAAO3F,IAAP;AACD;;AAED4F,EAAAA,gCAAgC,CAAC9D,IAAD,EAAO6D,SAAP,EAAkBE,MAAlB,EAA0B;AACxD,QAAI/D,IAAI,CAAC7B,IAAL,KAAc,cAAlB,EAAkC;AAChC,YAAMiW,KAAK,GAAGpU,IAAI,CAAC5B,IAAL,KAAc,KAAd,IAAuB4B,IAAI,CAAC5B,IAAL,KAAc,KAArC,GAA6C,+CAA7C,GAA+F,sCAA7G;AACA,WAAKgC,KAAL,CAAWJ,IAAI,CAACiB,GAAL,CAAS5B,KAApB,EAA2B+U,KAA3B;AACD,KAHD,MAGO,IAAIpU,IAAI,CAAC7B,IAAL,KAAc,eAAd,IAAiC,CAAC4F,MAAtC,EAA8C;AACnD,WAAKysC,gBAAL,CAAsBxwC,IAAI,CAACX,KAA3B;AACD,KAFM,MAEA;AACL,WAAKuE,YAAL,CAAkB5D,IAAlB,EAAwB6D,SAAxB,EAAmC,8BAAnC;AACD;AACF;;AAED4R,EAAAA,gBAAgB,CAAC6B,QAAD,EAAWzT,SAAX,EAAsBpD,kBAAtB,EAA0C8W,gBAA1C,EAA4D;AAC1E,QAAI5X,GAAG,GAAG2X,QAAQ,CAACnX,MAAnB;;AAEA,QAAIR,GAAJ,EAAS;AACP,YAAMuX,IAAI,GAAGI,QAAQ,CAAC3X,GAAG,GAAG,CAAP,CAArB;;AAEA,UAAIuX,IAAI,IAAIA,IAAI,CAAC/Y,IAAL,KAAc,aAA1B,EAAyC;AACvC,UAAEwB,GAAF;AACD,OAFD,MAEO,IAAIuX,IAAI,IAAIA,IAAI,CAAC/Y,IAAL,KAAc,eAA1B,EAA2C;AAChD+Y,QAAAA,IAAI,CAAC/Y,IAAL,GAAY,aAAZ;AACA,cAAMuyC,GAAG,GAAGx5B,IAAI,CAACrF,QAAjB;AACA,aAAKjO,YAAL,CAAkB8sC,GAAlB,EAAuB7sC,SAAvB,EAAkCpD,kBAAlC;;AAEA,YAAIiwC,GAAG,CAACvyC,IAAJ,KAAa,YAAb,IAA6BuyC,GAAG,CAACvyC,IAAJ,KAAa,kBAA1C,IAAgEuyC,GAAG,CAACvyC,IAAJ,KAAa,cAA7E,IAA+FuyC,GAAG,CAACvyC,IAAJ,KAAa,eAAhH,EAAiI;AAC/H,eAAK2O,UAAL,CAAgB4jC,GAAG,CAACrxC,KAApB;AACD;;AAED,YAAIkY,gBAAJ,EAAsB;AACpB,eAAKo5B,2BAAL,CAAiCp5B,gBAAjC;AACD;;AAED,UAAE5X,GAAF;AACD;AACF;;AAED,SAAK,IAAIiI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjI,GAApB,EAAyBiI,CAAC,EAA1B,EAA8B;AAC5B,YAAMo4B,GAAG,GAAG1oB,QAAQ,CAAC1P,CAAD,CAApB;;AAEA,UAAIo4B,GAAJ,EAAS;AACP,aAAKp8B,YAAL,CAAkBo8B,GAAlB,EAAuBn8B,SAAvB,EAAkCpD,kBAAlC;;AAEA,YAAIu/B,GAAG,CAAC7hC,IAAJ,KAAa,aAAjB,EAAgC;AAC9B,eAAKqyC,gBAAL,CAAsBxQ,GAAG,CAAC3gC,KAA1B;AACD;AACF;AACF;;AAED,WAAOiY,QAAP;AACD;;AAEDE,EAAAA,gBAAgB,CAACF,QAAD,EAAWG,mBAAX,EAAgC;AAC9C,WAAOH,QAAP;AACD;;AAEDs5B,EAAAA,oBAAoB,CAACt5B,QAAD,EAAWG,mBAAX,EAAgC;AAClD,SAAKD,gBAAL,CAAsBF,QAAtB,EAAgCG,mBAAhC;;AAEA,SAAK,IAAIlW,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG+V,QAAQ,CAACnX,MAA/B,EAAuCoB,EAAE,EAAzC,EAA6C;AAC3C,YAAMjB,IAAI,GAAGgX,QAAQ,CAAC/V,EAAD,CAArB;;AAEA,UAAIjB,IAAI,IAAIA,IAAI,CAACnC,IAAL,KAAc,iBAA1B,EAA6C;AAC3C,aAAKyyC,oBAAL,CAA0BtwC,IAAI,CAAC6W,QAA/B;AACD;AACF;;AAED,WAAOG,QAAP;AACD;;AAEDu5B,EAAAA,WAAW,CAACjuC,sBAAD,EAAyBqR,gBAAzB,EAA2C;AACpD,UAAM/V,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;AACA/J,IAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKmD,gBAAL,CAAsB,KAAtB,EAA6BpS,sBAA7B,EAAqDyG,SAArD,EAAgE4K,gBAAhE,CAAhB;AACA,WAAO,KAAK1Q,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED4yC,EAAAA,gBAAgB,GAAG;AACjB,UAAM5yC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;AACA/J,IAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKgwB,gBAAL,EAAhB;AACA,WAAO,KAAKt+B,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED2jC,EAAAA,gBAAgB,GAAG;AACjB,YAAQ,KAAKh/B,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACM,QAAX;AACE;AACE,gBAAMoH,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,eAAK2E,IAAL;AACA/J,UAAAA,IAAI,CAACiZ,QAAL,GAAgB,KAAKihB,gBAAL,CAAsB5hC,KAAK,CAACO,QAA5B,EAAsC,EAAtC,EAA0C,IAA1C,CAAhB;AACA,iBAAO,KAAKwM,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEH,WAAK1H,KAAK,CAACQ,MAAX;AACE,eAAO,KAAK+5C,QAAL,CAAc,IAAd,CAAP;AAVJ;;AAaA,WAAO,KAAKzlC,eAAL,EAAP;AACD;;AAED8sB,EAAAA,gBAAgB,CAAC4Y,KAAD,EAAQC,aAAR,EAAuBC,UAAvB,EAAmCz3B,cAAnC,EAAmD;AACjE,UAAM03B,IAAI,GAAG,EAAb;AACA,QAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAKvmC,GAAL,CAASmmC,KAAT,CAAR,EAAyB;AACvB,UAAII,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACD;;AAED,UAAI45C,UAAU,IAAI,KAAKjmC,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAlB,EAA2C;AACzC65C,QAAAA,IAAI,CAACzuC,IAAL,CAAU,IAAV;AACD,OAFD,MAEO,IAAI,KAAKmI,GAAL,CAASmmC,KAAT,CAAJ,EAAqB;AAC1B;AACD,OAFM,MAEA,IAAI,KAAK/lC,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AACrCo5C,QAAAA,IAAI,CAACzuC,IAAL,CAAU,KAAK2V,4BAAL,CAAkC,KAAKy4B,gBAAL,EAAlC,CAAV;AACA,aAAKhX,mBAAL,CAAyBmX,aAAzB;AACA,aAAK7mC,MAAL,CAAY4mC,KAAZ;AACA;AACD,OALM,MAKA;AACL,cAAMnR,UAAU,GAAG,EAAnB;;AAEA,YAAI,KAAK50B,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,KAAwB,KAAK8hB,SAAL,CAAe,YAAf,CAA5B,EAA0D;AACxD,eAAK5Z,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,0DAA7B;AACD;;AAED,eAAO,KAAK4L,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAP,EAA6B;AAC3B2nC,UAAAA,UAAU,CAACn9B,IAAX,CAAgB,KAAK2uC,cAAL,EAAhB;AACD;;AAEDF,QAAAA,IAAI,CAACzuC,IAAL,CAAU,KAAKk9B,uBAAL,CAA6BnmB,cAA7B,EAA6ComB,UAA7C,CAAV;AACD;AACF;;AAED,WAAOsR,IAAP;AACD;;AAEDvR,EAAAA,uBAAuB,CAACnmB,cAAD,EAAiBomB,UAAjB,EAA6B;AAClD,UAAMtnB,IAAI,GAAG,KAAKD,iBAAL,EAAb;AACA,SAAKD,4BAAL,CAAkCE,IAAlC;AACA,UAAMynB,GAAG,GAAG,KAAK1nB,iBAAL,CAAuBC,IAAI,CAAClZ,KAA5B,EAAmCkZ,IAAI,CAACjZ,GAAL,CAASD,KAA5C,EAAmDkZ,IAAnD,CAAZ;;AAEA,QAAIsnB,UAAU,CAAC1/B,MAAf,EAAuB;AACrBoY,MAAAA,IAAI,CAACsnB,UAAL,GAAkBA,UAAlB;AACD;;AAED,WAAOG,GAAP;AACD;;AAED3nB,EAAAA,4BAA4B,CAACpF,KAAD,EAAQ;AAClC,WAAOA,KAAP;AACD;;AAEDqF,EAAAA,iBAAiB,CAACxV,QAAD,EAAWC,QAAX,EAAqBwV,IAArB,EAA2B;AAC1CxV,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWE,QAAlC;AACAD,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKD,KAAL,CAAWxD,KAAlC;AACAkZ,IAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKspB,gBAAL,EAAf;AACA,QAAI,CAAC,KAAKh3B,GAAL,CAASrU,KAAK,CAAC6B,EAAf,CAAL,EAAyB,OAAOkgB,IAAP;AACzB,UAAMra,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,IAAAA,IAAI,CAACqa,IAAL,GAAYA,IAAZ;AACAra,IAAAA,IAAI,CAAC+Q,KAAL,GAAa,KAAK+F,gBAAL,EAAb;AACA,WAAO,KAAKzR,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDmC,EAAAA,SAAS,CAACC,IAAD,EAAOC,WAAW,GAAG1C,SAArB,EAAgC2C,YAAhC,EAA8CC,kBAA9C,EAAkEC,kBAAlE,EAAsF4wC,iBAAiB,GAAG,KAA1G,EAAiH;AACxH,YAAQhxC,IAAI,CAACnC,IAAb;AACE,WAAK,YAAL;AACE,YAAI,KAAK0E,KAAL,CAAWyD,MAAX,KAAsBgrC,iBAAiB,GAAGrqC,wBAAwB,CAAC3G,IAAI,CAACnK,IAAN,EAAY,KAAK0Q,QAAjB,CAA3B,GAAwDG,4BAA4B,CAAC1G,IAAI,CAACnK,IAAN,CAA3H,CAAJ,EAA6I;AAC3I,eAAKiK,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAwB,GAAEkB,WAAW,KAAK1C,SAAhB,GAA4B,cAA5B,GAA6C,SAAU,KAAIyC,IAAI,CAACnK,IAAK,kBAA/F;AACD;;AAED,YAAIqK,YAAJ,EAAkB;AAChB,gBAAMS,GAAG,GAAI,IAAGX,IAAI,CAACnK,IAAK,EAA1B;;AAEA,cAAIqK,YAAY,CAACS,GAAD,CAAhB,EAAuB;AACrB,iBAAKb,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,qBAAvB;AACD,WAFD,MAEO;AACLmB,YAAAA,YAAY,CAACS,GAAD,CAAZ,GAAoB,IAApB;AACD;AACF;;AAED,YAAIP,kBAAkB,IAAIJ,IAAI,CAACnK,IAAL,KAAc,KAAxC,EAA+C;AAC7C,eAAKiK,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,6EAAvB;AACD;;AAED,YAAI,EAAEkB,WAAW,GAAG1C,SAAhB,CAAJ,EAAgC;AAC9B,eAAK+H,KAAL,CAAWoH,WAAX,CAAuB1M,IAAI,CAACnK,IAA5B,EAAkCoK,WAAlC,EAA+CD,IAAI,CAACjB,KAApD;AACD;;AAED;;AAEF,WAAK,kBAAL;AACE,YAAIkB,WAAW,KAAK1C,SAApB,EAA+B;AAC7B,eAAKuC,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuB,2BAAvB;AACD;;AAED;;AAEF,WAAK,eAAL;AACE,aAAK,IAAI4f,GAAG,GAAG,CAAV,EAAasyB,gBAAgB,GAAGjxC,IAAI,CAACK,UAA1C,EAAsDse,GAAG,GAAGsyB,gBAAgB,CAACpxC,MAA7E,EAAqF8e,GAAG,EAAxF,EAA4F;AAC1F,cAAIjf,IAAI,GAAGuxC,gBAAgB,CAACtyB,GAAD,CAA3B;AACA,cAAIjf,IAAI,CAAC7B,IAAL,KAAc,gBAAlB,EAAoC6B,IAAI,GAAGA,IAAI,CAAC/K,KAAZ,CAApC,KAA2D,IAAI+K,IAAI,CAAC7B,IAAL,KAAc,cAAlB,EAAkC;AAC7F,eAAKkC,SAAL,CAAeL,IAAf,EAAqBO,WAArB,EAAkCC,YAAlC,EAAgD,8BAAhD,EAAgFE,kBAAhF;AACD;;AAED;;AAEF,WAAK,cAAL;AACE,aAAK,IAAIgf,GAAG,GAAG,CAAV,EAAa8xB,cAAc,GAAGlxC,IAAI,CAAC6W,QAAxC,EAAkDuI,GAAG,GAAG8xB,cAAc,CAACrxC,MAAvE,EAA+Euf,GAAG,EAAlF,EAAsF;AACpF,gBAAM+xB,IAAI,GAAGD,cAAc,CAAC9xB,GAAD,CAA3B;;AAEA,cAAI+xB,IAAJ,EAAU;AACR,iBAAKpxC,SAAL,CAAeoxC,IAAf,EAAqBlxC,WAArB,EAAkCC,YAAlC,EAAgD,6BAAhD,EAA+EE,kBAA/E;AACD;AACF;;AAED;;AAEF,WAAK,mBAAL;AACE,aAAKL,SAAL,CAAeC,IAAI,CAACiY,IAApB,EAA0BhY,WAA1B,EAAuCC,YAAvC,EAAqD,oBAArD;AACA;;AAEF,WAAK,aAAL;AACE,aAAKH,SAAL,CAAeC,IAAI,CAACuR,QAApB,EAA8BtR,WAA9B,EAA2CC,YAA3C,EAAyD,cAAzD;AACA;;AAEF,WAAK,yBAAL;AACE,aAAKH,SAAL,CAAeC,IAAI,CAACf,UAApB,EAAgCgB,WAAhC,EAA6CC,YAA7C,EAA2D,0BAA3D;AACA;;AAEF;AACE;AACE,gBAAMgd,OAAO,GAAG,CAACjd,WAAW,KAAK1C,SAAhB,GAA4B,SAA5B,GAAwC,iBAAzC,IAA8D,iBAA9D,IAAmF4C,kBAAkB,GAAG,SAASA,kBAAZ,GAAiC,YAAtI,CAAhB;AACA,eAAKL,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAuBme,OAAvB;AACD;AArEL;AAuED;;AAEDizB,EAAAA,qBAAqB,CAACvyC,IAAD,EAAO;AAC1B,QAAIA,IAAI,CAAC2T,QAAL,CAAc1T,IAAd,KAAuB,YAAvB,IAAuCD,IAAI,CAAC2T,QAAL,CAAc1T,IAAd,KAAuB,kBAAlE,EAAsF;AACpF,WAAKiC,KAAL,CAAWlC,IAAI,CAAC2T,QAAL,CAAcxS,KAAzB,EAAgC,kCAAhC;AACD;AACF;;AAEDy6B,EAAAA,mBAAmB,CAACkX,KAAD,EAAQ;AACzB,QAAI,KAAK/lC,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAJ,EAA6B;AAC3B,UAAI,KAAKojC,iBAAL,OAA6BsW,KAAjC,EAAwC;AACtC,aAAKL,2BAAL,CAAiC,KAAK9tC,KAAL,CAAWxD,KAA5C;AACD,OAFD,MAEO;AACL,aAAKmxC,gBAAL,CAAsB,KAAK3tC,KAAL,CAAWxD,KAAjC;AACD;AACF;AACF;;AAEDmxC,EAAAA,gBAAgB,CAAC7oC,GAAD,EAAM;AACpB,UAAM,KAAKvH,KAAL,CAAWuH,GAAX,EAAiB,mCAAjB,CAAN;AACD;;AAEDgpC,EAAAA,2BAA2B,CAAChpC,GAAD,EAAM;AAC/B,SAAKvH,KAAL,CAAWuH,GAAX,EAAiB,8CAAjB;AACD;;AA5UgC;;AAgVnC,MAAM+pC,6BAA6B,GAAGxzC,IAAI,IAAI;AAC5C,SAAOA,IAAI,CAACC,IAAL,KAAc,yBAAd,GAA0CuzC,6BAA6B,CAACxzC,IAAI,CAACqB,UAAN,CAAvE,GAA2FrB,IAAlG;AACD,CAFD;;AAIA,MAAMyzC,gBAAN,SAA+BrB,UAA/B,CAA0C;AACxCzvC,EAAAA,oBAAoB,CAACb,IAAD,EAAOc,QAAP,EAAiB;AACnC,QAAId,IAAI,CAAC7B,IAAL,KAAc,eAAd,IAAiC6B,IAAI,CAACe,QAAtC,IAAkDf,IAAI,CAAC5B,IAAvD,IAA+D4B,IAAI,CAACgB,SAAxE,EAAmF;AACjF;AACD;;AAED,UAAMC,GAAG,GAAGjB,IAAI,CAACiB,GAAjB;AACA,UAAM9K,IAAI,GAAG8K,GAAG,CAAC9C,IAAJ,KAAa,YAAb,GAA4B8C,GAAG,CAAC9K,IAAhC,GAAuC+K,MAAM,CAACD,GAAG,CAAChM,KAAL,CAA1D;;AAEA,QAAIkB,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAI2K,QAAQ,CAACK,IAAT,IAAiB,CAACL,QAAQ,CAACzB,KAA/B,EAAsC;AACpCyB,QAAAA,QAAQ,CAACzB,KAAT,GAAiB4B,GAAG,CAAC5B,KAArB;AACD;;AAEDyB,MAAAA,QAAQ,CAACK,IAAT,GAAgB,IAAhB;AACD;AACF;;AAEDywC,EAAAA,aAAa,GAAG;AACd,SAAKhsC,KAAL,CAAWqH,KAAX,CAAiBpR,aAAjB;AACA,SAAKqgB,SAAL;AACA,UAAM5b,IAAI,GAAG,KAAKwK,eAAL,EAAb;;AAEA,QAAI,CAAC,KAAKG,KAAL,CAAWzU,KAAK,CAACK,GAAjB,CAAL,EAA4B;AAC1B,WAAKiW,UAAL;AACD;;AAEDxM,IAAAA,IAAI,CAAC6oC,QAAL,GAAgB,KAAKtmC,KAAL,CAAWsmC,QAA3B;AACA7oC,IAAAA,IAAI,CAAC4nC,MAAL,GAAc,KAAKrlC,KAAL,CAAWqlC,MAAzB;AACA,WAAO5nC,IAAP;AACD;;AAEDwK,EAAAA,eAAe,CAACkJ,IAAD,EAAOpR,sBAAP,EAA+B;AAC5C,UAAME,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAMzC,IAAI,GAAG,KAAK0U,gBAAL,CAAsBhB,IAAtB,EAA4BpR,sBAA5B,CAAb;;AAEA,QAAI,KAAKqI,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAJ,EAA6B;AAC3B,YAAM4G,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAACo8B,WAAL,GAAmB,CAACh6B,IAAD,CAAnB;;AAEA,aAAO,KAAKuK,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAP,EAA8B;AAC5B4G,QAAAA,IAAI,CAACo8B,WAAL,CAAiB53B,IAAjB,CAAsB,KAAKsS,gBAAL,CAAsBhB,IAAtB,EAA4BpR,sBAA5B,CAAtB;AACD;;AAED,WAAK4U,gBAAL,CAAsBtZ,IAAI,CAACo8B,WAA3B;AACA,aAAO,KAAK/2B,UAAL,CAAgBrF,IAAhB,EAAsB,oBAAtB,CAAP;AACD;;AAED,WAAOoC,IAAP;AACD;;AAED0U,EAAAA,gBAAgB,CAAChB,IAAD,EAAOpR,sBAAP,EAA+BkX,cAA/B,EAA+C7F,gBAA/C,EAAiE;AAC/E,UAAMnR,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;;AAEA,QAAI,KAAK0J,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;AAC9B,UAAI,KAAK7G,KAAL,CAAWC,WAAf,EAA4B;AAC1B,YAAI0S,IAAI,GAAG,KAAKs5B,UAAL,CAAgB79B,IAAhB,CAAX;;AAEA,YAAI8F,cAAJ,EAAoB;AAClBvB,UAAAA,IAAI,GAAGuB,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BrB,IAA1B,EAAgCzV,QAAhC,EAA0CC,QAA1C,CAAP;AACD;;AAED,eAAOwV,IAAP;AACD,OARD,MAQO;AACL,aAAK1V,KAAL,CAAWyC,WAAX,GAAyB,KAAzB;AACD;AACF;;AAED,QAAIwsC,qBAAJ;;AAEA,QAAIlvC,sBAAJ,EAA4B;AAC1BkvC,MAAAA,qBAAqB,GAAG,KAAxB;AACD,KAFD,MAEO;AACLlvC,MAAAA,sBAAsB,GAAG;AACvBvD,QAAAA,KAAK,EAAE;AADgB,OAAzB;AAGAyyC,MAAAA,qBAAqB,GAAG,IAAxB;AACD;;AAED,QAAI,KAAK7mC,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,KAAK6T,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAhC,EAAwD;AACtD,WAAK0M,KAAL,CAAWulC,gBAAX,GAA8B,KAAKvlC,KAAL,CAAWxD,KAAzC;AACD;;AAED,QAAIkZ,IAAI,GAAG,KAAKw5B,qBAAL,CAA2B/9B,IAA3B,EAAiCpR,sBAAjC,EAAyDqR,gBAAzD,CAAX;;AAEA,QAAI6F,cAAJ,EAAoB;AAClBvB,MAAAA,IAAI,GAAGuB,cAAc,CAACF,IAAf,CAAoB,IAApB,EAA0BrB,IAA1B,EAAgCzV,QAAhC,EAA0CC,QAA1C,CAAP;AACD;;AAED,QAAI,KAAKF,KAAL,CAAW1E,IAAX,CAAgB9I,QAApB,EAA8B;AAC5B,YAAM6I,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA,YAAMsU,QAAQ,GAAG,KAAKxU,KAAL,CAAW5N,KAA5B;AACAiJ,MAAAA,IAAI,CAACmZ,QAAL,GAAgBA,QAAhB;;AAEA,UAAIA,QAAQ,KAAK,KAAjB,EAAwB;AACtB,aAAKmE,YAAL,CAAkB,2BAAlB;AACA,aAAKA,YAAL,CAAkB,mBAAlB;AACD;;AAED,UAAInE,QAAQ,KAAK,KAAb,IAAsBA,QAAQ,KAAK,KAAvC,EAA8C;AAC5C,aAAKmE,YAAL,CAAkB,mBAAlB;AACD;;AAEDtd,MAAAA,IAAI,CAACqa,IAAL,GAAY,KAAKtN,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,IAAuB,KAAKuL,YAAL,CAAkB2U,IAAlB,EAAwBlP,SAAxB,EAAmC,uBAAnC,CAAvB,GAAqFkP,IAAjG;;AAEA,UAAI3V,sBAAsB,CAACvD,KAAvB,IAAgCnB,IAAI,CAACqa,IAAL,CAAUlZ,KAA9C,EAAqD;AACnDuD,QAAAA,sBAAsB,CAACvD,KAAvB,GAA+B,CAA/B;AACD;;AAED,WAAKgB,SAAL,CAAekY,IAAf,EAAqBlP,SAArB,EAAgCA,SAAhC,EAA2C,uBAA3C;AACA,YAAM2oC,YAAY,GAAGN,6BAA6B,CAACn5B,IAAD,CAAlD;AACA,UAAI05B,eAAJ;;AAEA,UAAID,YAAY,CAAC7zC,IAAb,KAAsB,eAA1B,EAA2C;AACzC8zC,QAAAA,eAAe,GAAG,6BAAlB;AACD,OAFD,MAEO,IAAID,YAAY,CAAC7zC,IAAb,KAAsB,cAA1B,EAA0C;AAC/C8zC,QAAAA,eAAe,GAAG,6BAAlB;AACD;;AAED,UAAIA,eAAe,KAAK15B,IAAI,CAAC9Y,KAAL,IAAc8Y,IAAI,CAAC9Y,KAAL,CAAWiC,aAAzB,IAA0C6W,IAAI,CAACpa,IAAL,KAAc,yBAA7D,CAAnB,EAA4G;AAC1G,aAAKiC,KAAL,CAAW4xC,YAAY,CAAC3yC,KAAxB,EAAgC,yEAAwE4yC,eAAgB,EAAxH;AACD;;AAED,WAAKhqC,IAAL;AACA/J,MAAAA,IAAI,CAAC+Q,KAAL,GAAa,KAAK+F,gBAAL,CAAsBhB,IAAtB,CAAb;AACA,aAAO,KAAKzQ,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD,KArCD,MAqCO,IAAI4zC,qBAAqB,IAAIlvC,sBAAsB,CAACvD,KAApD,EAA2D;AAChE,WAAKyN,UAAL,CAAgBlK,sBAAsB,CAACvD,KAAvC;AACD;;AAED,WAAOkZ,IAAP;AACD;;AAEDw5B,EAAAA,qBAAqB,CAAC/9B,IAAD,EAAOpR,sBAAP,EAA+BqR,gBAA/B,EAAiD;AACpE,UAAMnR,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAMqlC,gBAAgB,GAAG,KAAKvlC,KAAL,CAAWulC,gBAApC;AACA,UAAM9nC,IAAI,GAAG,KAAK4xC,YAAL,CAAkBl+B,IAAlB,EAAwBpR,sBAAxB,CAAb;;AAEA,QAAItC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IAA2CmC,IAAI,CAACjB,KAAL,KAAe+oC,gBAA9D,EAAgF;AAC9E,aAAO9nC,IAAP;AACD;;AAED,QAAIsC,sBAAsB,IAAIA,sBAAsB,CAACvD,KAArD,EAA4D,OAAOiB,IAAP;AAC5D,WAAO,KAAKyT,gBAAL,CAAsBzT,IAAtB,EAA4B0T,IAA5B,EAAkClR,QAAlC,EAA4CC,QAA5C,EAAsDkR,gBAAtD,CAAP;AACD;;AAEDF,EAAAA,gBAAgB,CAACzT,IAAD,EAAO0T,IAAP,EAAalR,QAAb,EAAuBC,QAAvB,EAAiCkR,gBAAjC,EAAmD;AACjE,QAAI,KAAKpJ,GAAL,CAASrU,KAAK,CAACmB,QAAf,CAAJ,EAA8B;AAC5B,YAAMuG,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC+H,IAAL,GAAY3F,IAAZ;AACApC,MAAAA,IAAI,CAACwW,UAAL,GAAkB,KAAKM,gBAAL,EAAlB;AACA,WAAK5K,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACA0G,MAAAA,IAAI,CAAC6W,SAAL,GAAiB,KAAKC,gBAAL,CAAsBhB,IAAtB,CAAjB;AACA,aAAO,KAAKzQ,UAAL,CAAgBrF,IAAhB,EAAsB,uBAAtB,CAAP;AACD;;AAED,WAAOoC,IAAP;AACD;;AAED4xC,EAAAA,YAAY,CAACl+B,IAAD,EAAOpR,sBAAP,EAA+B;AACzC,UAAME,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAMqlC,gBAAgB,GAAG,KAAKvlC,KAAL,CAAWulC,gBAApC;AACA,UAAM9nC,IAAI,GAAG,KAAKq6B,eAAL,CAAqB/3B,sBAArB,CAAb;;AAEA,QAAItC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IAA2CmC,IAAI,CAACjB,KAAL,KAAe+oC,gBAA9D,EAAgF;AAC9E,aAAO9nC,IAAP;AACD;;AAED,QAAIsC,sBAAsB,IAAIA,sBAAsB,CAACvD,KAArD,EAA4D;AAC1D,aAAOiB,IAAP;AACD;;AAED,WAAO,KAAKmgC,WAAL,CAAiBngC,IAAjB,EAAuBwC,QAAvB,EAAiCC,QAAjC,EAA2C,CAAC,CAA5C,EAA+CiR,IAA/C,CAAP;AACD;;AAEDysB,EAAAA,WAAW,CAACloB,IAAD,EAAOmoB,YAAP,EAAqBC,YAArB,EAAmCC,OAAnC,EAA4C5sB,IAA5C,EAAkD;AAC3D,UAAMm+B,IAAI,GAAG,KAAKtvC,KAAL,CAAW1E,IAAX,CAAgBrI,KAA7B;;AAEA,QAAIq8C,IAAI,IAAI,IAAR,KAAiB,CAACn+B,IAAD,IAAS,CAAC,KAAK/I,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,CAA3B,CAAJ,EAAuD;AACrD,UAAI42C,IAAI,GAAGvR,OAAX,EAAoB;AAClB,cAAMvpB,QAAQ,GAAG,KAAKxU,KAAL,CAAW5N,KAA5B;;AAEA,YAAIoiB,QAAQ,KAAK,IAAb,IAAqB,KAAKxU,KAAL,CAAWgmC,0BAApC,EAAgE;AAC9D,iBAAOtwB,IAAP;AACD;;AAED,cAAMra,IAAI,GAAG,KAAKkB,WAAL,CAAiBshC,YAAjB,EAA+BC,YAA/B,CAAb;AACAziC,QAAAA,IAAI,CAACqa,IAAL,GAAYA,IAAZ;AACAra,QAAAA,IAAI,CAACmZ,QAAL,GAAgBA,QAAhB;;AAEA,YAAIA,QAAQ,KAAK,IAAb,IAAqBkB,IAAI,CAACpa,IAAL,KAAc,iBAAnC,KAAyD,KAAK/H,OAAL,CAAamvC,8BAAb,IAA+C,EAAEhtB,IAAI,CAAC9Y,KAAL,IAAc8Y,IAAI,CAAC9Y,KAAL,CAAWiC,aAA3B,CAAxG,CAAJ,EAAwJ;AACtJ,eAAKtB,KAAL,CAAWmY,IAAI,CAAC1G,QAAL,CAAcxS,KAAzB,EAAgC,kFAAhC;AACD;;AAED,cAAM8vC,EAAE,GAAG,KAAKtsC,KAAL,CAAW1E,IAAtB;;AAEA,YAAIgxC,EAAE,KAAK34C,KAAK,CAACkC,QAAjB,EAA2B;AACzB,eAAK8iB,YAAL,CAAkB,kBAAlB;AACA,eAAK3Y,KAAL,CAAW0lC,UAAX,GAAwB,IAAxB;AACA,eAAK6J,4BAAL,CAAkC75B,IAAlC,EAAwCmoB,YAAxC;AACD,SAJD,MAIO,IAAIyO,EAAE,KAAK34C,KAAK,CAACmC,iBAAjB,EAAoC;AACzC,eAAK6iB,YAAL,CAAkB,2BAAlB;AACD;;AAED,aAAKvT,IAAL;;AAEA,YAAIknC,EAAE,KAAK34C,KAAK,CAACkC,QAAb,IAAyB,KAAK6Q,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,SAAtF,EAAiG;AAC/F,cAAI,KAAK0B,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,OAA/C,IAA0D,KAAK2Q,KAAL,CAAW0tB,OAAzE,EAAkF;AAChF,kBAAM,KAAKlzB,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA8B,yFAA9B,CAAN;AACD;AACF;;AAEDnB,QAAAA,IAAI,CAAC+Q,KAAL,GAAa,KAAKojC,oBAAL,CAA0BlD,EAA1B,EAA8BgD,IAA9B,EAAoCn+B,IAApC,CAAb;;AAEA,YAAIm7B,EAAE,KAAK34C,KAAK,CAACmC,iBAAjB,EAAoC;AAClC,cAAI4f,IAAI,CAACpa,IAAL,KAAc,mBAAd,IAAqCoa,IAAI,CAAClB,QAAL,KAAkB,IAAvD,IAA+D,EAAEkB,IAAI,CAAC9Y,KAAL,IAAc8Y,IAAI,CAAC9Y,KAAL,CAAWiC,aAA3B,CAAnE,EAA8G;AAC5G,kBAAM,KAAKtB,KAAL,CAAWmY,IAAI,CAAClZ,KAAhB,EAAwB,oFAAxB,CAAN;AACD,WAFD,MAEO,IAAInB,IAAI,CAAC+Q,KAAL,CAAW9Q,IAAX,KAAoB,mBAApB,IAA2CD,IAAI,CAAC+Q,KAAL,CAAWoI,QAAX,KAAwB,IAAnE,IAA2E,EAAEnZ,IAAI,CAAC+Q,KAAL,CAAWxP,KAAX,IAAoBvB,IAAI,CAAC+Q,KAAL,CAAWxP,KAAX,CAAiBiC,aAAvC,CAA/E,EAAsI;AAC3I,kBAAM,KAAKtB,KAAL,CAAWlC,IAAI,CAAC+Q,KAAL,CAAW5P,KAAtB,EAA8B,oFAA9B,CAAN;AACD;AACF;;AAED,aAAKkE,UAAL,CAAgBrF,IAAhB,EAAsBixC,EAAE,KAAK34C,KAAK,CAACoC,SAAb,IAA0Bu2C,EAAE,KAAK34C,KAAK,CAACqC,UAAvC,IAAqDs2C,EAAE,KAAK34C,KAAK,CAACmC,iBAAlE,GAAsF,mBAAtF,GAA4G,kBAAlI;AACA,eAAO,KAAK8nC,WAAL,CAAiBviC,IAAjB,EAAuBwiC,YAAvB,EAAqCC,YAArC,EAAmDC,OAAnD,EAA4D5sB,IAA5D,CAAP;AACD;AACF;;AAED,WAAOuE,IAAP;AACD;;AAED85B,EAAAA,oBAAoB,CAAClD,EAAD,EAAKgD,IAAL,EAAWn+B,IAAX,EAAiB;AACnC,UAAMlR,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;;AAEA,YAAQosC,EAAR;AACE,WAAK34C,KAAK,CAACkC,QAAX;AACE,gBAAQ,KAAK6Q,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,CAAR;AACE,eAAK,OAAL;AACE,mBAAO,KAAK+oC,0BAAL,CAAgC,MAAM;AAC3C,qBAAO,KAAKC,sBAAL,CAA4B,KAAKC,wBAAL,CAA8BrD,EAA9B,EAAkCgD,IAAlC,EAAwCn+B,IAAxC,CAA5B,EAA2ElR,QAA3E,EAAqFC,QAArF,CAAP;AACD,aAFM,CAAP;;AAIF,eAAK,QAAL;AACE,mBAAO,KAAK0vC,8BAAL,CAAoC,MAAM;AAC/C,qBAAO,KAAKC,uBAAL,CAA6BP,IAA7B,EAAmCn+B,IAAnC,CAAP;AACD,aAFM,CAAP;AAPJ;;AAYF;AACE,eAAO,KAAKw+B,wBAAL,CAA8BrD,EAA9B,EAAkCgD,IAAlC,EAAwCn+B,IAAxC,CAAP;AAfJ;AAiBD;;AAEDw+B,EAAAA,wBAAwB,CAACrD,EAAD,EAAKgD,IAAL,EAAWn+B,IAAX,EAAiB;AACvC,UAAMlR,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,WAAO,KAAK09B,WAAL,CAAiB,KAAK9F,eAAL,EAAjB,EAAyC73B,QAAzC,EAAmDC,QAAnD,EAA6DosC,EAAE,CAACt5C,gBAAH,GAAsBs8C,IAAI,GAAG,CAA7B,GAAiCA,IAA9F,EAAoGn+B,IAApG,CAAP;AACD;;AAED2mB,EAAAA,eAAe,CAAC/3B,sBAAD,EAAyB;AACtC,QAAI,KAAK6J,YAAL,CAAkB,OAAlB,KAA8B,KAAKkmC,cAAL,EAAlC,EAAyD;AACvD,aAAO,KAAKC,UAAL,EAAP;AACD,KAFD,MAEO,IAAI,KAAK/vC,KAAL,CAAW1E,IAAX,CAAgB7I,MAApB,EAA4B;AACjC,YAAM4I,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,YAAM0rC,MAAM,GAAG,KAAK/jC,KAAL,CAAWzU,KAAK,CAAC+B,MAAjB,CAAf;AACA2F,MAAAA,IAAI,CAACmZ,QAAL,GAAgB,KAAKxU,KAAL,CAAW5N,KAA3B;AACAiJ,MAAAA,IAAI,CAAC5I,MAAL,GAAc,IAAd;;AAEA,UAAI4I,IAAI,CAACmZ,QAAL,KAAkB,OAAtB,EAA+B;AAC7B,aAAKmE,YAAL,CAAkB,kBAAlB;AACD;;AAED,WAAKvT,IAAL;AACA/J,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAK8oB,eAAL,EAAhB;;AAEA,UAAI/3B,sBAAsB,IAAIA,sBAAsB,CAACvD,KAArD,EAA4D;AAC1D,aAAKyN,UAAL,CAAgBlK,sBAAsB,CAACvD,KAAvC;AACD;;AAED,UAAI2vC,MAAJ,EAAY;AACV,aAAK3uC,SAAL,CAAenC,IAAI,CAAC2T,QAApB,EAA8BxI,SAA9B,EAAyCA,SAAzC,EAAoD,kBAApD;AACD,OAFD,MAEO,IAAI,KAAKxG,KAAL,CAAWyD,MAAX,IAAqBpI,IAAI,CAACmZ,QAAL,KAAkB,QAA3C,EAAqD;AAC1D,cAAMq5B,GAAG,GAAGxyC,IAAI,CAAC2T,QAAjB;;AAEA,YAAI6+B,GAAG,CAACvyC,IAAJ,KAAa,YAAjB,EAA+B;AAC7B,eAAKiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,wCAAvB;AACD,SAFD,MAEO,IAAIqxC,GAAG,CAACvyC,IAAJ,KAAa,kBAAb,IAAmCuyC,GAAG,CAAC1+B,QAAJ,CAAa7T,IAAb,KAAsB,aAA7D,EAA4E;AACjF,eAAKiC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,yCAAvB;AACD;AACF;;AAED,aAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsB8wC,MAAM,GAAG,kBAAH,GAAwB,iBAApD,CAAP;AACD;;AAED,UAAMlsC,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,QAAIzC,IAAI,GAAG,KAAKuyC,mBAAL,CAAyBjwC,sBAAzB,CAAX;AACA,QAAIA,sBAAsB,IAAIA,sBAAsB,CAACvD,KAArD,EAA4D,OAAOiB,IAAP;;AAE5D,WAAO,KAAKuC,KAAL,CAAW1E,IAAX,CAAgB5I,OAAhB,IAA2B,CAAC,KAAKsd,kBAAL,EAAnC,EAA8D;AAC5D,YAAM3U,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAACmZ,QAAL,GAAgB,KAAKxU,KAAL,CAAW5N,KAA3B;AACAiJ,MAAAA,IAAI,CAAC5I,MAAL,GAAc,KAAd;AACA4I,MAAAA,IAAI,CAAC2T,QAAL,GAAgBvR,IAAhB;AACA,WAAKD,SAAL,CAAeC,IAAf,EAAqB+I,SAArB,EAAgCA,SAAhC,EAA2C,mBAA3C;AACA,WAAKpB,IAAL;AACA3H,MAAAA,IAAI,GAAG,KAAKiD,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAED,WAAOoC,IAAP;AACD;;AAEDuyC,EAAAA,mBAAmB,CAACjwC,sBAAD,EAAyB;AAC1C,UAAME,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAMqlC,gBAAgB,GAAG,KAAKvlC,KAAL,CAAWulC,gBAApC;AACA,UAAM9nC,IAAI,GAAG,KAAKqC,aAAL,CAAmBC,sBAAnB,CAAb;;AAEA,QAAItC,IAAI,CAACnC,IAAL,KAAc,yBAAd,IAA2CmC,IAAI,CAACjB,KAAL,KAAe+oC,gBAA9D,EAAgF;AAC9E,aAAO9nC,IAAP;AACD;;AAED,QAAIsC,sBAAsB,IAAIA,sBAAsB,CAACvD,KAArD,EAA4D;AAC1D,aAAOiB,IAAP;AACD;;AAED,WAAO,KAAKua,eAAL,CAAqBva,IAArB,EAA2BwC,QAA3B,EAAqCC,QAArC,CAAP;AACD;;AAED8X,EAAAA,eAAe,CAACC,IAAD,EAAOhY,QAAP,EAAiBC,QAAjB,EAA2BgY,OAA3B,EAAoC;AACjD,UAAMlY,KAAK,GAAG;AACZ4Y,MAAAA,mBAAmB,EAAE,KADT;AAEZq3B,MAAAA,eAAe,EAAE,KAAKxS,eAAL,CAAqBxlB,IAArB,CAFL;AAGZY,MAAAA,IAAI,EAAE;AAHM,KAAd;;AAMA,OAAG;AACDZ,MAAAA,IAAI,GAAG,KAAKO,cAAL,CAAoBP,IAApB,EAA0BhY,QAA1B,EAAoCC,QAApC,EAA8CgY,OAA9C,EAAuDlY,KAAvD,CAAP;AACAA,MAAAA,KAAK,CAACiwC,eAAN,GAAwB,KAAxB;AACD,KAHD,QAGS,CAACjwC,KAAK,CAAC6Y,IAHhB;;AAKA,WAAOZ,IAAP;AACD;;AAEDO,EAAAA,cAAc,CAACP,IAAD,EAAOhY,QAAP,EAAiBC,QAAjB,EAA2BgY,OAA3B,EAAoClY,KAApC,EAA2C;AACvD,QAAI,CAACkY,OAAD,IAAY,KAAKlQ,GAAL,CAASrU,KAAK,CAACiB,WAAf,CAAhB,EAA6C;AAC3C,YAAMyG,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8xB,MAAL,GAAclV,IAAd;AACA5c,MAAAA,IAAI,CAAC8c,MAAL,GAAc,KAAK+3B,eAAL,EAAd;AACAlwC,MAAAA,KAAK,CAAC6Y,IAAN,GAAa,IAAb;AACA,aAAO,KAAKb,eAAL,CAAqB,KAAKtX,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAArB,EAA8D4E,QAA9D,EAAwEC,QAAxE,EAAkFgY,OAAlF,CAAP;AACD,KAND,MAMO,IAAI,KAAK9P,KAAL,CAAWzU,KAAK,CAACoB,WAAjB,CAAJ,EAAmC;AACxC,WAAK4jB,YAAL,CAAkB,kBAAlB;AACA3Y,MAAAA,KAAK,CAAC4Y,mBAAN,GAA4B,IAA5B;;AAEA,UAAIV,OAAO,IAAI,KAAK2f,iBAAL,OAA6B,EAA5C,EAAgD;AAC9C73B,QAAAA,KAAK,CAAC6Y,IAAN,GAAa,IAAb;AACA,eAAOZ,IAAP;AACD;;AAED,WAAK7S,IAAL;AACA,YAAM/J,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;;AAEA,UAAI,KAAK8H,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAJ,EAA8B;AAC5BoH,QAAAA,IAAI,CAAC8xB,MAAL,GAAclV,IAAd;AACA5c,QAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAKlH,eAAL,EAAhB;AACA5M,QAAAA,IAAI,CAAC6C,QAAL,GAAgB,IAAhB;AACA7C,QAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,aAAKvG,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACA,eAAO,KAAKwM,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD,OAPD,MAOO,IAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAJ,EAA4B;AACjC8G,QAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA5c,QAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACA6G,QAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,eAAO,KAAKiL,oBAAL,CAA0B1d,IAA1B,EAAgC,IAAhC,CAAP;AACD,OALM,MAKA;AACLA,QAAAA,IAAI,CAAC8xB,MAAL,GAAclV,IAAd;AACA5c,QAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAK1G,eAAL,CAAqB,IAArB,CAAhB;AACApN,QAAAA,IAAI,CAAC6C,QAAL,GAAgB,KAAhB;AACA7C,QAAAA,IAAI,CAACyS,QAAL,GAAgB,IAAhB;AACA,eAAO,KAAKpN,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;AACF,KA/BM,MA+BA,IAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAJ,EAAyB;AAC9B,YAAMwG,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8xB,MAAL,GAAclV,IAAd;AACA5c,MAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAKghC,qBAAL,EAAhB;AACA90C,MAAAA,IAAI,CAAC6C,QAAL,GAAgB,KAAhB;;AAEA,UAAI7C,IAAI,CAAC8T,QAAL,CAAc7T,IAAd,KAAuB,aAAvB,IAAwCD,IAAI,CAAC8xB,MAAL,CAAY7xB,IAAZ,KAAqB,OAAjE,EAA0E;AACxE,aAAKiC,KAAL,CAAW0C,QAAX,EAAqB,2CAArB;AACD;;AAED,UAAID,KAAK,CAAC4Y,mBAAV,EAA+B;AAC7Bvd,QAAAA,IAAI,CAACyS,QAAL,GAAgB,KAAhB;AACA,eAAO,KAAKpN,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,aAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD,KAhBM,MAgBA,IAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAJ,EAA8B;AACnC,YAAMoH,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,MAAAA,IAAI,CAAC8xB,MAAL,GAAclV,IAAd;AACA5c,MAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAKlH,eAAL,EAAhB;AACA5M,MAAAA,IAAI,CAAC6C,QAAL,GAAgB,IAAhB;AACA,WAAKqJ,MAAL,CAAY5T,KAAK,CAACO,QAAlB;;AAEA,UAAI8L,KAAK,CAAC4Y,mBAAV,EAA+B;AAC7Bvd,QAAAA,IAAI,CAACyS,QAAL,GAAgB,KAAhB;AACA,eAAO,KAAKpN,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,aAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD,KAbM,MAaA,IAAI,CAAC6c,OAAD,IAAY,KAAK9P,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAhB,EAA0C;AAC/C,YAAM67C,yBAAyB,GAAG,KAAKpwC,KAAL,CAAWylC,sBAA7C;AACA,YAAM4K,WAAW,GAAG,KAAKrwC,KAAL,CAAWomC,QAA/B;AACA,YAAMkK,WAAW,GAAG,KAAKtwC,KAAL,CAAWqmC,QAA/B;AACA,WAAKrmC,KAAL,CAAWylC,sBAAX,GAAoC,IAApC;AACA,WAAKzlC,KAAL,CAAWomC,QAAX,GAAsB,CAAC,CAAvB;AACA,WAAKpmC,KAAL,CAAWqmC,QAAX,GAAsB,CAAC,CAAvB;AACA,WAAKjhC,IAAL;AACA,UAAI/J,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAX;AACA7E,MAAAA,IAAI,CAAC8c,MAAL,GAAcF,IAAd;AACA5c,MAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgDwL,KAAK,CAACiwC,eAAtD,EAAuEh4B,IAAI,CAAC3c,IAAL,KAAc,QAArF,EAA+F2c,IAAI,CAAC3c,IAAL,KAAc,OAA7G,EAAsHD,IAAtH,CAAjB;AACA,WAAK0d,oBAAL,CAA0B1d,IAA1B,EAAgC2E,KAAK,CAAC4Y,mBAAtC;;AAEA,UAAI5Y,KAAK,CAACiwC,eAAN,IAAyB,KAAKj5B,qBAAL,EAA7B,EAA2D;AACzDhX,QAAAA,KAAK,CAAC6Y,IAAN,GAAa,IAAb;AACAxd,QAAAA,IAAI,GAAG,KAAKyb,iCAAL,CAAuC,KAAKva,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAvC,EAA6E7E,IAA7E,CAAP;AACA,aAAK0xC,8BAAL;AACA,aAAK/sC,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACA,aAAKrwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;AACD,OAND,MAMO;AACL,aAAKvC,oBAAL,CAA0B1yC,IAAI,CAACsY,SAA/B;AACA,YAAI08B,WAAW,KAAK,CAAC,CAArB,EAAwB,KAAKrwC,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;;AAExB,YAAI,CAAC,KAAKP,cAAL,EAAD,IAA0B,CAACM,yBAA3B,IAAwDE,WAAW,KAAK,CAAC,CAA7E,EAAgF;AAC9E,eAAKtwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;AACD;AACF;;AAED,WAAKtwC,KAAL,CAAWylC,sBAAX,GAAoC2K,yBAApC;AACA,aAAO/0C,IAAP;AACD,KA9BM,MA8BA,IAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACwB,SAAjB,CAAJ,EAAiC;AACtC,aAAO,KAAKwoC,6BAAL,CAAmC19B,QAAnC,EAA6CC,QAA7C,EAAuD+X,IAAvD,EAA6DjY,KAA7D,CAAP;AACD,KAFM,MAEA;AACLA,MAAAA,KAAK,CAAC6Y,IAAN,GAAa,IAAb;AACA,aAAOZ,IAAP;AACD;AACF;;AAED0lB,EAAAA,6BAA6B,CAAC19B,QAAD,EAAWC,QAAX,EAAqB+X,IAArB,EAA2BjY,KAA3B,EAAkC8Y,aAAlC,EAAiD;AAC5E,UAAMzd,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,IAAAA,IAAI,CAACk1C,GAAL,GAAWt4B,IAAX;AACA5c,IAAAA,IAAI,CAACm1C,KAAL,GAAa,KAAKhZ,aAAL,CAAmB,IAAnB,CAAb;AACA,QAAI1e,aAAJ,EAAmBzd,IAAI,CAACuE,cAAL,GAAsBkZ,aAAtB;;AAEnB,QAAI9Y,KAAK,CAAC4Y,mBAAV,EAA+B;AAC7B,WAAKrb,KAAL,CAAW0C,QAAX,EAAqB,2DAArB;AACD;;AAED,WAAO,KAAKS,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAEDoiC,EAAAA,eAAe,CAACxlB,IAAD,EAAO;AACpB,WAAOA,IAAI,CAAC3c,IAAL,KAAc,YAAd,IAA8B2c,IAAI,CAAC3kB,IAAL,KAAc,OAA5C,IAAuD,KAAK0M,KAAL,CAAWsD,UAAX,KAA0B2U,IAAI,CAACnb,GAAtF,IAA6F,CAAC,KAAKkT,kBAAL,EAA9F,IAA2H,KAAK3M,KAAL,CAAWtG,KAAX,CAAiBkb,IAAI,CAACzb,KAAtB,EAA6Byb,IAAI,CAACnb,GAAlC,MAA2C,OAA7K;AACD;;AAEDic,EAAAA,oBAAoB,CAAC1d,IAAD,EAAOyS,QAAP,EAAiB;AACnC,QAAIzS,IAAI,CAAC8c,MAAL,CAAY7c,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,UAAID,IAAI,CAACsY,SAAL,CAAerW,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAKC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,wCAAvB;AACD,OAFD,MAEO;AACL,cAAMi0C,SAAS,GAAGp1C,IAAI,CAACsY,SAAL,CAAe,CAAf,CAAlB;;AAEA,YAAI88B,SAAS,IAAIA,SAAS,CAACn1C,IAAV,KAAmB,eAApC,EAAqD;AACnD,eAAKiC,KAAL,CAAWkzC,SAAS,CAACj0C,KAArB,EAA4B,gCAA5B;AACD;AACF;AACF;;AAED,WAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsByS,QAAQ,GAAG,wBAAH,GAA8B,gBAA5D,CAAP;AACD;;AAEDsK,EAAAA,4BAA4B,CAAC+1B,KAAD,EAAQuC,kBAAR,EAA4BC,aAA5B,EAA2CC,gBAA3C,EAA6DC,YAA7D,EAA2E;AACrG,UAAMvC,IAAI,GAAG,EAAb;AACA,QAAIwC,eAAJ;AACA,QAAIvC,KAAK,GAAG,IAAZ;AACA,UAAMwC,6BAA6B,GAAG,KAAK/wC,KAAL,CAAWgmC,0BAAjD;AACA,SAAKhmC,KAAL,CAAWgmC,0BAAX,GAAwC,KAAxC;;AAEA,WAAO,CAAC,KAAKh+B,GAAL,CAASmmC,KAAT,CAAR,EAAyB;AACvB,UAAII,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB;;AAEA,YAAI,KAAK2T,KAAL,CAAW+lC,KAAX,CAAJ,EAAuB;AACrB,cAAIwC,aAAJ,EAAmB;AACjB,iBAAKpzC,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,2DAApC;AACD;;AAED,cAAImnC,YAAJ,EAAkB;AAChB,iBAAKxE,QAAL,CAAcwE,YAAd,EAA4B,eAA5B,EAA6C,KAAK7wC,KAAL,CAAW0J,YAAxD;AACD;;AAED,eAAKtE,IAAL;AACA;AACD;AACF;;AAED,UAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,CAACu8C,eAAjC,EAAkD;AAChDA,QAAAA,eAAe,GAAG,KAAK9wC,KAAL,CAAWxD,KAA7B;AACD;;AAED8xC,MAAAA,IAAI,CAACzuC,IAAL,CAAU,KAAKmxC,iBAAL,CAAuB,KAAvB,EAA8BN,kBAAkB,GAAG;AAC3Dl0C,QAAAA,KAAK,EAAE;AADoD,OAAH,GAEtDgK,SAFM,EAEKkqC,kBAAkB,GAAG;AAClCl0C,QAAAA,KAAK,EAAE;AAD2B,OAAH,GAE7BgK,SAJM,EAIKoqC,gBAJL,CAAV;AAKD;;AAED,QAAIF,kBAAkB,IAAII,eAAtB,IAAyC,KAAK95B,qBAAL,EAA7C,EAA2E;AACzE,WAAK/M,UAAL;AACD;;AAED,SAAKjK,KAAL,CAAWgmC,0BAAX,GAAwC+K,6BAAxC;AACA,WAAOzC,IAAP;AACD;;AAEDt3B,EAAAA,qBAAqB,GAAG;AACtB,WAAO,KAAK5O,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,KAA2B,CAAC,KAAKgb,kBAAL,EAAnC;AACD;;AAED8G,EAAAA,iCAAiC,CAACzb,IAAD,EAAO0b,IAAP,EAAa;AAC5C,QAAIk6B,WAAJ;;AAEA,SAAK1pC,MAAL,CAAY5T,KAAK,CAACqB,KAAlB;AACA,SAAKkkB,oBAAL,CAA0B7d,IAA1B,EAAgC0b,IAAI,CAACpD,SAArC,EAAgD,IAAhD,EAAsD,CAACs9B,WAAW,GAAGl6B,IAAI,CAACna,KAApB,KAA8B,IAA9B,GAAqC,KAAK,CAA1C,GAA8Cq0C,WAAW,CAACp+B,aAAhH;AACA,WAAOxX,IAAP;AACD;;AAED60C,EAAAA,eAAe,GAAG;AAChB,UAAMjwC,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,WAAO,KAAK8X,eAAL,CAAqB,KAAKlY,aAAL,EAArB,EAA2CG,QAA3C,EAAqDC,QAArD,EAA+D,IAA/D,CAAP;AACD;;AAEDJ,EAAAA,aAAa,CAACC,sBAAD,EAAyB;AACpC,QAAI,KAAKC,KAAL,CAAW1E,IAAX,KAAoB3H,KAAK,CAAC+C,KAA9B,EAAqC,KAAKqyC,UAAL;AACrC,UAAMhxB,UAAU,GAAG,KAAK/X,KAAL,CAAWulC,gBAAX,KAAgC,KAAKvlC,KAAL,CAAWxD,KAA9D;AACA,QAAInB,IAAJ;;AAEA,YAAQ,KAAK2E,KAAL,CAAW1E,IAAnB;AACE,WAAK3H,KAAK,CAACuE,MAAX;AACEmD,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK2E,IAAL;;AAEA,YAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACY,MAAjB,KAA4B,CAAC,KAAKwO,KAAL,CAAWzC,gBAAxC,IAA4D,CAAC,KAAK/M,OAAL,CAAa8uC,uBAA9E,EAAuG;AACrG,eAAK9kC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,qEAAqE,iFAA5F;AACD,SAFD,MAEO,IAAI,CAAC,KAAKuG,KAAL,CAAW2tB,UAAZ,IAA0B,CAAC,KAAKn9B,OAAL,CAAa8uC,uBAA5C,EAAqE;AAC1E,eAAK9kC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,qDAAvB;AACD;;AAED,YAAI,CAAC,KAAK4L,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAD,IAA6B,CAAC,KAAK6T,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAA9B,IAA4D,CAAC,KAAKmU,KAAL,CAAWzU,KAAK,CAACkB,GAAjB,CAAjE,EAAwF;AACtF,eAAK0I,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,kEAAkE,uDAAzF;AACD;;AAED,eAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsB,OAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC2E,OAAX;AACE+C,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK2E,IAAL;;AAEA,YAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACkB,GAAjB,CAAJ,EAA2B;AACzB,iBAAO,KAAKq8C,uBAAL,CAA6B71C,IAA7B,CAAP;AACD;;AAED,aAAKsd,YAAL,CAAkB,eAAlB,EAAmCtd,IAAI,CAACmB,KAAxC;;AAEA,YAAI,CAAC,KAAK4L,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAL,EAA+B;AAC7B,eAAK0V,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAACY,MAA5B;AACD;;AAED,eAAO,KAAKmM,UAAL,CAAgBrF,IAAhB,EAAsB,QAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAACsE,KAAX;AACEoD,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK2E,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAACL,IAAX;AACE;AACE+H,UAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,gBAAMI,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;AACA,gBAAM2H,EAAE,GAAG,KAAKC,eAAL,EAAX;;AAEA,cAAI,CAAC5H,WAAD,IAAgB2H,EAAE,CAAClV,IAAH,KAAY,OAA5B,IAAuC,KAAK8U,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,CAAvC,IAAsE,CAAC,KAAK0Y,kBAAL,EAA3E,EAAsG;AACpG,iBAAK5K,IAAL;AACA,mBAAO,KAAK+rC,aAAL,CAAmB91C,IAAnB,EAAyBmL,SAAzB,EAAoC,IAApC,CAAP;AACD,WAHD,MAGO,IAAIuR,UAAU,IAAI,CAAClX,WAAf,IAA8B2H,EAAE,CAAClV,IAAH,KAAY,OAA1C,IAAqD,KAAK8U,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAArD,IAA+E,CAAC,KAAK0c,kBAAL,EAApF,EAA+G;AACpH,kBAAM3S,MAAM,GAAG,CAAC,KAAKoL,eAAL,EAAD,CAAf;AACA,iBAAKlB,MAAL,CAAY5T,KAAK,CAACqB,KAAlB;AACA,iBAAKkkB,oBAAL,CAA0B7d,IAA1B,EAAgCgC,MAAhC,EAAwC,IAAxC;AACA,mBAAOhC,IAAP;AACD;;AAED,cAAI0c,UAAU,IAAI,KAAK3P,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,CAAd,IAAyC,CAAC,KAAKgb,kBAAL,EAA9C,EAAyE;AACvE,iBAAK5K,IAAL;AACA,iBAAK8T,oBAAL,CAA0B7d,IAA1B,EAAgC,CAACmN,EAAD,CAAhC,EAAsC,KAAtC;AACA,mBAAOnN,IAAP;AACD;;AAED,iBAAOmN,EAAP;AACD;;AAEH,WAAK7U,KAAK,CAACuD,GAAX;AACE;AACE,eAAKyhB,YAAL,CAAkB,eAAlB;AACA,gBAAMtd,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,eAAK2E,IAAL;AACA,gBAAMgsC,SAAS,GAAG,KAAKpxC,KAAL,CAAWkmC,MAA7B;AACA,eAAKlmC,KAAL,CAAWkmC,MAAX,GAAoB,EAApB;AACA7qC,UAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKwhC,UAAL,EAAZ;AACA,eAAKjgC,KAAL,CAAWkmC,MAAX,GAAoBkL,SAApB;AACA,iBAAO,KAAK1wC,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEH,WAAK1H,KAAK,CAACG,MAAX;AACE;AACE,gBAAM1B,KAAK,GAAG,KAAK4N,KAAL,CAAW5N,KAAzB;AACAiJ,UAAAA,IAAI,GAAG,KAAKa,YAAL,CAAkB9J,KAAK,CAACA,KAAxB,EAA+B,eAA/B,CAAP;AACAiJ,UAAAA,IAAI,CAACO,OAAL,GAAexJ,KAAK,CAACwJ,OAArB;AACAP,UAAAA,IAAI,CAACQ,KAAL,GAAazJ,KAAK,CAACyJ,KAAnB;AACA,iBAAOR,IAAP;AACD;;AAEH,WAAK1H,KAAK,CAACC,GAAX;AACE,eAAO,KAAKsI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,gBAApC,CAAP;;AAEF,WAAKuB,KAAK,CAACE,MAAX;AACE,eAAO,KAAKqI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,eAApC,CAAP;;AAEF,WAAKuB,KAAK,CAACI,MAAX;AACE,eAAO,KAAKmI,YAAL,CAAkB,KAAK8D,KAAL,CAAW5N,KAA7B,EAAoC,eAApC,CAAP;;AAEF,WAAKuB,KAAK,CAAC4E,KAAX;AACE8C,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK2E,IAAL;AACA,eAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC6E,KAAX;AACA,WAAK7E,KAAK,CAAC8E,MAAX;AACE,eAAO,KAAK0iB,mBAAL,EAAP;;AAEF,WAAKxnB,KAAK,CAACY,MAAX;AACE,eAAO,KAAKujB,kCAAL,CAAwCC,UAAxC,CAAP;;AAEF,WAAKpkB,KAAK,CAACM,QAAX;AACE;AACE,gBAAM88C,6BAA6B,GAAG,KAAK/wC,KAAL,CAAWgmC,0BAAjD;AACA,eAAKhmC,KAAL,CAAWgmC,0BAAX,GAAwC,KAAxC;AACA3qC,UAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,eAAK2E,IAAL;AACA/J,UAAAA,IAAI,CAACiZ,QAAL,GAAgB,KAAK+8B,aAAL,CAAmB19C,KAAK,CAACO,QAAzB,EAAmC,IAAnC,EAAyC6L,sBAAzC,EAAiE1E,IAAjE,CAAhB;;AAEA,cAAI,CAAC,KAAK2E,KAAL,CAAWylC,sBAAhB,EAAwC;AACtC,iBAAK9wB,gBAAL,CAAsBtZ,IAAI,CAACiZ,QAA3B;AACD;;AAED,eAAKtU,KAAL,CAAWgmC,0BAAX,GAAwC+K,6BAAxC;AACA,iBAAO,KAAKrwC,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEH,WAAK1H,KAAK,CAACQ,MAAX;AACE;AACE,gBAAM48C,6BAA6B,GAAG,KAAK/wC,KAAL,CAAWgmC,0BAAjD;AACA,eAAKhmC,KAAL,CAAWgmC,0BAAX,GAAwC,KAAxC;AACA,gBAAMsL,GAAG,GAAG,KAAKpD,QAAL,CAAc,KAAd,EAAqBnuC,sBAArB,CAAZ;AACA,eAAKC,KAAL,CAAWgmC,0BAAX,GAAwC+K,6BAAxC;AACA,iBAAOO,GAAP;AACD;;AAEH,WAAK39C,KAAK,CAAC2D,SAAX;AACE,eAAO,KAAKi6C,uBAAL,EAAP;;AAEF,WAAK59C,KAAK,CAAC0B,EAAX;AACE,aAAKm8C,eAAL;;AAEF,WAAK79C,KAAK,CAACwE,MAAX;AACEkD,QAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,aAAK0/B,cAAL,CAAoB9kC,IAApB;AACA,eAAO,KAAK8gC,UAAL,CAAgB9gC,IAAhB,EAAsB,KAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAACqE,IAAX;AACE,eAAO,KAAKy5C,QAAL,EAAP;;AAEF,WAAK99C,KAAK,CAACwB,SAAX;AACE,eAAO,KAAKqiC,aAAL,CAAmB,KAAnB,CAAP;;AAEF,WAAK7jC,KAAK,CAACiB,WAAX;AACE;AACEyG,UAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;AACA,eAAK2E,IAAL;AACA/J,UAAAA,IAAI,CAAC8xB,MAAL,GAAc,IAAd;AACA,gBAAMhV,MAAM,GAAG9c,IAAI,CAAC8c,MAAL,GAAc,KAAK+3B,eAAL,EAA7B;;AAEA,cAAI/3B,MAAM,CAAC7c,IAAP,KAAgB,kBAApB,EAAwC;AACtC,mBAAO,KAAKoF,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD,WAFD,MAEO;AACL,kBAAM,KAAKkC,KAAL,CAAW4a,MAAM,CAAC3b,KAAlB,EAAyB,iDAAzB,CAAN;AACD;AACF;;AAEH,WAAK7I,KAAK,CAAC2B,IAAX;AACE;AACE,cAAI,KAAK0K,KAAL,CAAW0lC,UAAf,EAA2B;AACzBrqC,YAAAA,IAAI,GAAG,KAAKoF,SAAL,EAAP;;AAEA,gBAAI,KAAKiG,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,mBAAKnJ,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,8FAAvB;AACD;;AAED,iBAAK4I,IAAL;;AAEA,gBAAI,CAAC,KAAKssC,mDAAL,EAAL,EAAiE;AAC/D,mBAAKn0C,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAwB,qEAAxB;AACD;;AAED,iBAAKm1C,sBAAL;AACA,mBAAO,KAAKjxC,UAAL,CAAgBrF,IAAhB,EAAsB,+BAAtB,CAAP;AACD;AACF;;AAEH;AACE,cAAM,KAAK4O,UAAL,EAAN;AAtLJ;AAwLD;;AAEDkR,EAAAA,mBAAmB,GAAG;AACpB,UAAM9f,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAKgW,KAAL,CAAWzU,KAAK,CAAC6E,KAAjB,CAAb;AACA,SAAK4M,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED80C,EAAAA,qBAAqB,GAAG;AACtB,UAAMyB,SAAS,GAAG,KAAKxpC,KAAL,CAAWzU,KAAK,CAAC2B,IAAjB,CAAlB;;AAEA,QAAIs8C,SAAJ,EAAe;AACb,WAAK/E,eAAL,CAAqB,CAAC,wBAAD,EAA2B,qBAA3B,CAArB;AACA,YAAMxxC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA,WAAKy6B,aAAL,CAAmB,2CAAnB;AACAxkC,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,CAAqB,IAArB,CAAV;AACA,aAAO,KAAK/H,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD,KAPD,MAOO;AACL,aAAO,KAAKoN,eAAL,CAAqB,IAArB,CAAP;AACD;AACF;;AAED8oC,EAAAA,uBAAuB,GAAG;AACxB,UAAMl2C,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,QAAIoxC,IAAI,GAAG,KAAKpxC,SAAL,EAAX;AACA,SAAK2E,IAAL;AACAysC,IAAAA,IAAI,GAAG,KAAK/hC,gBAAL,CAAsB+hC,IAAtB,EAA4B,UAA5B,CAAP;;AAEA,QAAI,KAAK9uC,KAAL,CAAWC,WAAX,IAA0B,KAAKgF,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAA9B,EAAmD;AACjD,aAAO,KAAKi9C,iBAAL,CAAuBz2C,IAAvB,EAA6Bw2C,IAA7B,EAAmC,MAAnC,CAAP;AACD;;AAED,WAAO,KAAKV,aAAL,CAAmB91C,IAAnB,CAAP;AACD;;AAEDy2C,EAAAA,iBAAiB,CAACz2C,IAAD,EAAOw2C,IAAP,EAAaE,YAAb,EAA2B;AAC1C12C,IAAAA,IAAI,CAACw2C,IAAL,GAAYA,IAAZ;;AAEA,QAAIA,IAAI,CAACv+C,IAAL,KAAc,UAAd,IAA4By+C,YAAY,KAAK,MAAjD,EAAyD;AACvD,UAAI,KAAKnoC,YAAL,CAAkBmoC,YAAlB,CAAJ,EAAqC;AACnC,aAAKp5B,YAAL,CAAkB,cAAlB;AACD,OAFD,MAEO,IAAI,CAAC,KAAKxB,SAAL,CAAe,cAAf,CAAL,EAAqC;AAC1C,aAAKlN,UAAL;AACD;AACF;;AAED,UAAMpJ,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;AACAxF,IAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAK1G,eAAL,CAAqB,IAArB,CAAhB;;AAEA,QAAIpN,IAAI,CAAC8T,QAAL,CAAc7b,IAAd,KAAuBy+C,YAAvB,IAAuClxC,WAA3C,EAAwD;AACtD,WAAKtD,KAAL,CAAWlC,IAAI,CAAC8T,QAAL,CAAc3S,KAAzB,EAAiC,oCAAmCq1C,IAAI,CAACv+C,IAAK,OAAMu+C,IAAI,CAACv+C,IAAK,IAAGy+C,YAAa,EAA9G;AACD;;AAED,WAAO,KAAKrxC,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED61C,EAAAA,uBAAuB,CAAC71C,IAAD,EAAO;AAC5B,UAAMmN,EAAE,GAAG,KAAKsH,gBAAL,CAAsB,KAAKikB,eAAL,CAAqB14B,IAArB,CAAtB,EAAkD,QAAlD,CAAX;AACA,SAAKkM,MAAL,CAAY5T,KAAK,CAACkB,GAAlB;;AAEA,QAAI,KAAK+U,YAAL,CAAkB,MAAlB,CAAJ,EAA+B;AAC7B,WAAK+O,YAAL,CAAkB,YAAlB;;AAEA,UAAI,CAAC,KAAK3U,QAAV,EAAoB;AAClB,aAAKzG,KAAL,CAAWiL,EAAE,CAAChM,KAAd,EAAsB,yDAAtB,EAAgF;AAC9E+E,UAAAA,IAAI,EAAE;AADwE,SAAhF;AAGD;;AAED,WAAKgiC,iBAAL,GAAyB,IAAzB;AACD,KAVD,MAUO,IAAI,CAAC,KAAKpsB,SAAL,CAAe,YAAf,CAAL,EAAmC;AACxC,WAAK5Z,KAAL,CAAWiL,EAAE,CAAChM,KAAd,EAAsB,qDAAtB;AACD;;AAED,WAAO,KAAKs1C,iBAAL,CAAuBz2C,IAAvB,EAA6BmN,EAA7B,EAAiC,MAAjC,CAAP;AACD;;AAEDtM,EAAAA,YAAY,CAAC9J,KAAD,EAAQkJ,IAAR,EAAc2E,QAAd,EAAwBC,QAAxB,EAAkC;AAC5CD,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKD,KAAL,CAAWxD,KAAlC;AACA0D,IAAAA,QAAQ,GAAGA,QAAQ,IAAI,KAAKF,KAAL,CAAWE,QAAlC;AACA,UAAM7E,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA,SAAKmsC,QAAL,CAAchxC,IAAd,EAAoB,UAApB,EAAgCjJ,KAAhC;AACA,SAAKi6C,QAAL,CAAchxC,IAAd,EAAoB,KAApB,EAA2B,KAAKgI,KAAL,CAAWtG,KAAX,CAAiBkD,QAAjB,EAA2B,KAAKD,KAAL,CAAWlD,GAAtC,CAA3B;AACAzB,IAAAA,IAAI,CAACjJ,KAAL,GAAaA,KAAb;AACA,SAAKgT,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB,CAAP;AACD;;AAEDwc,EAAAA,kCAAkC,CAACC,UAAD,EAAa;AAC7C,UAAM9X,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,QAAI2G,GAAJ;AACA,SAAKU,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA,UAAM67C,yBAAyB,GAAG,KAAKpwC,KAAL,CAAWylC,sBAA7C;AACA,UAAM4K,WAAW,GAAG,KAAKrwC,KAAL,CAAWomC,QAA/B;AACA,UAAMkK,WAAW,GAAG,KAAKtwC,KAAL,CAAWqmC,QAA/B;AACA,UAAM0K,6BAA6B,GAAG,KAAK/wC,KAAL,CAAWgmC,0BAAjD;AACA,SAAKhmC,KAAL,CAAWylC,sBAAX,GAAoC,IAApC;AACA,SAAKzlC,KAAL,CAAWomC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKpmC,KAAL,CAAWqmC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKrmC,KAAL,CAAWgmC,0BAAX,GAAwC,KAAxC;AACA,UAAMgM,aAAa,GAAG,KAAKhyC,KAAL,CAAWxD,KAAjC;AACA,UAAMy1C,aAAa,GAAG,KAAKjyC,KAAL,CAAWE,QAAjC;AACA,UAAMuU,QAAQ,GAAG,EAAjB;AACA,UAAM1U,sBAAsB,GAAG;AAC7BvD,MAAAA,KAAK,EAAE;AADsB,KAA/B;AAGA,UAAM4U,gBAAgB,GAAG;AACvB5U,MAAAA,KAAK,EAAE;AADgB,KAAzB;AAGA,QAAI+xC,KAAK,GAAG,IAAZ;AACA,QAAI2D,WAAJ;AACA,QAAIC,kBAAJ;;AAEA,WAAO,CAAC,KAAK/pC,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAR,EAAkC;AAChC,UAAI+5C,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB,EAAyB2c,gBAAgB,CAAC5U,KAAjB,IAA0B,IAAnD;;AAEA,YAAI,KAAK4L,KAAL,CAAWzU,KAAK,CAACa,MAAjB,CAAJ,EAA8B;AAC5B29C,UAAAA,kBAAkB,GAAG,KAAKnyC,KAAL,CAAWxD,KAAhC;AACA;AACD;AACF;;AAED,UAAI,KAAK4L,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AAC9B,cAAMk9C,kBAAkB,GAAG,KAAKpyC,KAAL,CAAWxD,KAAtC;AACA,cAAM61C,kBAAkB,GAAG,KAAKryC,KAAL,CAAWE,QAAtC;AACAgyC,QAAAA,WAAW,GAAG,KAAKlyC,KAAL,CAAWxD,KAAzB;AACAiY,QAAAA,QAAQ,CAAC5U,IAAT,CAAc,KAAKoT,cAAL,CAAoB,KAAKg7B,gBAAL,EAApB,EAA6CmE,kBAA7C,EAAiEC,kBAAjE,CAAd;AACA,aAAKpb,mBAAL,CAAyB,EAAzB;AACA;AACD,OAPD,MAOO;AACLxiB,QAAAA,QAAQ,CAAC5U,IAAT,CAAc,KAAKsS,gBAAL,CAAsB,KAAtB,EAA6BpS,sBAA7B,EAAqD,KAAKkT,cAA1D,EAA0E7B,gBAA1E,CAAd;AACD;AACF;;AAED,UAAMkhC,WAAW,GAAG,KAAKtyC,KAAL,CAAWxD,KAA/B;AACA,UAAM+1C,WAAW,GAAG,KAAKvyC,KAAL,CAAWE,QAA/B;AACA,SAAKqH,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,SAAKwL,KAAL,CAAWylC,sBAAX,GAAoC2K,yBAApC;AACA,SAAKpwC,KAAL,CAAWgmC,0BAAX,GAAwC+K,6BAAxC;AACA,QAAIyB,SAAS,GAAG,KAAKj2C,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAhB;;AAEA,QAAI6X,UAAU,IAAI,KAAKL,gBAAL,EAAd,KAA0C86B,SAAS,GAAG,KAAK/6B,UAAL,CAAgB+6B,SAAhB,CAAtD,CAAJ,EAAuF;AACrF,WAAKzF,8BAAL;AACA,WAAK/sC,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACA,WAAKrwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;;AAEA,WAAK,IAAI5xC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG+V,QAAQ,CAACnX,MAA/B,EAAuCoB,EAAE,EAAzC,EAA6C;AAC3C,cAAM0R,KAAK,GAAGqE,QAAQ,CAAC/V,EAAD,CAAtB;;AAEA,YAAI0R,KAAK,CAACxT,KAAN,IAAewT,KAAK,CAACxT,KAAN,CAAYiC,aAA/B,EAA8C;AAC5C,eAAKoL,UAAL,CAAgBmG,KAAK,CAACxT,KAAN,CAAY61C,UAA5B;AACD;AACF;;AAED,WAAKv5B,oBAAL,CAA0Bs5B,SAA1B,EAAqC/9B,QAArC,EAA+C,KAA/C;AACA,aAAO+9B,SAAP;AACD;;AAED,QAAInC,WAAW,KAAK,CAAC,CAArB,EAAwB,KAAKrwC,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACxB,QAAIC,WAAW,KAAK,CAAC,CAArB,EAAwB,KAAKtwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;;AAExB,QAAI,CAAC77B,QAAQ,CAACnX,MAAd,EAAsB;AACpB,WAAK2M,UAAL,CAAgB,KAAKjK,KAAL,CAAW0J,YAA3B;AACD;;AAED,QAAIyoC,kBAAJ,EAAwB,KAAKloC,UAAL,CAAgBkoC,kBAAhB;AACxB,QAAID,WAAJ,EAAiB,KAAKjoC,UAAL,CAAgBioC,WAAhB;;AAEjB,QAAInyC,sBAAsB,CAACvD,KAA3B,EAAkC;AAChC,WAAKyN,UAAL,CAAgBlK,sBAAsB,CAACvD,KAAvC;AACD;;AAED,QAAI4U,gBAAgB,CAAC5U,KAArB,EAA4B,KAAKyN,UAAL,CAAgBmH,gBAAgB,CAAC5U,KAAjC;AAC5B,SAAKuxC,oBAAL,CAA0Bt5B,QAA1B,EAAoC,IAApC;;AAEA,QAAIA,QAAQ,CAACnX,MAAT,GAAkB,CAAtB,EAAyB;AACvBuJ,MAAAA,GAAG,GAAG,KAAKtK,WAAL,CAAiBy1C,aAAjB,EAAgCC,aAAhC,CAAN;AACAprC,MAAAA,GAAG,CAAC4wB,WAAJ,GAAkBhjB,QAAlB;AACA,WAAK5X,YAAL,CAAkBgK,GAAlB,EAAuB,oBAAvB,EAA6CyrC,WAA7C,EAA0DC,WAA1D;AACD,KAJD,MAIO;AACL1rC,MAAAA,GAAG,GAAG4N,QAAQ,CAAC,CAAD,CAAd;AACD;;AAED,QAAI,CAAC,KAAKlhB,OAAL,CAAamvC,8BAAlB,EAAkD;AAChD,WAAK2J,QAAL,CAAcxlC,GAAd,EAAmB,eAAnB,EAAoC,IAApC;AACA,WAAKwlC,QAAL,CAAcxlC,GAAd,EAAmB,YAAnB,EAAiC5G,QAAjC;AACA,aAAO4G,GAAP;AACD;;AAED,UAAM1E,eAAe,GAAG,KAAK5F,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAxB;AACAiC,IAAAA,eAAe,CAACzF,UAAhB,GAA6BmK,GAA7B;AACA,SAAKnG,UAAL,CAAgByB,eAAhB,EAAiC,yBAAjC;AACA,WAAOA,eAAP;AACD;;AAEDuV,EAAAA,gBAAgB,GAAG;AACjB,WAAO,CAAC,KAAK1H,kBAAL,EAAR;AACD;;AAEDyH,EAAAA,UAAU,CAACpc,IAAD,EAAO;AACf,QAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACqB,KAAf,CAAJ,EAA2B;AACzB,aAAOqG,IAAP;AACD;AACF;;AAED4X,EAAAA,cAAc,CAAC5X,IAAD,EAAO4E,QAAP,EAAiBC,QAAjB,EAA2B;AACvC,WAAO7E,IAAP;AACD;;AAEDo2C,EAAAA,QAAQ,GAAG;AACT,UAAMp2C,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,QAAIoxC,IAAI,GAAG,KAAKpxC,SAAL,EAAX;AACA,SAAK2E,IAAL;AACAysC,IAAAA,IAAI,GAAG,KAAK/hC,gBAAL,CAAsB+hC,IAAtB,EAA4B,KAA5B,CAAP;;AAEA,QAAI,KAAK7pC,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAJ,EAAyB;AACvB,YAAM69C,QAAQ,GAAG,KAAKZ,iBAAL,CAAuBz2C,IAAvB,EAA6Bw2C,IAA7B,EAAmC,QAAnC,CAAjB;;AAEA,UAAI,CAAC,KAAK9uC,KAAL,CAAW6tB,kBAAZ,IAAkC,CAAC,KAAK5wB,KAAL,CAAW2lC,eAAlD,EAAmE;AACjE,YAAIp0B,KAAK,GAAG,0CAAZ;;AAEA,YAAI,KAAK4F,SAAL,CAAe,iBAAf,CAAJ,EAAuC;AACrC5F,UAAAA,KAAK,IAAI,sBAAT;AACD;;AAED,aAAKhU,KAAL,CAAWm1C,QAAQ,CAACl2C,KAApB,EAA2B+U,KAA3B;AACD;;AAED,aAAOmhC,QAAP;AACD;;AAEDr3C,IAAAA,IAAI,CAAC8c,MAAL,GAAc,KAAK+3B,eAAL,EAAd;;AAEA,QAAI70C,IAAI,CAAC8c,MAAL,CAAY7c,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,WAAKiC,KAAL,CAAWlC,IAAI,CAAC8c,MAAL,CAAY3b,KAAvB,EAA8B,iCAA9B;AACD,KAFD,MAEO,IAAInB,IAAI,CAAC8c,MAAL,CAAY7c,IAAZ,KAAqB,0BAArB,IAAmDD,IAAI,CAAC8c,MAAL,CAAY7c,IAAZ,KAAqB,wBAA5E,EAAsG;AAC3G,WAAKiC,KAAL,CAAW,KAAKyC,KAAL,CAAWsD,UAAtB,EAAkC,yDAAlC;AACD,KAFM,MAEA,IAAI,KAAK0E,GAAL,CAASrU,KAAK,CAACoB,WAAf,CAAJ,EAAiC;AACtC,WAAKwI,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,yDAA7B;AACD;;AAED,SAAKwc,iBAAL,CAAuB3d,IAAvB;AACA,WAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAED2d,EAAAA,iBAAiB,CAAC3d,IAAD,EAAO;AACtB,QAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAJ,EAA4B;AAC1B,YAAMg9B,IAAI,GAAG,KAAK8f,aAAL,CAAmB19C,KAAK,CAACa,MAAzB,CAAb;AACA,WAAKmgB,gBAAL,CAAsB4c,IAAtB;AACAl2B,MAAAA,IAAI,CAACsY,SAAL,GAAiB4d,IAAjB;AACD,KAJD,MAIO;AACLl2B,MAAAA,IAAI,CAACsY,SAAL,GAAiB,EAAjB;AACD;AACF;;AAEDg/B,EAAAA,oBAAoB,CAACC,QAAD,EAAW;AAC7B,UAAMhE,IAAI,GAAG,KAAKnuC,SAAL,EAAb;;AAEA,QAAI,KAAKT,KAAL,CAAW5N,KAAX,KAAqB,IAAzB,EAA+B;AAC7B,UAAI,CAACwgD,QAAL,EAAe;AACb,aAAKr1C,KAAL,CAAW,KAAKyC,KAAL,CAAW0mC,6BAAX,IAA4C,CAAvD,EAA0D,qCAA1D;AACD,OAFD,MAEO;AACL,aAAK1mC,KAAL,CAAW0mC,6BAAX,GAA2C,IAA3C;AACD;AACF;;AAEDkI,IAAAA,IAAI,CAACx8C,KAAL,GAAa;AACXuK,MAAAA,GAAG,EAAE,KAAK0G,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWxD,KAA5B,EAAmC,KAAKwD,KAAL,CAAWlD,GAA9C,EAAmDguC,OAAnD,CAA2D,QAA3D,EAAqE,IAArE,CADM;AAEX+H,MAAAA,MAAM,EAAE,KAAK7yC,KAAL,CAAW5N;AAFR,KAAb;AAIA,SAAKgT,IAAL;AACAwpC,IAAAA,IAAI,CAACkE,IAAL,GAAY,KAAK1qC,KAAL,CAAWzU,KAAK,CAACwB,SAAjB,CAAZ;AACA,WAAO,KAAKuL,UAAL,CAAgBkuC,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDpX,EAAAA,aAAa,CAACob,QAAD,EAAW;AACtB,UAAMv3C,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;AACA/J,IAAAA,IAAI,CAACo8B,WAAL,GAAmB,EAAnB;AACA,QAAIsb,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAAb;AACAv3C,IAAAA,IAAI,CAAC23C,MAAL,GAAc,CAACD,MAAD,CAAd;;AAEA,WAAO,CAACA,MAAM,CAACD,IAAf,EAAqB;AACnB,WAAKvrC,MAAL,CAAY5T,KAAK,CAACyB,YAAlB;AACAiG,MAAAA,IAAI,CAACo8B,WAAL,CAAiB53B,IAAjB,CAAsB,KAAKoI,eAAL,EAAtB;AACA,WAAKV,MAAL,CAAY5T,KAAK,CAACU,MAAlB;AACAgH,MAAAA,IAAI,CAAC23C,MAAL,CAAYnzC,IAAZ,CAAiBkzC,MAAM,GAAG,KAAKJ,oBAAL,CAA0BC,QAA1B,CAA1B;AACD;;AAED,SAAKxtC,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED6yC,EAAAA,QAAQ,CAACttC,SAAD,EAAYb,sBAAZ,EAAoC;AAC1C,UAAMkzC,QAAQ,GAAGhhD,MAAM,CAAC8gC,MAAP,CAAc,IAAd,CAAjB;AACA,QAAIwb,KAAK,GAAG,IAAZ;AACA,UAAMlzC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACyC,UAAL,GAAkB,EAAlB;AACA,SAAKsH,IAAL;;AAEA,WAAO,CAAC,KAAK4C,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAR,EAAgC;AAC9B,UAAIk6C,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB;;AAEA,YAAI,KAAK2T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAJ,EAA8B;AAC5B,eAAKg4C,QAAL,CAAchxC,IAAd,EAAoB,eAApB,EAAqC,KAAK2E,KAAL,CAAW0J,YAAhD;AACA,eAAKtE,IAAL;AACA;AACD;AACF;;AAED,YAAMjI,IAAI,GAAG,KAAK+1C,iBAAL,CAAuBtyC,SAAvB,EAAkCb,sBAAlC,CAAb;AACA,UAAI,CAACa,SAAL,EAAgB,KAAK5C,oBAAL,CAA0Bb,IAA1B,EAAgC81C,QAAhC;;AAEhB,UAAI91C,IAAI,CAACgB,SAAT,EAAoB;AAClB,aAAKkuC,QAAL,CAAclvC,IAAd,EAAoB,WAApB,EAAiC,IAAjC;AACD;;AAED9B,MAAAA,IAAI,CAACyC,UAAL,CAAgB+B,IAAhB,CAAqB1C,IAArB;AACD;;AAED,QAAI,CAAC,KAAKiL,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,CAAD,IAAyBy9C,QAAQ,CAACz2C,KAAT,KAAmBgK,SAAhD,EAA2D;AACzD,WAAKjJ,KAAL,CAAW01C,QAAQ,CAACz2C,KAApB,EAA2B,oCAA3B;AACD;;AAED,WAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsBuF,SAAS,GAAG,eAAH,GAAqB,kBAApD,CAAP;AACD;;AAEDuyC,EAAAA,WAAW,CAACh2C,IAAD,EAAO;AAChB,WAAO,CAACA,IAAI,CAACe,QAAN,IAAkBf,IAAI,CAACiB,GAAL,CAAS9C,IAAT,KAAkB,YAApC,IAAoD6B,IAAI,CAACiB,GAAL,CAAS9K,IAAT,KAAkB,OAAtE,KAAkF,KAAK8U,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK8U,KAAL,CAAWzU,KAAK,CAACC,GAAjB,CAA1B,IAAmD,KAAKwU,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAnD,IAA+E,KAAKqU,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAA/E,IAA6G,KAAK+L,KAAL,CAAW1E,IAAX,CAAgBvI,OAA7H,IAAwI,KAAKqV,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,CAA1N,KAAqP,CAAC,KAAK87B,qBAAL,EAA7P;AACD;;AAED2gB,EAAAA,iBAAiB,CAACtyC,SAAD,EAAYb,sBAAZ,EAAoC;AACnD,QAAIi9B,UAAU,GAAG,EAAjB;;AAEA,QAAI,KAAK50B,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAJ,EAA0B;AACxB,UAAI,KAAK8hB,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,aAAK5Z,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,gEAA7B;AACD;;AAED,aAAO,KAAK4L,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAP,EAA6B;AAC3B2nC,QAAAA,UAAU,CAACn9B,IAAX,CAAgB,KAAK2uC,cAAL,EAAhB;AACD;AACF;;AAED,UAAMrxC,IAAI,GAAG,KAAKsD,SAAL,EAAb;AACA,QAAI5G,WAAW,GAAG,KAAlB;AACA,QAAID,OAAO,GAAG,KAAd;AACA,QAAIqG,QAAJ;AACA,QAAIC,QAAJ;;AAEA,QAAI,KAAKkI,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AAC9B,UAAI8nC,UAAU,CAAC1/B,MAAf,EAAuB,KAAK2M,UAAL;;AAEvB,UAAIrJ,SAAJ,EAAe;AACb,aAAKwE,IAAL;AACAjI,QAAAA,IAAI,CAAC6R,QAAL,GAAgB,KAAKvG,eAAL,EAAhB;AACA,aAAKwuB,mBAAL,CAAyB,GAAzB;AACA,eAAO,KAAKv2B,UAAL,CAAgBvD,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED,aAAO,KAAK6wC,WAAL,EAAP;AACD;;AAED,QAAIhR,UAAU,CAAC1/B,MAAf,EAAuB;AACrBH,MAAAA,IAAI,CAAC6/B,UAAL,GAAkBA,UAAlB;AACAA,MAAAA,UAAU,GAAG,EAAb;AACD;;AAED7/B,IAAAA,IAAI,CAAC3B,MAAL,GAAc,KAAd;;AAEA,QAAIoF,SAAS,IAAIb,sBAAjB,EAAyC;AACvCE,MAAAA,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAAtB;AACA0D,MAAAA,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAAtB;AACD;;AAED,QAAI,CAACU,SAAL,EAAgB;AACd/G,MAAAA,WAAW,GAAG,KAAKmO,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAd;AACD;;AAED,UAAMoK,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;AACA,SAAKyU,iBAAL,CAAuBnY,IAAvB;;AAEA,QAAI,CAACyD,SAAD,IAAc,CAACC,WAAf,IAA8B,CAAChH,WAA/B,IAA8C,KAAKs5C,WAAL,CAAiBh2C,IAAjB,CAAlD,EAA0E;AACxEvD,MAAAA,OAAO,GAAG,IAAV;AACAC,MAAAA,WAAW,GAAG,KAAKmO,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAd;AACA,WAAK6e,iBAAL,CAAuBnY,IAAvB;AACD,KAJD,MAIO;AACLvD,MAAAA,OAAO,GAAG,KAAV;AACD;;AAED,SAAK2b,iBAAL,CAAuBpY,IAAvB,EAA6B8C,QAA7B,EAAuCC,QAAvC,EAAiDrG,WAAjD,EAA8DD,OAA9D,EAAuEgH,SAAvE,EAAkFb,sBAAlF,EAA0Gc,WAA1G;AACA,WAAO1D,IAAP;AACD;;AAEDi2C,EAAAA,sBAAsB,CAACj2C,IAAD,EAAOyD,SAAP,EAAkB;AACtC,WAAO,CAACA,SAAD,IAAc,CAACzD,IAAI,CAACe,QAApB,IAAgCf,IAAI,CAACiB,GAAL,CAAS9C,IAAT,KAAkB,YAAlD,KAAmE6B,IAAI,CAACiB,GAAL,CAAS9K,IAAT,KAAkB,KAAlB,IAA2B6J,IAAI,CAACiB,GAAL,CAAS9K,IAAT,KAAkB,KAAhH,MAA2H,KAAK8U,KAAL,CAAWzU,KAAK,CAACI,MAAjB,KAA4B,KAAKqU,KAAL,CAAWzU,KAAK,CAACC,GAAjB,CAA5B,IAAqD,KAAKwU,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAArD,IAAmF,KAAKmU,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAnF,IAA6G,CAAC,CAAC,KAAK0M,KAAL,CAAW1E,IAAX,CAAgBvI,OAA1P,CAAP;AACD;;AAEDssC,EAAAA,iCAAiC,CAAC7jC,MAAD,EAAS;AACxC,WAAOA,MAAM,CAACD,IAAP,KAAgB,KAAhB,GAAwB,CAAxB,GAA4B,CAAnC;AACD;;AAED2B,EAAAA,uBAAuB,CAAC1B,MAAD,EAAS;AAC9B,UAAM4B,UAAU,GAAG,KAAKiiC,iCAAL,CAAuC7jC,MAAvC,CAAnB;AACA,UAAMgB,KAAK,GAAGhB,MAAM,CAACgB,KAArB;;AAEA,QAAIhB,MAAM,CAAC6B,MAAP,CAAcC,MAAd,KAAyBF,UAA7B,EAAyC;AACvC,UAAI5B,MAAM,CAACD,IAAP,KAAgB,KAApB,EAA2B;AACzB,aAAKgC,KAAL,CAAWf,KAAX,EAAkB,4CAAlB;AACD,OAFD,MAEO;AACL,aAAKe,KAAL,CAAWf,KAAX,EAAkB,+CAAlB;AACD;AACF;;AAED,QAAIhB,MAAM,CAACD,IAAP,KAAgB,KAAhB,IAAyBC,MAAM,CAAC6B,MAAP,CAAc7B,MAAM,CAAC6B,MAAP,CAAcC,MAAd,GAAuB,CAArC,EAAwChC,IAAxC,KAAiD,aAA9E,EAA6F;AAC3F,WAAKiC,KAAL,CAAWf,KAAX,EAAkB,uDAAlB;AACD;AACF;;AAEDmE,EAAAA,iBAAiB,CAACxD,IAAD,EAAOtD,WAAP,EAAoBD,OAApB,EAA6BgH,SAA7B,EAAwCC,WAAxC,EAAqD;AACpE,QAAIjH,OAAO,IAAIC,WAAX,IAA0B,KAAKuO,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA9B,EAAwD;AACtD,UAAIqM,SAAJ,EAAe,KAAKqJ,UAAL;AACf9M,MAAAA,IAAI,CAAC5B,IAAL,GAAY,QAAZ;AACA4B,MAAAA,IAAI,CAAC3B,MAAL,GAAc,IAAd;AACA,aAAO,KAAKmE,WAAL,CAAiBxC,IAAjB,EAAuBtD,WAAvB,EAAoCD,OAApC,EAA6C,KAA7C,EAAoD,KAApD,EAA2D,cAA3D,CAAP;AACD;;AAED,QAAI,CAACiH,WAAD,IAAgB,KAAKuyC,sBAAL,CAA4Bj2C,IAA5B,EAAkCyD,SAAlC,CAApB,EAAkE;AAChE,UAAI/G,WAAW,IAAID,OAAnB,EAA4B,KAAKqQ,UAAL;AAC5B9M,MAAAA,IAAI,CAAC5B,IAAL,GAAY4B,IAAI,CAACiB,GAAL,CAAS9K,IAArB;AACA,WAAKgiB,iBAAL,CAAuBnY,IAAvB;AACA,WAAKwC,WAAL,CAAiBxC,IAAjB,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,KAA5C,EAAmD,cAAnD;AACA,WAAKD,uBAAL,CAA6BC,IAA7B;AACA,aAAOA,IAAP;AACD;AACF;;AAED2D,EAAAA,mBAAmB,CAAC3D,IAAD,EAAO8C,QAAP,EAAiBC,QAAjB,EAA2BU,SAA3B,EAAsCb,sBAAtC,EAA8D;AAC/E5C,IAAAA,IAAI,CAACgB,SAAL,GAAiB,KAAjB;;AAEA,QAAI,KAAK6J,GAAL,CAASrU,KAAK,CAACgB,KAAf,CAAJ,EAA2B;AACzBwI,MAAAA,IAAI,CAAC/K,KAAL,GAAawO,SAAS,GAAG,KAAK6U,iBAAL,CAAuB,KAAKzV,KAAL,CAAWxD,KAAlC,EAAyC,KAAKwD,KAAL,CAAWE,QAApD,CAAH,GAAmE,KAAKiS,gBAAL,CAAsB,KAAtB,EAA6BpS,sBAA7B,CAAzF;AACA,aAAO,KAAKW,UAAL,CAAgBvD,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,QAAI,CAACA,IAAI,CAACe,QAAN,IAAkBf,IAAI,CAACiB,GAAL,CAAS9C,IAAT,KAAkB,YAAxC,EAAsD;AACpD,WAAKob,iBAAL,CAAuBvZ,IAAI,CAACiB,GAAL,CAAS9K,IAAhC,EAAsC6J,IAAI,CAACiB,GAAL,CAAS5B,KAA/C,EAAsD,IAAtD,EAA4D,IAA5D;;AAEA,UAAIoE,SAAJ,EAAe;AACbzD,QAAAA,IAAI,CAAC/K,KAAL,GAAa,KAAKqjB,iBAAL,CAAuBxV,QAAvB,EAAiCC,QAAjC,EAA2C/C,IAAI,CAACiB,GAAL,CAASmY,OAAT,EAA3C,CAAb;AACD,OAFD,MAEO,IAAI,KAAKnO,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,KAAwBuK,sBAA5B,EAAoD;AACzD,YAAI,CAACA,sBAAsB,CAACvD,KAA5B,EAAmC;AACjCuD,UAAAA,sBAAsB,CAACvD,KAAvB,GAA+B,KAAKwD,KAAL,CAAWxD,KAA1C;AACD;;AAEDW,QAAAA,IAAI,CAAC/K,KAAL,GAAa,KAAKqjB,iBAAL,CAAuBxV,QAAvB,EAAiCC,QAAjC,EAA2C/C,IAAI,CAACiB,GAAL,CAASmY,OAAT,EAA3C,CAAb;AACD,OANM,MAMA;AACLpZ,QAAAA,IAAI,CAAC/K,KAAL,GAAa+K,IAAI,CAACiB,GAAL,CAASmY,OAAT,EAAb;AACD;;AAEDpZ,MAAAA,IAAI,CAACgB,SAAL,GAAiB,IAAjB;AACA,aAAO,KAAKuC,UAAL,CAAgBvD,IAAhB,EAAsB,gBAAtB,CAAP;AACD;AACF;;AAEDoY,EAAAA,iBAAiB,CAACpY,IAAD,EAAO8C,QAAP,EAAiBC,QAAjB,EAA2BrG,WAA3B,EAAwCD,OAAxC,EAAiDgH,SAAjD,EAA4Db,sBAA5D,EAAoFc,WAApF,EAAiG;AAChH,UAAMxF,IAAI,GAAG,KAAKsF,iBAAL,CAAuBxD,IAAvB,EAA6BtD,WAA7B,EAA0CD,OAA1C,EAAmDgH,SAAnD,EAA8DC,WAA9D,KAA8E,KAAKC,mBAAL,CAAyB3D,IAAzB,EAA+B8C,QAA/B,EAAyCC,QAAzC,EAAmDU,SAAnD,EAA8Db,sBAA9D,CAA3F;AACA,QAAI,CAAC1E,IAAL,EAAW,KAAK4O,UAAL;AACX,WAAO5O,IAAP;AACD;;AAEDia,EAAAA,iBAAiB,CAACnY,IAAD,EAAO;AACtB,QAAI,KAAK6K,GAAL,CAASrU,KAAK,CAACM,QAAf,CAAJ,EAA8B;AAC5BkJ,MAAAA,IAAI,CAACe,QAAL,GAAgB,IAAhB;AACAf,MAAAA,IAAI,CAACiB,GAAL,GAAW,KAAK+T,gBAAL,EAAX;AACA,WAAK5K,MAAL,CAAY5T,KAAK,CAACO,QAAlB;AACD,KAJD,MAIO;AACL,YAAMm/C,iBAAiB,GAAG,KAAKrzC,KAAL,CAAW+vB,cAArC;AACA,WAAK/vB,KAAL,CAAW+vB,cAAX,GAA4B,IAA5B;AACA5yB,MAAAA,IAAI,CAACiB,GAAL,GAAW,KAAKgK,KAAL,CAAWzU,KAAK,CAACC,GAAjB,KAAyB,KAAKwU,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAzB,GAAoD,KAAK+L,aAAL,EAApD,GAA2E,KAAKqwC,qBAAL,EAAtF;;AAEA,UAAIhzC,IAAI,CAACiB,GAAL,CAAS9C,IAAT,KAAkB,aAAtB,EAAqC;AACnC6B,QAAAA,IAAI,CAACe,QAAL,GAAgB,KAAhB;AACD;;AAED,WAAK8B,KAAL,CAAW+vB,cAAX,GAA4BsjB,iBAA5B;AACD;;AAED,WAAOl2C,IAAI,CAACiB,GAAZ;AACD;;AAEDpB,EAAAA,YAAY,CAAC3B,IAAD,EAAOzB,OAAP,EAAgB;AAC1ByB,IAAAA,IAAI,CAACmN,EAAL,GAAU,IAAV;AACAnN,IAAAA,IAAI,CAACi4C,SAAL,GAAiB,KAAjB;AACAj4C,IAAAA,IAAI,CAACk4C,KAAL,GAAa,CAAC,CAAC35C,OAAf;AACD;;AAED+F,EAAAA,WAAW,CAACtE,IAAD,EAAOxB,WAAP,EAAoBD,OAApB,EAA6B6F,aAA7B,EAA4Ca,gBAA5C,EAA8DhF,IAA9D,EAAoEiF,YAAY,GAAG,KAAnF,EAA0F;AACnG,UAAM8vC,WAAW,GAAG,KAAKrwC,KAAL,CAAWomC,QAA/B;AACA,UAAMkK,WAAW,GAAG,KAAKtwC,KAAL,CAAWqmC,QAA/B;AACA,SAAKrmC,KAAL,CAAWomC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKpmC,KAAL,CAAWqmC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKrpC,YAAL,CAAkB3B,IAAlB,EAAwBzB,OAAxB;AACAyB,IAAAA,IAAI,CAACi4C,SAAL,GAAiB,CAAC,CAACz5C,WAAnB;AACA,UAAM+c,cAAc,GAAGnX,aAAvB;AACA,SAAKsD,KAAL,CAAWqH,KAAX,CAAiBzQ,aAAa,CAACC,OAAD,EAAUyB,IAAI,CAACi4C,SAAf,CAAb,GAAyCh6C,WAAzC,IAAwDiH,YAAY,GAAG/G,WAAH,GAAiB,CAArF,KAA2F8G,gBAAgB,GAAG/G,kBAAH,GAAwB,CAAnI,CAAjB;AACA,SAAKod,mBAAL,CAAyBtb,IAAzB,EAA+Bub,cAA/B;AACA,SAAKm2B,8BAAL;AACA,SAAKp8B,0BAAL,CAAgCtV,IAAhC,EAAsCC,IAAtC,EAA4C,IAA5C;AACA,SAAKyH,KAAL,CAAWwH,IAAX;AACA,SAAKvK,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACA,SAAKrwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;AACA,WAAOj1C,IAAP;AACD;;AAED6d,EAAAA,oBAAoB,CAAC7d,IAAD,EAAOgC,MAAP,EAAezD,OAAf,EAAwB8a,gBAAxB,EAA0C;AAC5D,SAAK3R,KAAL,CAAWqH,KAAX,CAAiBzQ,aAAa,CAACC,OAAD,EAAU,KAAV,CAAb,GAAgCR,WAAjD;AACA,SAAK4D,YAAL,CAAkB3B,IAAlB,EAAwBzB,OAAxB;AACA,UAAMw2C,yBAAyB,GAAG,KAAKpwC,KAAL,CAAWylC,sBAA7C;AACA,UAAM4K,WAAW,GAAG,KAAKrwC,KAAL,CAAWomC,QAA/B;AACA,UAAMkK,WAAW,GAAG,KAAKtwC,KAAL,CAAWqmC,QAA/B;AACA,SAAKrmC,KAAL,CAAWylC,sBAAX,GAAoC,KAApC;AACA,SAAKzlC,KAAL,CAAWomC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKpmC,KAAL,CAAWqmC,QAAX,GAAsB,CAAC,CAAvB;AACA,QAAIhpC,MAAJ,EAAY,KAAKsa,0BAAL,CAAgCtc,IAAhC,EAAsCgC,MAAtC,EAA8CqX,gBAA9C;AACZ,SAAKvU,iBAAL,CAAuB9E,IAAvB,EAA6B,IAA7B;AACA,SAAK0H,KAAL,CAAWwH,IAAX;AACA,SAAKvK,KAAL,CAAWylC,sBAAX,GAAoC2K,yBAApC;AACA,SAAKpwC,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACA,SAAKrwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;AACA,WAAO,KAAK5vC,UAAL,CAAgBrF,IAAhB,EAAsB,yBAAtB,CAAP;AACD;;AAEDsc,EAAAA,0BAA0B,CAACtc,IAAD,EAAOgC,MAAP,EAAeqX,gBAAf,EAAiC;AACzDrZ,IAAAA,IAAI,CAACgC,MAAL,GAAc,KAAKuV,gBAAL,CAAsBvV,MAAtB,EAA8B,IAA9B,EAAoC,2BAApC,EAAiEqX,gBAAjE,CAAd;AACD;;AAEDnW,EAAAA,YAAY,CAAClD,IAAD,EAAO;AACjB,UAAMmD,gBAAgB,GAAGnD,IAAI,CAACoD,IAAL,CAAUnD,IAAV,KAAmB,gBAA5C;;AAEA,QAAIkD,gBAAgB,IAAInD,IAAI,CAACoD,IAAL,CAAUU,UAAV,CAAqB7B,MAA7C,EAAqD;AACnD,WAAK,IAAI8e,GAAG,GAAG,CAAV,EAAao3B,qBAAqB,GAAGn4C,IAAI,CAACoD,IAAL,CAAUU,UAApD,EAAgEid,GAAG,GAAGo3B,qBAAqB,CAACl2C,MAA5F,EAAoG8e,GAAG,EAAvG,EAA2G;AACzG,cAAMhgB,SAAS,GAAGo3C,qBAAqB,CAACp3B,GAAD,CAAvC;;AAEA,YAAIhgB,SAAS,CAAChK,KAAV,CAAgBA,KAAhB,KAA0B,YAA9B,EAA4C;AAC1C,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAP;AACD;;AAEDue,EAAAA,0BAA0B,CAACtV,IAAD,EAAOC,IAAP,EAAa+E,QAAQ,GAAG,KAAxB,EAA+B;AACvD,SAAKF,iBAAL,CAAuB9E,IAAvB,EAA6B,KAA7B,EAAoCgF,QAApC;AACA,SAAKK,UAAL,CAAgBrF,IAAhB,EAAsBC,IAAtB;AACD;;AAED6E,EAAAA,iBAAiB,CAAC9E,IAAD,EAAO+E,eAAP,EAAwBC,QAAQ,GAAG,KAAnC,EAA0C;AACzD,UAAMozC,YAAY,GAAGrzC,eAAe,IAAI,CAAC,KAAKgI,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAzC;AACA,UAAMu/C,SAAS,GAAG,KAAK1zC,KAAL,CAAWyD,MAA7B;AACA,QAAIkwC,SAAS,GAAG,KAAhB;AACA,UAAMC,eAAe,GAAG,KAAK5zC,KAAL,CAAWwlC,YAAnC;AACA,SAAKxlC,KAAL,CAAWwlC,YAAX,GAA0B,KAA1B;;AAEA,QAAIiO,YAAJ,EAAkB;AAChBp4C,MAAAA,IAAI,CAACoD,IAAL,GAAY,KAAK0T,gBAAL,EAAZ;AACA,WAAKW,WAAL,CAAiBzX,IAAjB,EAAuB,KAAvB,EAA8B+E,eAA9B,EAA+C,KAA/C;AACD,KAHD,MAGO;AACL,YAAMyzC,SAAS,GAAG,CAAC,KAAKC,iBAAL,CAAuBz4C,IAAI,CAACgC,MAA5B,CAAnB;;AAEA,UAAI,CAACq2C,SAAD,IAAcG,SAAlB,EAA6B;AAC3BF,QAAAA,SAAS,GAAG,KAAK3G,eAAL,CAAqB,KAAKhtC,KAAL,CAAWlD,GAAhC,CAAZ;;AAEA,YAAI62C,SAAS,IAAIE,SAAjB,EAA4B;AAC1B,gBAAME,QAAQ,GAAG,CAAC14C,IAAI,CAACE,IAAL,KAAc,QAAd,IAA0BF,IAAI,CAACE,IAAL,KAAc,aAAzC,KAA2D,CAAC,CAACF,IAAI,CAAC+C,GAAlE,GAAwE/C,IAAI,CAAC+C,GAAL,CAAStB,GAAjF,GAAuFzB,IAAI,CAACmB,KAA7G;AACA,eAAKe,KAAL,CAAWw2C,QAAX,EAAqB,2EAArB;AACD;AACF;;AAED,YAAM3C,SAAS,GAAG,KAAKpxC,KAAL,CAAWkmC,MAA7B;AACA,WAAKlmC,KAAL,CAAWkmC,MAAX,GAAoB,EAApB;AACA,UAAIyN,SAAJ,EAAe,KAAK3zC,KAAL,CAAWyD,MAAX,GAAoB,IAApB;AACf,WAAKqP,WAAL,CAAiBzX,IAAjB,EAAuB,CAACq4C,SAAD,IAAc,CAACC,SAAf,IAA4B,CAACvzC,eAA7B,IAAgD,CAACC,QAAjD,IAA6D,CAACwzC,SAArF,EAAgGzzC,eAAhG,EAAiH,CAACszC,SAAD,IAAcC,SAA/H;AACAt4C,MAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKwhC,UAAL,CAAgB,IAAhB,EAAsB,KAAtB,CAAZ;AACA,WAAKjgC,KAAL,CAAWkmC,MAAX,GAAoBkL,SAApB;AACD;;AAED,SAAKpxC,KAAL,CAAWwlC,YAAX,GAA0BoO,eAA1B;;AAEA,QAAI,KAAK5zC,KAAL,CAAWyD,MAAX,IAAqBpI,IAAI,CAACmN,EAA9B,EAAkC;AAChC,WAAKhL,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwBvN,YAAxB,EAAsCuL,SAAtC,EAAiD,eAAjD,EAAkEA,SAAlE,EAA6E,CAACktC,SAAD,IAAcC,SAA3F;AACD;;AAED,SAAK3zC,KAAL,CAAWyD,MAAX,GAAoBiwC,SAApB;AACD;;AAEDI,EAAAA,iBAAiB,CAACz2C,MAAD,EAAS;AACxB,SAAK,IAAI0H,CAAC,GAAG,CAAR,EAAWolC,GAAG,GAAG9sC,MAAM,CAACC,MAA7B,EAAqCyH,CAAC,GAAGolC,GAAzC,EAA8CplC,CAAC,EAA/C,EAAmD;AACjD,UAAI1H,MAAM,CAAC0H,CAAD,CAAN,CAAUzJ,IAAV,KAAmB,YAAvB,EAAqC,OAAO,KAAP;AACtC;;AAED,WAAO,IAAP;AACD;;AAEDwX,EAAAA,WAAW,CAACzX,IAAD,EAAOuc,eAAP,EAAwBC,eAAxB,EAAyC42B,iBAAiB,GAAG,IAA7D,EAAmE;AAC5E,UAAMuF,QAAQ,GAAG/hD,MAAM,CAAC8gC,MAAP,CAAc,IAAd,CAAjB;;AAEA,SAAK,IAAIhuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1J,IAAI,CAACgC,MAAL,CAAYC,MAAhC,EAAwCyH,CAAC,EAAzC,EAA6C;AAC3C,WAAKvH,SAAL,CAAenC,IAAI,CAACgC,MAAL,CAAY0H,CAAZ,CAAf,EAA+BrK,QAA/B,EAAyCkd,eAAe,GAAG,IAAH,GAAUo8B,QAAlE,EAA4E,yBAA5E,EAAuGxtC,SAAvG,EAAkHioC,iBAAlH;AACD;AACF;;AAED4C,EAAAA,aAAa,CAAClD,KAAD,EAAQE,UAAR,EAAoBtuC,sBAApB,EAA4C8wC,YAA5C,EAA0D;AACrE,UAAMvC,IAAI,GAAG,EAAb;AACA,QAAIC,KAAK,GAAG,IAAZ;;AAEA,WAAO,CAAC,KAAKvmC,GAAL,CAASmmC,KAAT,CAAR,EAAyB;AACvB,UAAII,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB;;AAEA,YAAI,KAAK2T,KAAL,CAAW+lC,KAAX,CAAJ,EAAuB;AACrB,cAAI0C,YAAJ,EAAkB;AAChB,iBAAKxE,QAAL,CAAcwE,YAAd,EAA4B,eAA5B,EAA6C,KAAK7wC,KAAL,CAAW0J,YAAxD;AACD;;AAED,eAAKtE,IAAL;AACA;AACD;AACF;;AAEDkpC,MAAAA,IAAI,CAACzuC,IAAL,CAAU,KAAKmxC,iBAAL,CAAuB3C,UAAvB,EAAmCtuC,sBAAnC,CAAV;AACD;;AAED,WAAOuuC,IAAP;AACD;;AAED0C,EAAAA,iBAAiB,CAAC3C,UAAD,EAAatuC,sBAAb,EAAqCqR,gBAArC,EAAuDw/B,gBAAvD,EAAyE;AACxF,QAAIzT,GAAJ;;AAEA,QAAIkR,UAAU,IAAI,KAAKjmC,KAAL,CAAWzU,KAAK,CAACc,KAAjB,CAAlB,EAA2C;AACzC0oC,MAAAA,GAAG,GAAG,IAAN;AACD,KAFD,MAEO,IAAI,KAAK/0B,KAAL,CAAWzU,KAAK,CAACuB,QAAjB,CAAJ,EAAgC;AACrC,YAAMk9C,kBAAkB,GAAG,KAAKpyC,KAAL,CAAWxD,KAAtC;AACA,YAAM61C,kBAAkB,GAAG,KAAKryC,KAAL,CAAWE,QAAtC;AACAi9B,MAAAA,GAAG,GAAG,KAAKlqB,cAAL,CAAoB,KAAK+6B,WAAL,CAAiBjuC,sBAAjB,EAAyCqR,gBAAzC,CAApB,EAAgFghC,kBAAhF,EAAoGC,kBAApG,CAAN;AACD,KAJM,MAIA,IAAI,KAAKjqC,KAAL,CAAWzU,KAAK,CAACmB,QAAjB,CAAJ,EAAgC;AACrC,WAAK6jB,YAAL,CAAkB,oBAAlB;;AAEA,UAAI,CAACi4B,gBAAL,EAAuB;AACrB,aAAKrzC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,iCAA7B;AACD;;AAED,YAAMnB,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,WAAK2E,IAAL;AACA+3B,MAAAA,GAAG,GAAG,KAAKz8B,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAN;AACD,KAVM,MAUA;AACL8hC,MAAAA,GAAG,GAAG,KAAKhrB,gBAAL,CAAsB,KAAtB,EAA6BpS,sBAA7B,EAAqD,KAAKkT,cAA1D,EAA0E7B,gBAA1E,CAAN;AACD;;AAED,WAAO+rB,GAAP;AACD;;AAED10B,EAAAA,eAAe,CAAC0D,OAAD,EAAU;AACvB,UAAM9Q,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,UAAMnN,IAAI,GAAG,KAAKohC,mBAAL,CAAyBr5B,IAAI,CAACmB,KAA9B,EAAqC2P,OAArC,CAAb;AACA,WAAO,KAAK2D,gBAAL,CAAsBzU,IAAtB,EAA4B/H,IAA5B,CAAP;AACD;;AAEDwc,EAAAA,gBAAgB,CAACzU,IAAD,EAAO/H,IAAP,EAAa;AAC3B+H,IAAAA,IAAI,CAAC/H,IAAL,GAAYA,IAAZ;AACA+H,IAAAA,IAAI,CAACoB,GAAL,CAASw3C,cAAT,GAA0B3gD,IAA1B;AACA,WAAO,KAAKoN,UAAL,CAAgBrF,IAAhB,EAAsB,YAAtB,CAAP;AACD;;AAEDq5B,EAAAA,mBAAmB,CAAC5vB,GAAD,EAAMqH,OAAN,EAAe;AAChC,QAAI7Y,IAAJ;;AAEA,QAAI,KAAK8U,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1BA,MAAAA,IAAI,GAAG,KAAK0M,KAAL,CAAW5N,KAAlB;AACD,KAFD,MAEO,IAAI,KAAK4N,KAAL,CAAW1E,IAAX,CAAgBvI,OAApB,EAA6B;AAClCO,MAAAA,IAAI,GAAG,KAAK0M,KAAL,CAAW1E,IAAX,CAAgBvI,OAAvB;;AAEA,UAAI,CAACO,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,UAA9B,MAA8C,KAAK0M,KAAL,CAAWsD,UAAX,KAA0B,KAAKtD,KAAL,CAAW0J,YAAX,GAA0B,CAApD,IAAyD,KAAKrG,KAAL,CAAW6Q,UAAX,CAAsB,KAAKlU,KAAL,CAAW0J,YAAjC,MAAmD,EAA1J,CAAJ,EAAmK;AACjK,aAAK1J,KAAL,CAAWwC,OAAX,CAAmBG,GAAnB;AACD;AACF,KANM,MAMA;AACL,YAAM,KAAKsH,UAAL,EAAN;AACD;;AAED,QAAIkC,OAAJ,EAAa;AACX,WAAKnM,KAAL,CAAW1E,IAAX,GAAkB3H,KAAK,CAACL,IAAxB;AACD,KAFD,MAEO;AACL,WAAKojB,iBAAL,CAAuBpjB,IAAvB,EAA6B,KAAK0M,KAAL,CAAWxD,KAAxC,EAA+C,CAAC,CAAC,KAAKwD,KAAL,CAAW1E,IAAX,CAAgBvI,OAAjE,EAA0E,KAA1E;AACD;;AAED,SAAKqS,IAAL;AACA,WAAO9R,IAAP;AACD;;AAEDojB,EAAAA,iBAAiB,CAAC3S,IAAD,EAAO7D,QAAP,EAAiB89B,aAAjB,EAAgCh9B,SAAhC,EAA2C;AAC1D,QAAI,KAAK+B,KAAL,CAAWC,WAAX,IAA0Be,IAAI,KAAK,OAAvC,EAAgD;AAC9C,WAAKxG,KAAL,CAAW2C,QAAX,EAAqB,sDAArB;AACA;AACD;;AAED,QAAI6D,IAAI,KAAK,OAAb,EAAsB;AACpB,UAAI,KAAKhB,KAAL,CAAW0tB,OAAf,EAAwB;AACtB,aAAKlzB,KAAL,CAAW2C,QAAX,EAAqB,4DAArB;AACA;AACD;;AAED,UAAI,KAAKF,KAAL,CAAWqmC,QAAX,KAAwB,CAAC,CAAzB,KAA+B,KAAKrmC,KAAL,CAAWylC,sBAAX,IAAqC,KAAKqK,cAAL,EAApE,CAAJ,EAAgG;AAC9F,aAAK9vC,KAAL,CAAWqmC,QAAX,GAAsB,KAAKrmC,KAAL,CAAWxD,KAAjC;AACD;AACF;;AAED,QAAI,KAAKwD,KAAL,CAAW2lC,eAAX,IAA8B5hC,IAAI,KAAK,WAA3C,EAAwD;AACtD,WAAKxG,KAAL,CAAW2C,QAAX,EAAqB,uDAArB;AACA;AACD;;AAED,QAAI89B,aAAa,IAAI35B,SAAS,CAACN,IAAD,CAA9B,EAAsC;AACpC,WAAKxG,KAAL,CAAW2C,QAAX,EAAsB,uBAAsB6D,IAAK,GAAjD;AACA;AACD;;AAED,UAAMmwC,YAAY,GAAG,CAAC,KAAKl0C,KAAL,CAAWyD,MAAZ,GAAqBK,cAArB,GAAsC9C,SAAS,GAAGoD,wBAAH,GAA8BH,oBAAlG;;AAEA,QAAIiwC,YAAY,CAACnwC,IAAD,EAAO,KAAKC,QAAZ,CAAhB,EAAuC;AACrC,UAAI,CAAC,KAAKjB,KAAL,CAAW0tB,OAAZ,IAAuB1sB,IAAI,KAAK,OAApC,EAA6C;AAC3C,aAAKxG,KAAL,CAAW2C,QAAX,EAAqB,uDAArB;AACD,OAFD,MAEO;AACL,aAAK3C,KAAL,CAAW2C,QAAX,EAAsB,6BAA4B6D,IAAK,GAAvD;AACD;AACF;AACF;;AAED+rC,EAAAA,cAAc,GAAG;AACf,QAAI,KAAK/sC,KAAL,CAAWwtB,UAAf,EAA2B,OAAO,KAAKxtB,KAAL,CAAW0tB,OAAlB;AAC3B,QAAI,KAAKl9B,OAAL,CAAa2uC,yBAAjB,EAA4C,OAAO,IAAP;AAC5C,QAAI,KAAK/qB,SAAL,CAAe,eAAf,CAAJ,EAAqC,OAAO,KAAKnT,QAAZ;AACrC,WAAO,KAAP;AACD;;AAED+rC,EAAAA,UAAU,GAAG;AACX,UAAM10C,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;;AAEA,QAAI,KAAKpF,KAAL,CAAWwlC,YAAf,EAA6B;AAC3B,WAAKjoC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,mDAAvB;AACD,KAFD,MAEO,IAAI,KAAKwD,KAAL,CAAWqmC,QAAX,KAAwB,CAAC,CAA7B,EAAgC;AACrC,WAAKrmC,KAAL,CAAWqmC,QAAX,GAAsBhrC,IAAI,CAACmB,KAA3B;AACD;;AAED,QAAI,KAAKwL,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAJ,EAA0B;AACxB,WAAK8G,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,uFAAvB;AACD;;AAED,QAAI,CAAC,KAAKuG,KAAL,CAAWwtB,UAAZ,IAA0B,CAAC,KAAKh9B,OAAL,CAAa2uC,yBAA5C,EAAuE;AACrE,UAAI,KAAK3P,qBAAL,MAAgC,KAAKnqB,KAAL,CAAWzU,KAAK,CAAC4C,OAAjB,CAAhC,IAA6D,KAAK6R,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAA7D,IAAyF,KAAK6T,KAAL,CAAWzU,KAAK,CAACM,QAAjB,CAAzF,IAAuH,KAAKmU,KAAL,CAAWzU,KAAK,CAACwB,SAAjB,CAAvH,IAAsJ,KAAKiT,KAAL,CAAWzU,KAAK,CAACG,MAAjB,CAAtJ,IAAkL,KAAKsU,KAAL,CAAWzU,KAAK,CAAC+C,KAAjB,CAAlL,IAA6M,KAAKygB,SAAL,CAAe,aAAf,KAAiC,KAAK/O,KAAL,CAAWzU,KAAK,CAAC6C,MAAjB,CAAlP,EAA4Q;AAC1Q,aAAKgtC,2BAAL,GAAmC,IAAnC;AACD,OAFD,MAEO;AACL,aAAKD,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,QAAI,CAAC,KAAKvjC,KAAL,CAAW+lC,SAAhB,EAA2B;AACzB1qC,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAK8oB,eAAL,EAAhB;AACD;;AAED,WAAO,KAAKp3B,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED2zC,EAAAA,UAAU,CAAC79B,IAAD,EAAO;AACf,UAAM9V,IAAI,GAAG,KAAKoF,SAAL,EAAb;;AAEA,QAAI,KAAKT,KAAL,CAAWwlC,YAAf,EAA6B;AAC3B,WAAKjoC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,8CAAvB;AACD,KAFD,MAEO,IAAI,KAAKwD,KAAL,CAAWomC,QAAX,KAAwB,CAAC,CAA7B,EAAgC;AACrC,WAAKpmC,KAAL,CAAWomC,QAAX,GAAsB/qC,IAAI,CAACmB,KAA3B;AACD;;AAED,SAAK4I,IAAL;;AAEA,QAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACe,IAAjB,KAA0B,CAAC,KAAK0T,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,CAAD,IAA2B,CAAC,KAAKuJ,KAAL,CAAW1E,IAAX,CAAgBhJ,UAAtE,IAAoF,KAAKigC,qBAAL,EAAxF,EAAsH;AACpHl3B,MAAAA,IAAI,CAAC84C,QAAL,GAAgB,KAAhB;AACA94C,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,IAAhB;AACD,KAHD,MAGO;AACL3T,MAAAA,IAAI,CAAC84C,QAAL,GAAgB,KAAKnsC,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAhB;AACA4E,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAKmD,gBAAL,CAAsBhB,IAAtB,CAAhB;AACD;;AAED,WAAO,KAAKzQ,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAEDk0C,EAAAA,4BAA4B,CAAC75B,IAAD,EAAOmoB,YAAP,EAAqB;AAC/C,QAAI,KAAKn3B,eAAL,CAAqB,kBAArB,EAAyC,UAAzC,MAAyD,OAA7D,EAAsE;AACpE,UAAIgP,IAAI,CAACpa,IAAL,KAAc,oBAAlB,EAAwC;AACtC,aAAKiC,KAAL,CAAWsgC,YAAX,EAA0B,mEAA1B;AACD;AACF;AACF;;AAED6R,EAAAA,sBAAsB,CAAC0E,eAAD,EAAkBn0C,QAAlB,EAA4BC,QAA5B,EAAsC;AAC1D,UAAMm0C,aAAa,GAAG,KAAKC,2BAAL,CAAiCF,eAAjC,CAAtB;AACA,SAAKG,iCAAL,CAAuCH,eAAvC,EAAwDC,aAAxD,EAAuEp0C,QAAvE;AACA,WAAO,KAAKu0C,6BAAL,CAAmCJ,eAAnC,EAAoDC,aAApD,EAAmEp0C,QAAnE,EAA6EC,QAA7E,CAAP;AACD;;AAEDq0C,EAAAA,iCAAiC,CAACH,eAAD,EAAkBC,aAAlB,EAAiCp0C,QAAjC,EAA2C;AAC1E,QAAI,KAAKmI,KAAL,CAAWzU,KAAK,CAACqB,KAAjB,CAAJ,EAA6B;AAC3B,YAAM,KAAKuI,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA8B,kGAA9B,CAAN;AACD,KAFD,MAEO,IAAI63C,aAAa,KAAK,yBAAlB,IAA+CD,eAAe,CAAC94C,IAAhB,KAAyB,oBAA5E,EAAkG;AACvG,WAAKiC,KAAL,CAAW0C,QAAX,EAAsB,gEAAtB;AACD;AACF;;AAEDu0C,EAAAA,6BAA6B,CAACJ,eAAD,EAAkBC,aAAlB,EAAiCp0C,QAAjC,EAA2CC,QAA3C,EAAqD;AAChF,UAAMmK,QAAQ,GAAG,KAAK9N,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAjB;;AAEA,YAAQm0C,aAAR;AACE,WAAK,sBAAL;AACEhqC,QAAAA,QAAQ,CAAC8N,MAAT,GAAkBi8B,eAAlB;AACA;;AAEF,WAAK,yBAAL;AACE/pC,QAAAA,QAAQ,CAAC8N,MAAT,GAAkBi8B,eAAe,CAACj8B,MAAlC;AACA;;AAEF,WAAK,6BAAL;AACE9N,QAAAA,QAAQ,CAAC8N,MAAT,GAAkBi8B,eAAe,CAACplC,QAAlC;AACA;;AAEF,WAAK,yBAAL;AACE,YAAI,CAAC,KAAKylC,0CAAL,EAAL,EAAwD;AACtD,eAAKl3C,KAAL,CAAW0C,QAAX,EAAsB,6DAAtB;AACD;;AAEDoK,QAAAA,QAAQ,CAAC3N,UAAT,GAAsB03C,eAAtB;AACA;;AAEF;AACE,cAAM,IAAIltC,KAAJ,CAAW,yDAAwDmtC,aAAc,GAAjF,CAAN;AAtBJ;;AAyBA,WAAO,KAAK3zC,UAAL,CAAgB2J,QAAhB,EAA0BgqC,aAA1B,CAAP;AACD;;AAEDC,EAAAA,2BAA2B,CAAC53C,UAAD,EAAa;AACtC,YAAQA,UAAU,CAACpB,IAAnB;AACE;AACE,eAAO,KAAKo5C,iBAAL,CAAuBh4C,UAAvB,IAAqC,sBAArC,GAA8D,yBAArE;AAFJ;AAID;;AAEDg4C,EAAAA,iBAAiB,CAACh4C,UAAD,EAAa;AAC5B,YAAQA,UAAU,CAACpB,IAAnB;AACE,WAAK,kBAAL;AACE,eAAO,CAACoB,UAAU,CAACwB,QAAZ,IAAwB,KAAKw2C,iBAAL,CAAuBh4C,UAAU,CAACywB,MAAlC,CAA/B;;AAEF,WAAK,YAAL;AACE,eAAO,IAAP;;AAEF;AACE,eAAO,KAAP;AARJ;AAUD;;AAEDsiB,EAAAA,0BAA0B,CAACkF,QAAD,EAAW;AACnC,UAAMC,sBAAsB,GAAG,KAAK50C,KAAL,CAAW4lC,YAA1C;AACA,SAAK5lC,KAAL,CAAW4lC,YAAX,GAA0B;AACxBC,MAAAA,wBAAwB,EAAE,CADF;AAExBC,MAAAA,aAAa,EAAE;AAFS,KAA1B;;AAKA,QAAI;AACF,aAAO6O,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAK30C,KAAL,CAAW4lC,YAAX,GAA0BgP,sBAA1B;AACD;AACF;;AAEDC,EAAAA,0BAA0B,CAACF,QAAD,EAAW;AACnC,UAAMC,sBAAsB,GAAG,KAAK50C,KAAL,CAAW4lC,YAA1C;AACA,SAAK5lC,KAAL,CAAW4lC,YAAX,GAA0B;AACxBC,MAAAA,wBAAwB,EAAE,CADF;AAExBC,MAAAA,aAAa,EAAE;AAFS,KAA1B;;AAKA,QAAI;AACF,aAAO6O,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAK30C,KAAL,CAAW4lC,YAAX,GAA0BgP,sBAA1B;AACD;AACF;;AAEDhF,EAAAA,8BAA8B,CAAC+E,QAAD,EAAW;AACvC,UAAMG,0BAA0B,GAAG,KAAK90C,KAAL,CAAW+lC,SAA9C;AACA,SAAK/lC,KAAL,CAAW+lC,SAAX,GAAuB,IAAvB;;AAEA,QAAI;AACF,aAAO4O,QAAQ,EAAf;AACD,KAFD,SAEU;AACR,WAAK30C,KAAL,CAAW+lC,SAAX,GAAuB+O,0BAAvB;AACD;AACF;;AAEDnD,EAAAA,sBAAsB,GAAG;AACvB,SAAK3xC,KAAL,CAAW4lC,YAAX,CAAwBE,aAAxB,GAAwC,CAAxC;AACD;;AAED4L,EAAAA,mDAAmD,GAAG;AACpD,WAAO,KAAK1xC,KAAL,CAAW4lC,YAAX,CAAwBC,wBAAxB,IAAoD,CAA3D;AACD;;AAED4O,EAAAA,0CAA0C,GAAG;AAC3C,WAAO,KAAKz0C,KAAL,CAAW4lC,YAAX,CAAwBE,aAAxB,IAAyC,IAAzC,IAAiD,KAAK9lC,KAAL,CAAW4lC,YAAX,CAAwBE,aAAxB,IAAyC,CAAjG;AACD;;AAED+J,EAAAA,uBAAuB,CAACP,IAAD,EAAOn+B,IAAP,EAAa;AAClC,UAAMlR,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,UAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,SAAKF,KAAL,CAAWulC,gBAAX,GAA8B,KAAKvlC,KAAL,CAAWxD,KAAzC;AACA,UAAMu0C,6BAA6B,GAAG,KAAK/wC,KAAL,CAAWgmC,0BAAjD;AACA,SAAKhmC,KAAL,CAAWgmC,0BAAX,GAAwC,IAAxC;AACA,UAAMsL,GAAG,GAAG,KAAK1T,WAAL,CAAiB,KAAK9F,eAAL,EAAjB,EAAyC73B,QAAzC,EAAmDC,QAAnD,EAA6DovC,IAA7D,EAAmEn+B,IAAnE,CAAZ;AACA,SAAKnR,KAAL,CAAWgmC,0BAAX,GAAwC+K,6BAAxC;AACA,WAAOO,GAAP;AACD;;AA/oDuC;;AAmpD1C,MAAMyD,SAAS,GAAG;AAChBx5C,EAAAA,IAAI,EAAE;AADU,CAAlB;AAAA,MAGMy5C,WAAW,GAAG;AAClBz5C,EAAAA,IAAI,EAAE;AADY,CAHpB;AAMA,MAAM05C,aAAa,GAAG,KAAtB;AAAA,MACMC,cAAc,GAAG,KADvB;AAAA,MAEMC,sBAAsB,GAAG,KAF/B;AAAA,MAGMC,gBAAgB,GAAG,KAHzB;;AAIA,MAAMC,eAAN,SAA8BvG,gBAA9B,CAA+C;AAC7Cv1B,EAAAA,aAAa,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAC3BA,IAAAA,OAAO,CAACsoB,UAAR,GAAqB,KAAKxuC,OAAL,CAAawuC,UAAlC;AACAtoB,IAAAA,OAAO,CAAC67B,WAAR,GAAsB,KAAKC,yBAAL,EAAtB;AACA,SAAKx2C,cAAL,CAAoB0a,OAApB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyC9lB,KAAK,CAACK,GAA/C;;AAEA,QAAI,KAAKgQ,QAAL,IAAiB,CAAC,KAAKzQ,OAAL,CAAa+uC,sBAA/B,IAAyD,KAAKv/B,KAAL,CAAWutB,gBAAX,CAA4B8Y,IAA5B,GAAmC,CAAhG,EAAmG;AACjG,WAAK,IAAI1qC,EAAE,GAAG,CAAT,EAAY82C,WAAW,GAAGpU,KAAK,CAACqU,IAAN,CAAW,KAAK1yC,KAAL,CAAWutB,gBAAtB,CAA/B,EAAwE5xB,EAAE,GAAG82C,WAAW,CAACl4C,MAAzF,EAAiGoB,EAAE,EAAnG,EAAuG;AAAA,8CACtF82C,WAAW,CAAC92C,EAAD,CAD2E;AAAA,cAC9FpL,IAD8F;;AAErG,cAAMwR,GAAG,GAAG,KAAK/B,KAAL,CAAWutB,gBAAX,CAA4BmT,GAA5B,CAAgCnwC,IAAhC,CAAZ;AACA,aAAKiK,KAAL,CAAWuH,GAAX,EAAiB,WAAUxR,IAAK,kBAAhC;AACD;AACF;;AAEDkmB,IAAAA,IAAI,CAACC,OAAL,GAAe,KAAK/Y,UAAL,CAAgB+Y,OAAhB,EAAyB,SAAzB,CAAf;AACAD,IAAAA,IAAI,CAAC8sB,QAAL,GAAgB,KAAKtmC,KAAL,CAAWsmC,QAA3B;AACA,QAAI,KAAK/yC,OAAL,CAAakvC,MAAjB,EAAyBjpB,IAAI,CAACipB,MAAL,GAAc,KAAKziC,KAAL,CAAWyiC,MAAzB;AACzB,WAAO,KAAK/hC,UAAL,CAAgB8Y,IAAhB,EAAsB,MAAtB,CAAP;AACD;;AAED1a,EAAAA,eAAe,CAACxC,IAAD,EAAO;AACpB,UAAMmB,IAAI,GAAGnB,IAAI,CAACI,UAAlB;AACA,UAAML,gBAAgB,GAAG,KAAKE,WAAL,CAAiBkB,IAAI,CAACjB,KAAtB,EAA6BiB,IAAI,CAAChB,GAAL,CAASD,KAAtC,CAAzB;AACA,UAAMJ,SAAS,GAAG,KAAKG,WAAL,CAAiBD,IAAI,CAACE,KAAtB,EAA6BF,IAAI,CAACG,GAAL,CAASD,KAAtC,CAAlB;AACA,UAAMG,GAAG,GAAG,KAAK0G,KAAL,CAAWtG,KAAX,CAAiBU,IAAI,CAACjB,KAAtB,EAA6BiB,IAAI,CAACX,GAAlC,CAAZ;AACA,UAAM+J,GAAG,GAAGxK,gBAAgB,CAACjK,KAAjB,GAAyBuK,GAAG,CAACI,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAArC;AACA,SAAKsvC,QAAL,CAAchwC,gBAAd,EAAgC,KAAhC,EAAuCM,GAAvC;AACA,SAAK0vC,QAAL,CAAchwC,gBAAd,EAAgC,UAAhC,EAA4CwK,GAA5C;AACAzK,IAAAA,SAAS,CAAChK,KAAV,GAAkB,KAAKyK,YAAL,CAAkBR,gBAAlB,EAAoC,kBAApC,EAAwDoB,IAAI,CAACX,GAA7D,EAAkEW,IAAI,CAAChB,GAAL,CAASK,GAA3E,CAAlB;AACA,WAAO,KAAKD,YAAL,CAAkBT,SAAlB,EAA6B,WAA7B,EAA0CE,IAAI,CAACQ,GAA/C,EAAoDR,IAAI,CAACG,GAAL,CAASK,GAA7D,CAAP;AACD;;AAEDy4C,EAAAA,yBAAyB,GAAG;AAC1B,QAAI,CAAC,KAAKntC,KAAL,CAAWzU,KAAK,CAAC4B,oBAAjB,CAAL,EAA6C;AAC3C,aAAO,IAAP;AACD;;AAED,UAAM8F,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK4N,KAAL,CAAW5N,KAAxB;AACA,SAAKgT,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDsP,EAAAA,KAAK,CAACnI,OAAD,EAAU;AACb,QAAI,CAAC,KAAKoH,YAAL,CAAkB,KAAlB,CAAL,EAA+B;AAC7B,aAAO,KAAP;AACD;;AAED,UAAMxE,IAAI,GAAG,KAAKwiC,cAAL,EAAb;AACA,UAAM8N,MAAM,GAAG,KAAKryC,KAAL,CAAW6Q,UAAX,CAAsB9O,IAAtB,CAAf;AACA,QAAIswC,MAAM,KAAK,EAAf,EAAmB,OAAO,IAAP;AACnB,QAAIlzC,OAAJ,EAAa,OAAO,KAAP;AACb,QAAIkzC,MAAM,KAAK,GAAf,EAAoB,OAAO,IAAP;;AAEpB,QAAI1wC,iBAAiB,CAAC0wC,MAAD,CAArB,EAA+B;AAC7B,UAAI5wC,GAAG,GAAGM,IAAI,GAAG,CAAjB;;AAEA,aAAOC,gBAAgB,CAAC,KAAKhC,KAAL,CAAW6Q,UAAX,CAAsBpP,GAAtB,CAAD,CAAvB,EAAqD;AACnD,UAAEA,GAAF;AACD;;AAED,YAAM+H,KAAK,GAAG,KAAKxJ,KAAL,CAAWtG,KAAX,CAAiBqI,IAAjB,EAAuBN,GAAvB,CAAd;AACA,UAAI,CAACR,yBAAyB,CAAClB,IAA1B,CAA+ByJ,KAA/B,CAAL,EAA4C,OAAO,IAAP;AAC7C;;AAED,WAAO,KAAP;AACD;;AAED+D,EAAAA,cAAc,CAACpO,OAAD,EAAUvD,QAAV,EAAoB;AAChC,QAAI,KAAKmJ,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAJ,EAA0B;AACxB,WAAKm8C,eAAL,CAAqB,IAArB;AACD;;AAED,WAAO,KAAKrT,qBAAL,CAA2B37B,OAA3B,EAAoCvD,QAApC,CAAP;AACD;;AAEDk/B,EAAAA,qBAAqB,CAAC37B,OAAD,EAAUvD,QAAV,EAAoB;AACvC,QAAIg9B,SAAS,GAAG,KAAKj8B,KAAL,CAAW1E,IAA3B;AACA,UAAMD,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,QAAIlF,IAAJ;;AAEA,QAAI,KAAKoP,KAAL,CAAWnI,OAAX,CAAJ,EAAyB;AACvBy5B,MAAAA,SAAS,GAAGtoC,KAAK,CAACiE,IAAlB;AACA2D,MAAAA,IAAI,GAAG,KAAP;AACD;;AAED,YAAQ0gC,SAAR;AACE,WAAKtoC,KAAK,CAACiD,MAAX;AACA,WAAKjD,KAAK,CAACoD,SAAX;AACE,eAAO,KAAK4+C,2BAAL,CAAiCt6C,IAAjC,EAAuC4gC,SAAS,CAAClpC,OAAjD,CAAP;;AAEF,WAAKY,KAAK,CAACqD,SAAX;AACE,eAAO,KAAK4+C,sBAAL,CAA4Bv6C,IAA5B,CAAP;;AAEF,WAAK1H,KAAK,CAACuD,GAAX;AACE,eAAO,KAAK2+C,gBAAL,CAAsBx6C,IAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC0D,IAAX;AACE,eAAO,KAAKy+C,iBAAL,CAAuBz6C,IAAvB,CAAP;;AAEF,WAAK1H,KAAK,CAAC2D,SAAX;AACE,YAAI,KAAKugC,iBAAL,OAA6B,EAAjC,EAAqC;;AAErC,YAAIr1B,OAAJ,EAAa;AACX,cAAI,KAAKxC,KAAL,CAAWyD,MAAf,EAAuB;AACrB,iBAAKlG,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,oFAA7B;AACD,WAFD,MAEO,IAAIgG,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,OAApC,EAA6C;AAClD,iBAAKjF,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,2EAA2E,mDAAxG;AACD;AACF;;AAED,eAAO,KAAK0/B,sBAAL,CAA4B7gC,IAA5B,EAAkC,KAAlC,EAAyC,CAACmH,OAA1C,CAAP;;AAEF,WAAK7O,KAAK,CAACwE,MAAX;AACE,YAAIqK,OAAJ,EAAa,KAAKyH,UAAL;AACb,eAAO,KAAKkyB,UAAL,CAAgB9gC,IAAhB,EAAsB,IAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC4D,GAAX;AACE,eAAO,KAAKw+C,gBAAL,CAAsB16C,IAAtB,CAAP;;AAEF,WAAK1H,KAAK,CAAC6D,OAAX;AACE,eAAO,KAAKw+C,oBAAL,CAA0B36C,IAA1B,CAAP;;AAEF,WAAK1H,KAAK,CAAC8D,OAAX;AACE,eAAO,KAAKw+C,oBAAL,CAA0B56C,IAA1B,CAAP;;AAEF,WAAK1H,KAAK,CAAC+D,MAAX;AACE,eAAO,KAAKw+C,mBAAL,CAAyB76C,IAAzB,CAAP;;AAEF,WAAK1H,KAAK,CAACgE,IAAX;AACE,eAAO,KAAKw+C,iBAAL,CAAuB96C,IAAvB,CAAP;;AAEF,WAAK1H,KAAK,CAACkE,MAAX;AACA,WAAKlE,KAAK,CAACiE,IAAX;AACE2D,QAAAA,IAAI,GAAGA,IAAI,IAAI,KAAKyE,KAAL,CAAW5N,KAA1B;;AAEA,YAAIoQ,OAAO,IAAIjH,IAAI,KAAK,KAAxB,EAA+B;AAC7B,eAAKgC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,iEAA7B;AACD;;AAED,eAAO,KAAK4/B,iBAAL,CAAuB/gC,IAAvB,EAA6BE,IAA7B,CAAP;;AAEF,WAAK5H,KAAK,CAACmE,MAAX;AACE,eAAO,KAAKs+C,mBAAL,CAAyB/6C,IAAzB,CAAP;;AAEF,WAAK1H,KAAK,CAACoE,KAAX;AACE,eAAO,KAAKs+C,kBAAL,CAAwBh7C,IAAxB,CAAP;;AAEF,WAAK1H,KAAK,CAACQ,MAAX;AACE,eAAO,KAAK8rC,UAAL,EAAP;;AAEF,WAAKtsC,KAAK,CAACe,IAAX;AACE,eAAO,KAAK4hD,mBAAL,CAAyBj7C,IAAzB,CAAP;;AAEF,WAAK1H,KAAK,CAAC0E,OAAX;AACA,WAAK1E,KAAK,CAAC2E,OAAX;AACE;AACE,gBAAMi+C,iBAAiB,GAAG,KAAK1e,iBAAL,EAA1B;;AAEA,cAAI0e,iBAAiB,KAAK,EAAtB,IAA4BA,iBAAiB,KAAK,EAAtD,EAA0D;AACxD;AACD;;AAED,cAAI,CAAC,KAAKhjD,OAAL,CAAa6uC,2BAAd,IAA6C,CAACnjC,QAAlD,EAA4D;AAC1D,iBAAK1B,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,wDAA7B;AACD;;AAED,eAAK4I,IAAL;AACA,cAAIiM,MAAJ;;AAEA,cAAI4qB,SAAS,KAAKtoC,KAAK,CAAC2E,OAAxB,EAAiC;AAC/B+Y,YAAAA,MAAM,GAAG,KAAK/G,WAAL,CAAiBjP,IAAjB,CAAT;;AAEA,gBAAIgW,MAAM,CAAC/V,IAAP,KAAgB,mBAAhB,KAAwC,CAAC+V,MAAM,CAAC1L,UAAR,IAAsB0L,MAAM,CAAC1L,UAAP,KAAsB,OAApF,CAAJ,EAAkG;AAChG,mBAAK49B,iBAAL,GAAyB,IAAzB;AACD;AACF,WAND,MAMO;AACLlyB,YAAAA,MAAM,GAAG,KAAKxG,WAAL,CAAiBxP,IAAjB,CAAT;;AAEA,gBAAIgW,MAAM,CAAC/V,IAAP,KAAgB,wBAAhB,KAA6C,CAAC+V,MAAM,CAACvG,UAAR,IAAsBuG,MAAM,CAACvG,UAAP,KAAsB,OAAzF,KAAqGuG,MAAM,CAAC/V,IAAP,KAAgB,sBAAhB,KAA2C,CAAC+V,MAAM,CAACvG,UAAR,IAAsBuG,MAAM,CAACvG,UAAP,KAAsB,OAAvF,CAArG,IAAwMuG,MAAM,CAAC/V,IAAP,KAAgB,0BAA5N,EAAwP;AACtP,mBAAKioC,iBAAL,GAAyB,IAAzB;AACD;AACF;;AAED,eAAKpwB,uBAAL,CAA6B9X,IAA7B;AACA,iBAAOgW,MAAP;AACD;;AAEH;AACE;AACE,cAAI,KAAKmlC,eAAL,EAAJ,EAA4B;AAC1B,gBAAIh0C,OAAJ,EAAa;AACX,mBAAKjF,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,yEAA7B;AACD;;AAED,iBAAK4I,IAAL;AACA,mBAAO,KAAK82B,sBAAL,CAA4B7gC,IAA5B,EAAkC,IAAlC,EAAwC,CAACmH,OAAzC,CAAP;AACD;AACF;AAhHL;;AAmHA,UAAMi0C,SAAS,GAAG,KAAKz2C,KAAL,CAAW5N,KAA7B;AACA,UAAMqL,IAAI,GAAG,KAAKwK,eAAL,EAAb;;AAEA,QAAIg0B,SAAS,KAAKtoC,KAAK,CAACL,IAApB,IAA4BmK,IAAI,CAACnC,IAAL,KAAc,YAA1C,IAA0D,KAAK0M,GAAL,CAASrU,KAAK,CAACgB,KAAf,CAA9D,EAAqF;AACnF,aAAO,KAAK+hD,qBAAL,CAA2Br7C,IAA3B,EAAiCo7C,SAAjC,EAA4Ch5C,IAA5C,EAAkD+E,OAAlD,CAAP;AACD,KAFD,MAEO;AACL,aAAO,KAAKsO,wBAAL,CAA8BzV,IAA9B,EAAoCoC,IAApC,CAAP;AACD;AACF;;AAED0V,EAAAA,uBAAuB,CAAC9X,IAAD,EAAO;AAC5B,QAAI,CAAC,KAAK9H,OAAL,CAAa6uC,2BAAd,IAA6C,CAAC,KAAKp+B,QAAvD,EAAiE;AAC/D,WAAKzG,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAwB,mEAAxB,EAA4F;AAC1F+E,QAAAA,IAAI,EAAE;AADoF,OAA5F;AAGD;AACF;;AAED4+B,EAAAA,cAAc,CAAC9kC,IAAD,EAAO;AACnB,UAAM2hC,UAAU,GAAG,KAAKh9B,KAAL,CAAWmmC,cAAX,CAA0B,KAAKnmC,KAAL,CAAWmmC,cAAX,CAA0B7oC,MAA1B,GAAmC,CAA7D,CAAnB;;AAEA,QAAI0/B,UAAU,CAAC1/B,MAAf,EAAuB;AACrBjC,MAAAA,IAAI,CAAC2hC,UAAL,GAAkBA,UAAlB;AACA,WAAKzlB,0BAAL,CAAgClc,IAAhC,EAAsC2hC,UAAU,CAAC,CAAD,CAAhD;AACA,WAAKh9B,KAAL,CAAWmmC,cAAX,CAA0B,KAAKnmC,KAAL,CAAWmmC,cAAX,CAA0B7oC,MAA1B,GAAmC,CAA7D,IAAkE,EAAlE;AACD;AACF;;AAED8hC,EAAAA,uBAAuB,GAAG;AACxB,WAAO,KAAKh3B,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAP;AACD;;AAEDq5C,EAAAA,eAAe,CAACmF,WAAD,EAAc;AAC3B,UAAMC,wBAAwB,GAAG,KAAK52C,KAAL,CAAWmmC,cAAX,CAA0B,KAAKnmC,KAAL,CAAWmmC,cAAX,CAA0B7oC,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,WAAO,KAAK8K,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAP,EAA6B;AAC3B,YAAMwhD,SAAS,GAAG,KAAKrI,cAAL,EAAlB;AACAoI,MAAAA,wBAAwB,CAAC/2C,IAAzB,CAA8Bg3C,SAA9B;AACD;;AAED,QAAI,KAAKzuC,KAAL,CAAWzU,KAAK,CAAC0E,OAAjB,CAAJ,EAA+B;AAC7B,UAAI,CAACs+C,WAAL,EAAkB;AAChB,aAAK1sC,UAAL;AACD;;AAED,UAAI,KAAKkN,SAAL,CAAe,YAAf,KAAgC,CAAC,KAAKzQ,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAArC,EAAmG;AACjG,aAAKnJ,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8EAA8E,yCAA3G;AACD;AACF,KARD,MAQO,IAAI,CAAC,KAAK4iC,uBAAL,EAAL,EAAqC;AAC1C,YAAM,KAAK7hC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,4DAA7B,CAAN;AACD;AACF;;AAEDgyC,EAAAA,cAAc,GAAG;AACf,SAAK3B,eAAL,CAAqB,CAAC,mBAAD,EAAsB,YAAtB,CAArB;AACA,UAAMxxC,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK2E,IAAL;;AAEA,QAAI,KAAK+R,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,WAAKnX,KAAL,CAAWmmC,cAAX,CAA0BtmC,IAA1B,CAA+B,EAA/B;AACA,YAAMI,QAAQ,GAAG,KAAKD,KAAL,CAAWxD,KAA5B;AACA,YAAM0D,QAAQ,GAAG,KAAKF,KAAL,CAAWE,QAA5B;AACA,UAAIzC,IAAJ;;AAEA,UAAI,KAAKuK,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAJ,EAA4B;AAC1BkJ,QAAAA,IAAI,GAAG,KAAKwK,eAAL,EAAP;AACA,aAAKV,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACD,OAHD,MAGO;AACLiJ,QAAAA,IAAI,GAAG,KAAKgL,eAAL,CAAqB,KAArB,CAAP;;AAEA,eAAO,KAAKT,GAAL,CAASrU,KAAK,CAACkB,GAAf,CAAP,EAA4B;AAC1B,gBAAMwG,IAAI,GAAG,KAAKkB,WAAL,CAAiB0D,QAAjB,EAA2BC,QAA3B,CAAb;AACA7E,UAAAA,IAAI,CAAC8xB,MAAL,GAAc1vB,IAAd;AACApC,UAAAA,IAAI,CAAC8T,QAAL,GAAgB,KAAK1G,eAAL,CAAqB,IAArB,CAAhB;AACApN,UAAAA,IAAI,CAAC6C,QAAL,GAAgB,KAAhB;AACAT,UAAAA,IAAI,GAAG,KAAKiD,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;AACF;;AAEDA,MAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKuiC,4BAAL,CAAkCxhC,IAAlC,CAAlB;AACA,WAAKuC,KAAL,CAAWmmC,cAAX,CAA0BxjC,GAA1B;AACD,KAvBD,MAuBO;AACLtH,MAAAA,IAAI,CAACqB,UAAL,GAAkB,KAAKszC,mBAAL,EAAlB;AACD;;AAED,WAAO,KAAKtvC,UAAL,CAAgBrF,IAAhB,EAAsB,WAAtB,CAAP;AACD;;AAED4jC,EAAAA,4BAA4B,CAACxhC,IAAD,EAAO;AACjC,QAAI,KAAKuK,GAAL,CAASrU,KAAK,CAACY,MAAf,CAAJ,EAA4B;AAC1B,YAAM8G,IAAI,GAAG,KAAK04B,eAAL,CAAqBt2B,IAArB,CAAb;AACApC,MAAAA,IAAI,CAAC8c,MAAL,GAAc1a,IAAd;AACApC,MAAAA,IAAI,CAACsY,SAAL,GAAiB,KAAKyE,4BAAL,CAAkCzkB,KAAK,CAACa,MAAxC,EAAgD,KAAhD,CAAjB;AACA,WAAKmgB,gBAAL,CAAsBtZ,IAAI,CAACsY,SAA3B;AACA,aAAO,KAAKjT,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED,WAAOoC,IAAP;AACD;;AAEDk4C,EAAAA,2BAA2B,CAACt6C,IAAD,EAAOtI,OAAP,EAAgB;AACzC,UAAM+jD,OAAO,GAAG/jD,OAAO,KAAK,OAA5B;AACA,SAAKqS,IAAL;;AAEA,QAAI,KAAK42B,gBAAL,EAAJ,EAA6B;AAC3B3gC,MAAAA,IAAI,CAACxI,KAAL,GAAa,IAAb;AACD,KAFD,MAEO;AACLwI,MAAAA,IAAI,CAACxI,KAAL,GAAa,KAAK4V,eAAL,EAAb;AACA,WAAKW,SAAL;AACD;;AAED,SAAK42B,mBAAL,CAAyB3kC,IAAzB,EAA+BtI,OAA/B;AACA,WAAO,KAAK2N,UAAL,CAAgBrF,IAAhB,EAAsBy7C,OAAO,GAAG,gBAAH,GAAsB,mBAAnD,CAAP;AACD;;AAED9W,EAAAA,mBAAmB,CAAC3kC,IAAD,EAAOtI,OAAP,EAAgB;AACjC,UAAM+jD,OAAO,GAAG/jD,OAAO,KAAK,OAA5B;AACA,QAAIgS,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAG,KAAK/E,KAAL,CAAWkmC,MAAX,CAAkB5oC,MAAlC,EAA0C,EAAEyH,CAA5C,EAA+C;AAC7C,YAAMgyC,GAAG,GAAG,KAAK/2C,KAAL,CAAWkmC,MAAX,CAAkBnhC,CAAlB,CAAZ;;AAEA,UAAI1J,IAAI,CAACxI,KAAL,IAAc,IAAd,IAAsBkkD,GAAG,CAACzjD,IAAJ,KAAa+H,IAAI,CAACxI,KAAL,CAAWS,IAAlD,EAAwD;AACtD,YAAIyjD,GAAG,CAACx7C,IAAJ,IAAY,IAAZ,KAAqBu7C,OAAO,IAAIC,GAAG,CAACx7C,IAAJ,KAAa,MAA7C,CAAJ,EAA0D;AAC1D,YAAIF,IAAI,CAACxI,KAAL,IAAcikD,OAAlB,EAA2B;AAC5B;AACF;;AAED,QAAI/xC,CAAC,KAAK,KAAK/E,KAAL,CAAWkmC,MAAX,CAAkB5oC,MAA5B,EAAoC;AAClC,WAAKC,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,iBAAiBzJ,OAAxC;AACD;AACF;;AAED6iD,EAAAA,sBAAsB,CAACv6C,IAAD,EAAO;AAC3B,SAAK+J,IAAL;AACA,SAAKgE,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAED27C,EAAAA,qBAAqB,GAAG;AACtB,SAAKzvC,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA,UAAMsS,GAAG,GAAG,KAAKoB,eAAL,EAAZ;AACA,SAAKV,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA,WAAOqS,GAAP;AACD;;AAEDgvC,EAAAA,gBAAgB,CAACx6C,IAAD,EAAO;AACrB,SAAK+J,IAAL;AACA,SAAKpF,KAAL,CAAWkmC,MAAX,CAAkBrmC,IAAlB,CAAuBk1C,SAAvB;AACA15C,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKo2C,0BAAL,CAAgC,MAAM,KAAKjkC,cAAL,CAAoB,IAApB,CAAtC,CAAZ;AACA,SAAK5Q,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACA,SAAK4E,MAAL,CAAY5T,KAAK,CAACmE,MAAlB;AACAuD,IAAAA,IAAI,CAAC+H,IAAL,GAAY,KAAK4zC,qBAAL,EAAZ;AACA,SAAKhvC,GAAL,CAASrU,KAAK,CAACe,IAAf;AACA,WAAO,KAAKgM,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDy6C,EAAAA,iBAAiB,CAACz6C,IAAD,EAAO;AACtB,SAAK+J,IAAL;AACA,SAAKpF,KAAL,CAAWkmC,MAAX,CAAkBrmC,IAAlB,CAAuBk1C,SAAvB;AACA,QAAIkC,OAAO,GAAG,CAAC,CAAf;;AAEA,QAAI,KAAKnH,cAAL,MAAyB,KAAKtmC,aAAL,CAAmB,OAAnB,CAA7B,EAA0D;AACxDytC,MAAAA,OAAO,GAAG,KAAKj3C,KAAL,CAAW0J,YAArB;AACD;;AAED,SAAK3G,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;AACA,SAAKwO,MAAL,CAAY5T,KAAK,CAACY,MAAlB;;AAEA,QAAI,KAAK6T,KAAL,CAAWzU,KAAK,CAACe,IAAjB,CAAJ,EAA4B;AAC1B,UAAIuiD,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKhtC,UAAL,CAAgBgtC,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAc77C,IAAd,EAAoB,IAApB,CAAP;AACD;;AAED,UAAMsP,KAAK,GAAG,KAAKA,KAAL,EAAd;;AAEA,QAAI,KAAKvC,KAAL,CAAWzU,KAAK,CAACiE,IAAjB,KAA0B,KAAKwQ,KAAL,CAAWzU,KAAK,CAACkE,MAAjB,CAA1B,IAAsD8S,KAA1D,EAAiE;AAC/D,YAAM0Q,IAAI,GAAG,KAAK5a,SAAL,EAAb;AACA,YAAMlF,IAAI,GAAGoP,KAAK,GAAG,KAAH,GAAW,KAAK3K,KAAL,CAAW5N,KAAxC;AACA,WAAKgT,IAAL;AACA,WAAK+xC,QAAL,CAAc97B,IAAd,EAAoB,IAApB,EAA0B9f,IAA1B;AACA,WAAKmF,UAAL,CAAgB2a,IAAhB,EAAsB,qBAAtB;;AAEA,UAAI,CAAC,KAAKjT,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,KAAyB,KAAKkR,YAAL,CAAkB,IAAlB,CAA1B,KAAsDyR,IAAI,CAAC+7B,YAAL,CAAkB95C,MAAlB,KAA6B,CAAvF,EAA0F;AACxF,eAAO,KAAK+5C,UAAL,CAAgBh8C,IAAhB,EAAsBggB,IAAtB,EAA4B47B,OAA5B,CAAP;AACD;;AAED,UAAIA,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,aAAKhtC,UAAL,CAAgBgtC,OAAhB;AACD;;AAED,aAAO,KAAKC,QAAL,CAAc77C,IAAd,EAAoBggB,IAApB,CAAP;AACD;;AAED,UAAMtb,sBAAsB,GAAG;AAC7BvD,MAAAA,KAAK,EAAE;AADsB,KAA/B;AAGA,UAAM6e,IAAI,GAAG,KAAKpT,eAAL,CAAqB,IAArB,EAA2BlI,sBAA3B,CAAb;;AAEA,QAAI,KAAKqI,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,KAAyB,KAAKkR,YAAL,CAAkB,IAAlB,CAA7B,EAAsD;AACpD,YAAM0tC,WAAW,GAAG,KAAK1tC,YAAL,CAAkB,IAAlB,IAA0B,kBAA1B,GAA+C,kBAAnE;AACA,WAAK7I,YAAL,CAAkBsa,IAAlB,EAAwB7U,SAAxB,EAAmC8wC,WAAnC;AACA,WAAK95C,SAAL,CAAe6d,IAAf,EAAqB7U,SAArB,EAAgCA,SAAhC,EAA2C8wC,WAA3C;AACA,aAAO,KAAKD,UAAL,CAAgBh8C,IAAhB,EAAsBggB,IAAtB,EAA4B47B,OAA5B,CAAP;AACD,KALD,MAKO,IAAIl3C,sBAAsB,CAACvD,KAA3B,EAAkC;AACvC,WAAKyN,UAAL,CAAgBlK,sBAAsB,CAACvD,KAAvC;AACD;;AAED,QAAIy6C,OAAO,GAAG,CAAC,CAAf,EAAkB;AAChB,WAAKhtC,UAAL,CAAgBgtC,OAAhB;AACD;;AAED,WAAO,KAAKC,QAAL,CAAc77C,IAAd,EAAoBggB,IAApB,CAAP;AACD;;AAED6gB,EAAAA,sBAAsB,CAAC7gC,IAAD,EAAOzB,OAAP,EAAgB29C,mBAAhB,EAAqC;AACzD,SAAKnyC,IAAL;AACA,WAAO,KAAK+rC,aAAL,CAAmB91C,IAAnB,EAAyB65C,cAAc,IAAIqC,mBAAmB,GAAG,CAAH,GAAOpC,sBAA9B,CAAvC,EAA8Fv7C,OAA9F,CAAP;AACD;;AAEDm8C,EAAAA,gBAAgB,CAAC16C,IAAD,EAAO;AACrB,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAAC+H,IAAL,GAAY,KAAK4zC,qBAAL,EAAZ;AACA37C,IAAAA,IAAI,CAACwW,UAAL,GAAkB,KAAKjB,cAAL,CAAoB,IAApB,CAAlB;AACAvV,IAAAA,IAAI,CAAC6W,SAAL,GAAiB,KAAKlK,GAAL,CAASrU,KAAK,CAACwD,KAAf,IAAwB,KAAKyZ,cAAL,CAAoB,IAApB,CAAxB,GAAoD,IAArE;AACA,WAAO,KAAKlQ,UAAL,CAAgBrF,IAAhB,EAAsB,aAAtB,CAAP;AACD;;AAED26C,EAAAA,oBAAoB,CAAC36C,IAAD,EAAO;AACzB,QAAI,CAAC,KAAK0H,KAAL,CAAWwtB,UAAZ,IAA0B,CAAC,KAAKh9B,OAAL,CAAa4uC,0BAA5C,EAAwE;AACtE,WAAK5kC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8BAA7B;AACD;;AAED,SAAK4I,IAAL;;AAEA,QAAI,KAAK42B,gBAAL,EAAJ,EAA6B;AAC3B3gC,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,IAAhB;AACD,KAFD,MAEO;AACL3T,MAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAK/G,eAAL,EAAhB;AACA,WAAKmB,SAAL;AACD;;AAED,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED46C,EAAAA,oBAAoB,CAAC56C,IAAD,EAAO;AACzB,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAACm8C,YAAL,GAAoB,KAAKR,qBAAL,EAApB;AACA,UAAMS,KAAK,GAAGp8C,IAAI,CAACo8C,KAAL,GAAa,EAA3B;AACA,SAAKlwC,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACA,SAAK6L,KAAL,CAAWkmC,MAAX,CAAkBrmC,IAAlB,CAAuBm1C,WAAvB;AACA,SAAKjyC,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;AACA,QAAI2+C,GAAJ;;AAEA,SAAK,IAAIC,UAAT,EAAqB,CAAC,KAAKvvC,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAtB,GAAiD;AAC/C,UAAI,KAAK+T,KAAL,CAAWzU,KAAK,CAACkD,KAAjB,KAA2B,KAAKuR,KAAL,CAAWzU,KAAK,CAACsD,QAAjB,CAA/B,EAA2D;AACzD,cAAM2gD,MAAM,GAAG,KAAKxvC,KAAL,CAAWzU,KAAK,CAACkD,KAAjB,CAAf;AACA,YAAI6gD,GAAJ,EAAS,KAAKh3C,UAAL,CAAgBg3C,GAAhB,EAAqB,YAArB;AACTD,QAAAA,KAAK,CAAC53C,IAAN,CAAW63C,GAAG,GAAG,KAAKj3C,SAAL,EAAjB;AACAi3C,QAAAA,GAAG,CAAC7lC,UAAJ,GAAiB,EAAjB;AACA,aAAKzM,IAAL;;AAEA,YAAIwyC,MAAJ,EAAY;AACVF,UAAAA,GAAG,CAACt0C,IAAJ,GAAW,KAAK6E,eAAL,EAAX;AACD,SAFD,MAEO;AACL,cAAI0vC,UAAJ,EAAgB;AACd,iBAAKp6C,KAAL,CAAW,KAAKyC,KAAL,CAAW0J,YAAtB,EAAoC,0BAApC;AACD;;AAEDiuC,UAAAA,UAAU,GAAG,IAAb;AACAD,UAAAA,GAAG,CAACt0C,IAAJ,GAAW,IAAX;AACD;;AAED,aAAKmE,MAAL,CAAY5T,KAAK,CAACgB,KAAlB;AACD,OAnBD,MAmBO;AACL,YAAI+iD,GAAJ,EAAS;AACPA,UAAAA,GAAG,CAAC7lC,UAAJ,CAAehS,IAAf,CAAoB,KAAK+Q,cAAL,CAAoB,IAApB,CAApB;AACD,SAFD,MAEO;AACL,eAAK3G,UAAL;AACD;AACF;AACF;;AAED,SAAKlH,KAAL,CAAWwH,IAAX;AACA,QAAImtC,GAAJ,EAAS,KAAKh3C,UAAL,CAAgBg3C,GAAhB,EAAqB,YAArB;AACT,SAAKtyC,IAAL;AACA,SAAKpF,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACA,WAAO,KAAKjC,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAP;AACD;;AAED66C,EAAAA,mBAAmB,CAAC76C,IAAD,EAAO;AACxB,SAAK+J,IAAL;;AAEA,QAAIjE,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAWsD,UAA5B,EAAwC,KAAKtD,KAAL,CAAWxD,KAAnD,CAAf,CAAJ,EAA+E;AAC7E,WAAKe,KAAL,CAAW,KAAKyC,KAAL,CAAWsD,UAAtB,EAAkC,6BAAlC;AACD;;AAEDjI,IAAAA,IAAI,CAAC2T,QAAL,GAAgB,KAAK/G,eAAL,EAAhB;AACA,SAAKmB,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAED86C,EAAAA,iBAAiB,CAAC96C,IAAD,EAAO;AACtB,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAAC+sC,KAAL,GAAa,KAAKnI,UAAL,EAAb;AACA5kC,IAAAA,IAAI,CAACw8C,OAAL,GAAe,IAAf;;AAEA,QAAI,KAAKzvC,KAAL,CAAWzU,KAAK,CAACmD,MAAjB,CAAJ,EAA8B;AAC5B,YAAMghD,MAAM,GAAG,KAAKr3C,SAAL,EAAf;AACA,WAAK2E,IAAL;;AAEA,UAAI,KAAKgD,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAJ,EAA8B;AAC5B,aAAKgT,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACAujD,QAAAA,MAAM,CAAC1nC,KAAP,GAAe,KAAK4uB,gBAAL,EAAf;AACA,cAAM+Y,MAAM,GAAGD,MAAM,CAAC1nC,KAAP,CAAa9U,IAAb,KAAsB,YAArC;AACA,aAAKyH,KAAL,CAAWqH,KAAX,CAAiB2tC,MAAM,GAAG1+C,kBAAH,GAAwB,CAA/C;AACA,aAAKmE,SAAL,CAAes6C,MAAM,CAAC1nC,KAAtB,EAA6B3V,YAA7B,EAA2C,IAA3C,EAAiD,cAAjD;AACA,aAAK8M,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACD,OAPD,MAOO;AACLsjD,QAAAA,MAAM,CAAC1nC,KAAP,GAAe,IAAf;AACA,aAAKrN,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;AACD;;AAED++C,MAAAA,MAAM,CAACr5C,IAAP,GAAc,KAAKo2C,0BAAL,CAAgC,MAAM,KAAK5U,UAAL,CAAgB,KAAhB,EAAuB,KAAvB,CAAtC,CAAd;AACA,WAAKl9B,KAAL,CAAWwH,IAAX;AACAlP,MAAAA,IAAI,CAACw8C,OAAL,GAAe,KAAKn3C,UAAL,CAAgBo3C,MAAhB,EAAwB,aAAxB,CAAf;AACD;;AAEDz8C,IAAAA,IAAI,CAAC28C,SAAL,GAAiB,KAAKhwC,GAAL,CAASrU,KAAK,CAACyD,QAAf,IAA2B,KAAK6oC,UAAL,EAA3B,GAA+C,IAAhE;;AAEA,QAAI,CAAC5kC,IAAI,CAACw8C,OAAN,IAAiB,CAACx8C,IAAI,CAAC28C,SAA3B,EAAsC;AACpC,WAAKz6C,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,iCAAvB;AACD;;AAED,WAAO,KAAKkE,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAED+gC,EAAAA,iBAAiB,CAAC/gC,IAAD,EAAOE,IAAP,EAAa;AAC5B,SAAK6J,IAAL;AACA,SAAK+xC,QAAL,CAAc97C,IAAd,EAAoB,KAApB,EAA2BE,IAA3B;AACA,SAAK6N,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED+6C,EAAAA,mBAAmB,CAAC/6C,IAAD,EAAO;AACxB,SAAK+J,IAAL;AACA/J,IAAAA,IAAI,CAAC+H,IAAL,GAAY,KAAK4zC,qBAAL,EAAZ;AACA,SAAKh3C,KAAL,CAAWkmC,MAAX,CAAkBrmC,IAAlB,CAAuBk1C,SAAvB;AACA15C,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKo2C,0BAAL,CAAgC,MAAM,KAAKjkC,cAAL,CAAoB,OAApB,CAAtC,CAAZ;AACA,SAAK5Q,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACA,WAAO,KAAKjC,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDg7C,EAAAA,kBAAkB,CAACh7C,IAAD,EAAO;AACvB,QAAI,KAAK2E,KAAL,CAAWyD,MAAf,EAAuB;AACrB,WAAKlG,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,uBAA7B;AACD;;AAED,SAAK4I,IAAL;AACA/J,IAAAA,IAAI,CAAC8xB,MAAL,GAAc,KAAK6pB,qBAAL,EAAd;AACA37C,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKo2C,0BAAL,CAAgC,MAAM,KAAKjkC,cAAL,CAAoB,MAApB,CAAtC,CAAZ;AACA,WAAO,KAAKlQ,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDi7C,EAAAA,mBAAmB,CAACj7C,IAAD,EAAO;AACxB,SAAK+J,IAAL;AACA,WAAO,KAAK1E,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDq7C,EAAAA,qBAAqB,CAACr7C,IAAD,EAAOo7C,SAAP,EAAkBh5C,IAAlB,EAAwB+E,OAAxB,EAAiC;AACpD,SAAK,IAAI4Z,GAAG,GAAG,CAAV,EAAa67B,kBAAkB,GAAG,KAAKj4C,KAAL,CAAWkmC,MAAlD,EAA0D9pB,GAAG,GAAG67B,kBAAkB,CAAC36C,MAAnF,EAA2F8e,GAAG,EAA9F,EAAkG;AAChG,YAAMvpB,KAAK,GAAGolD,kBAAkB,CAAC77B,GAAD,CAAhC;;AAEA,UAAIvpB,KAAK,CAACS,IAAN,KAAemjD,SAAnB,EAA8B;AAC5B,aAAKl5C,KAAL,CAAWE,IAAI,CAACjB,KAAhB,EAAwB,UAASi6C,SAAU,uBAA3C;AACD;AACF;;AAED,UAAMl7C,IAAI,GAAG,KAAKyE,KAAL,CAAW1E,IAAX,CAAgB/I,MAAhB,GAAyB,MAAzB,GAAkC,KAAK6V,KAAL,CAAWzU,KAAK,CAAC8D,OAAjB,IAA4B,QAA5B,GAAuC,IAAtF;;AAEA,SAAK,IAAIsN,CAAC,GAAG,KAAK/E,KAAL,CAAWkmC,MAAX,CAAkB5oC,MAAlB,GAA2B,CAAxC,EAA2CyH,CAAC,IAAI,CAAhD,EAAmDA,CAAC,EAApD,EAAwD;AACtD,YAAMlS,KAAK,GAAG,KAAKmN,KAAL,CAAWkmC,MAAX,CAAkBnhC,CAAlB,CAAd;;AAEA,UAAIlS,KAAK,CAACqlD,cAAN,KAAyB78C,IAAI,CAACmB,KAAlC,EAAyC;AACvC3J,QAAAA,KAAK,CAACqlD,cAAN,GAAuB,KAAKl4C,KAAL,CAAWxD,KAAlC;AACA3J,QAAAA,KAAK,CAAC0I,IAAN,GAAaA,IAAb;AACD,OAHD,MAGO;AACL;AACD;AACF;;AAED,SAAKyE,KAAL,CAAWkmC,MAAX,CAAkBrmC,IAAlB,CAAuB;AACrBvM,MAAAA,IAAI,EAAEmjD,SADe;AAErBl7C,MAAAA,IAAI,EAAEA,IAFe;AAGrB28C,MAAAA,cAAc,EAAE,KAAKl4C,KAAL,CAAWxD;AAHN,KAAvB;AAKAnB,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKmS,cAAL,CAAoBpO,OAAO,GAAGA,OAAO,CAACwQ,OAAR,CAAgB,OAAhB,MAA6B,CAAC,CAA9B,GAAkCxQ,OAAO,GAAG,OAA5C,GAAsDA,OAAzD,GAAmE,OAA9F,CAAZ;AACA,SAAKxC,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACAtH,IAAAA,IAAI,CAACxI,KAAL,GAAa4K,IAAb;AACA,WAAO,KAAKiD,UAAL,CAAgBrF,IAAhB,EAAsB,kBAAtB,CAAP;AACD;;AAEDyV,EAAAA,wBAAwB,CAACzV,IAAD,EAAOoC,IAAP,EAAa;AACnCpC,IAAAA,IAAI,CAACqB,UAAL,GAAkBe,IAAlB;AACA,SAAK2L,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,qBAAtB,CAAP;AACD;;AAED4kC,EAAAA,UAAU,CAACjhC,eAAe,GAAG,KAAnB,EAA0Bm5C,qBAAqB,GAAG,IAAlD,EAAwD;AAChE,UAAM98C,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACA,SAAK8G,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;;AAEA,QAAIgkD,qBAAJ,EAA2B;AACzB,WAAKp1C,KAAL,CAAWqH,KAAX,CAAiBrR,WAAjB;AACD;;AAED,SAAKgG,cAAL,CAAoB1D,IAApB,EAA0B2D,eAA1B,EAA2C,KAA3C,EAAkDrL,KAAK,CAACU,MAAxD;;AAEA,QAAI8jD,qBAAJ,EAA2B;AACzB,WAAKp1C,KAAL,CAAWwH,IAAX;AACD;;AAED,WAAO,KAAK7J,UAAL,CAAgBrF,IAAhB,EAAsB,gBAAtB,CAAP;AACD;;AAEDuD,EAAAA,gBAAgB,CAACtC,IAAD,EAAO;AACrB,WAAOA,IAAI,CAAChB,IAAL,KAAc,qBAAd,IAAuCgB,IAAI,CAACI,UAAL,CAAgBpB,IAAhB,KAAyB,eAAhE,IAAmF,CAACgB,IAAI,CAACI,UAAL,CAAgBE,KAAhB,CAAsBiC,aAAjH;AACD;;AAEDE,EAAAA,cAAc,CAAC1D,IAAD,EAAO2D,eAAP,EAAwBC,QAAxB,EAAkCnC,GAAlC,EAAuC;AACnD,UAAM2B,IAAI,GAAGpD,IAAI,CAACoD,IAAL,GAAY,EAAzB;AACA,UAAMU,UAAU,GAAG9D,IAAI,CAAC8D,UAAL,GAAkB,EAArC;AACA,SAAK47B,2BAAL,CAAiCt8B,IAAjC,EAAuCO,eAAe,GAAGG,UAAH,GAAgBqH,SAAtE,EAAiFvH,QAAjF,EAA2FnC,GAA3F;AACD;;AAEDi+B,EAAAA,2BAA2B,CAACt8B,IAAD,EAAOU,UAAP,EAAmBF,QAAnB,EAA6BnC,GAA7B,EAAkC;AAC3D,QAAIs7C,kBAAkB,GAAG,KAAzB;AACA,QAAI1E,SAAJ;AACA,QAAIlN,aAAJ;;AAEA,WAAO,CAAC,KAAKx+B,GAAL,CAASlL,GAAT,CAAR,EAAuB;AACrB,UAAI,CAACs7C,kBAAD,IAAuB,KAAKp4C,KAAL,CAAWumC,aAAlC,IAAmD,CAACC,aAAxD,EAAuE;AACrEA,QAAAA,aAAa,GAAG,KAAKxmC,KAAL,CAAWwmC,aAA3B;AACD;;AAED,YAAMlqC,IAAI,GAAG,KAAKsU,cAAL,CAAoB,IAApB,EAA0B3R,QAA1B,CAAb;;AAEA,UAAIE,UAAU,IAAI,CAACi5C,kBAAf,IAAqC,KAAKx5C,gBAAL,CAAsBtC,IAAtB,CAAzC,EAAsE;AACpE,cAAMF,SAAS,GAAG,KAAK0C,eAAL,CAAqBxC,IAArB,CAAlB;AACA6C,QAAAA,UAAU,CAACU,IAAX,CAAgBzD,SAAhB;;AAEA,YAAIs3C,SAAS,KAAKltC,SAAd,IAA2BpK,SAAS,CAAChK,KAAV,CAAgBA,KAAhB,KAA0B,YAAzD,EAAuE;AACrEshD,UAAAA,SAAS,GAAG,KAAK1zC,KAAL,CAAWyD,MAAvB;AACA,eAAKskC,SAAL,CAAe,IAAf;;AAEA,cAAIvB,aAAJ,EAAmB;AACjB,iBAAKjpC,KAAL,CAAWipC,aAAX,EAA0B,8BAA1B;AACD;AACF;;AAED;AACD;;AAED4R,MAAAA,kBAAkB,GAAG,IAArB;AACA35C,MAAAA,IAAI,CAACoB,IAAL,CAAUvD,IAAV;AACD;;AAED,QAAIo3C,SAAS,KAAK,KAAlB,EAAyB;AACvB,WAAK3L,SAAL,CAAe,KAAf;AACD;AACF;;AAEDmP,EAAAA,QAAQ,CAAC77C,IAAD,EAAOggB,IAAP,EAAa;AACnBhgB,IAAAA,IAAI,CAACggB,IAAL,GAAYA,IAAZ;AACA,SAAK9T,MAAL,CAAY5T,KAAK,CAACe,IAAlB;AACA2G,IAAAA,IAAI,CAAC+H,IAAL,GAAY,KAAKgF,KAAL,CAAWzU,KAAK,CAACe,IAAjB,IAAyB,IAAzB,GAAgC,KAAKuT,eAAL,EAA5C;AACA,SAAKV,MAAL,CAAY5T,KAAK,CAACe,IAAlB;AACA2G,IAAAA,IAAI,CAAC8wC,MAAL,GAAc,KAAK/jC,KAAL,CAAWzU,KAAK,CAACa,MAAjB,IAA2B,IAA3B,GAAkC,KAAKyT,eAAL,EAAhD;AACA,SAAKV,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA6G,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKo2C,0BAAL,CAAgC,MAAM,KAAKjkC,cAAL,CAAoB,KAApB,CAAtC,CAAZ;AACA,SAAK7N,KAAL,CAAWwH,IAAX;AACA,SAAKvK,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACA,WAAO,KAAKjC,UAAL,CAAgBrF,IAAhB,EAAsB,cAAtB,CAAP;AACD;;AAEDg8C,EAAAA,UAAU,CAACh8C,IAAD,EAAOggB,IAAP,EAAa47B,OAAb,EAAsB;AAC9B,UAAMoB,OAAO,GAAG,KAAKjwC,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,CAAhB;AACA,SAAK0M,IAAL;;AAEA,QAAIizC,OAAJ,EAAa;AACX,UAAIpB,OAAO,GAAG,CAAC,CAAf,EAAkB,KAAKhtC,UAAL,CAAgBgtC,OAAhB;AACnB,KAFD,MAEO;AACL57C,MAAAA,IAAI,CAACi9C,KAAL,GAAarB,OAAO,GAAG,CAAC,CAAxB;AACD;;AAED,QAAI57B,IAAI,CAAC/f,IAAL,KAAc,qBAAd,IAAuC+f,IAAI,CAAC+7B,YAAL,CAAkB,CAAlB,EAAqB/7B,IAArB,IAA6B,IAApE,KAA6E,CAACg9B,OAAD,IAAY,KAAKr4C,KAAL,CAAWyD,MAAvB,IAAiC4X,IAAI,CAAC9f,IAAL,KAAc,KAA/C,IAAwD8f,IAAI,CAAC+7B,YAAL,CAAkB,CAAlB,EAAqB5uC,EAArB,CAAwBlN,IAAxB,KAAiC,YAAtK,CAAJ,EAAyL;AACvL,WAAKiC,KAAL,CAAW8d,IAAI,CAAC7e,KAAhB,EAAwB,GAAE67C,OAAO,GAAG,QAAH,GAAc,QAAS,wDAAxD;AACD,KAFD,MAEO,IAAIh9B,IAAI,CAAC/f,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAKiC,KAAL,CAAW8d,IAAI,CAAC7e,KAAhB,EAAuB,oCAAvB;AACD;;AAEDnB,IAAAA,IAAI,CAACqa,IAAL,GAAY2F,IAAZ;AACAhgB,IAAAA,IAAI,CAAC+Q,KAAL,GAAaisC,OAAO,GAAG,KAAKpwC,eAAL,EAAH,GAA4B,KAAKkK,gBAAL,EAAhD;AACA,SAAK5K,MAAL,CAAY5T,KAAK,CAACa,MAAlB;AACA6G,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAKo2C,0BAAL,CAAgC,MAAM,KAAKjkC,cAAL,CAAoB,KAApB,CAAtC,CAAZ;AACA,SAAK7N,KAAL,CAAWwH,IAAX;AACA,SAAKvK,KAAL,CAAWkmC,MAAX,CAAkBvjC,GAAlB;AACA,WAAO,KAAKjC,UAAL,CAAgBrF,IAAhB,EAAsBg9C,OAAO,GAAG,gBAAH,GAAsB,gBAAnD,CAAP;AACD;;AAEDlB,EAAAA,QAAQ,CAAC97C,IAAD,EAAOk9C,KAAP,EAAch9C,IAAd,EAAoB;AAC1B,UAAM67C,YAAY,GAAG/7C,IAAI,CAAC+7C,YAAL,GAAoB,EAAzC;AACA,UAAMoB,YAAY,GAAG,KAAKrhC,SAAL,CAAe,YAAf,CAArB;AACA9b,IAAAA,IAAI,CAACE,IAAL,GAAYA,IAAZ;;AAEA,aAAS;AACP,YAAM6X,IAAI,GAAG,KAAK3S,SAAL,EAAb;AACA,WAAKoW,UAAL,CAAgBzD,IAAhB,EAAsB7X,IAAtB;;AAEA,UAAI,KAAKyM,GAAL,CAASrU,KAAK,CAAC6B,EAAf,CAAJ,EAAwB;AACtB4d,QAAAA,IAAI,CAACiI,IAAL,GAAY,KAAKlJ,gBAAL,CAAsBomC,KAAtB,CAAZ;AACD,OAFD,MAEO;AACL,YAAIh9C,IAAI,KAAK,OAAT,IAAoB,EAAE,KAAK6M,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,KAAyB,KAAKkR,YAAL,CAAkB,IAAlB,CAA3B,CAAxB,EAA6E;AAC3E,cAAI,CAAC4uC,YAAL,EAAmB;AACjB,iBAAKvuC,UAAL;AACD;AACF,SAJD,MAIO,IAAImJ,IAAI,CAAC5K,EAAL,CAAQlN,IAAR,KAAiB,YAAjB,IAAiC,EAAEi9C,KAAK,KAAK,KAAKnwC,KAAL,CAAWzU,KAAK,CAAC+E,GAAjB,KAAyB,KAAKkR,YAAL,CAAkB,IAAlB,CAA9B,CAAP,CAArC,EAAqG;AAC1G,eAAKrM,KAAL,CAAW,KAAKyC,KAAL,CAAWsD,UAAtB,EAAkC,0DAAlC;AACD;;AAED8P,QAAAA,IAAI,CAACiI,IAAL,GAAY,IAAZ;AACD;;AAED+7B,MAAAA,YAAY,CAACv3C,IAAb,CAAkB,KAAKa,UAAL,CAAgB0S,IAAhB,EAAsB,oBAAtB,CAAlB;AACA,UAAI,CAAC,KAAKpL,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAL,EAA4B;AAC7B;;AAED,WAAO4G,IAAP;AACD;;AAEDwb,EAAAA,UAAU,CAACzD,IAAD,EAAO7X,IAAP,EAAa;AACrB6X,IAAAA,IAAI,CAAC5K,EAAL,GAAU,KAAKw2B,gBAAL,EAAV;AACA,SAAKxhC,SAAL,CAAe4V,IAAI,CAAC5K,EAApB,EAAwBjN,IAAI,KAAK,KAAT,GAAiBb,QAAjB,GAA4BD,YAApD,EAAkE+L,SAAlE,EAA6E,sBAA7E,EAAqGjL,IAAI,KAAK,KAA9G;AACD;;AAED41C,EAAAA,aAAa,CAAC91C,IAAD,EAAOo9C,SAAS,GAAGxD,aAAnB,EAAkCr7C,OAAO,GAAG,KAA5C,EAAmD;AAC9D,UAAMma,WAAW,GAAG0kC,SAAS,GAAGvD,cAAhC;AACA,UAAMwD,kBAAkB,GAAGD,SAAS,GAAGtD,sBAAvC;AACA,UAAMwD,SAAS,GAAG,CAAC,CAAC5kC,WAAF,IAAiB,EAAE0kC,SAAS,GAAGrD,gBAAd,CAAnC;AACA,SAAKp4C,YAAL,CAAkB3B,IAAlB,EAAwBzB,OAAxB;;AAEA,QAAI,KAAKwO,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,KAA0BiiD,kBAA9B,EAAkD;AAChD,WAAKn7C,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,oEAA7B;AACD;;AAEDnB,IAAAA,IAAI,CAACi4C,SAAL,GAAiB,KAAKtrC,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAjB;;AAEA,QAAIsd,WAAJ,EAAiB;AACf1Y,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK03B,eAAL,CAAqByY,SAArB,CAAV;AACD;;AAED,UAAMvI,yBAAyB,GAAG,KAAKpwC,KAAL,CAAWylC,sBAA7C;AACA,UAAMmT,kBAAkB,GAAG,KAAK54C,KAAL,CAAW2lC,eAAtC;AACA,UAAM0K,WAAW,GAAG,KAAKrwC,KAAL,CAAWomC,QAA/B;AACA,UAAMkK,WAAW,GAAG,KAAKtwC,KAAL,CAAWqmC,QAA/B;AACA,SAAKrmC,KAAL,CAAWylC,sBAAX,GAAoC,KAApC;AACA,SAAKzlC,KAAL,CAAW2lC,eAAX,GAA6B,KAA7B;AACA,SAAK3lC,KAAL,CAAWomC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKpmC,KAAL,CAAWqmC,QAAX,GAAsB,CAAC,CAAvB;AACA,SAAKtjC,KAAL,CAAWqH,KAAX,CAAiBzQ,aAAa,CAAC0B,IAAI,CAACk4C,KAAN,EAAal4C,IAAI,CAACi4C,SAAlB,CAA9B;;AAEA,QAAI,CAACv/B,WAAL,EAAkB;AAChB1Y,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAK03B,eAAL,EAAV;AACD;;AAED,SAAKvpB,mBAAL,CAAyBtb,IAAzB;AACA,SAAKw5C,0BAAL,CAAgC,MAAM;AACpC,WAAKlkC,0BAAL,CAAgCtV,IAAhC,EAAsC0Y,WAAW,GAAG,qBAAH,GAA2B,oBAA5E;AACD,KAFD;AAGA,SAAKhR,KAAL,CAAWwH,IAAX;;AAEA,QAAIwJ,WAAW,IAAI,CAAC2kC,kBAApB,EAAwC;AACtC,WAAKnb,2BAAL,CAAiCliC,IAAjC;AACD;;AAED,SAAK2E,KAAL,CAAWylC,sBAAX,GAAoC2K,yBAApC;AACA,SAAKpwC,KAAL,CAAW2lC,eAAX,GAA6BiT,kBAA7B;AACA,SAAK54C,KAAL,CAAWomC,QAAX,GAAsBiK,WAAtB;AACA,SAAKrwC,KAAL,CAAWqmC,QAAX,GAAsBiK,WAAtB;AACA,WAAOj1C,IAAP;AACD;;AAED6kC,EAAAA,eAAe,CAACyY,SAAD,EAAY;AACzB,WAAOA,SAAS,IAAI,KAAKvwC,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAb,GAAsC,KAAKmV,eAAL,EAAtC,GAA+D,IAAtE;AACD;;AAEDkO,EAAAA,mBAAmB,CAACtb,IAAD,EAAOub,cAAP,EAAuB;AACxC,UAAMg9B,eAAe,GAAG,KAAK5zC,KAAL,CAAWwlC,YAAnC;AACA,SAAKxlC,KAAL,CAAWwlC,YAAX,GAA0B,IAA1B;AACA,SAAKj+B,MAAL,CAAY5T,KAAK,CAACY,MAAlB;AACA8G,IAAAA,IAAI,CAACgC,MAAL,GAAc,KAAKk4B,gBAAL,CAAsB5hC,KAAK,CAACa,MAA5B,EAAoC,EAApC,EAAwC,KAAxC,EAA+CoiB,cAA/C,CAAd;AACA,SAAK5W,KAAL,CAAWwlC,YAAX,GAA0BoO,eAA1B;AACA,SAAK7G,8BAAL;AACD;;AAEDxP,EAAAA,2BAA2B,CAACliC,IAAD,EAAO;AAChC,QAAI,CAACA,IAAI,CAACmN,EAAV,EAAc;AACd,SAAKzF,KAAL,CAAWoH,WAAX,CAAuB9O,IAAI,CAACmN,EAAL,CAAQlV,IAA/B,EAAqC,KAAK0M,KAAL,CAAWyD,MAAX,IAAqBpI,IAAI,CAACi4C,SAA1B,IAAuCj4C,IAAI,CAACk4C,KAA5C,GAAoD,KAAKxwC,KAAL,CAAW8tB,mBAAX,GAAiCn2B,QAAjC,GAA4CD,YAAhG,GAA+GE,aAApJ,EAAmKU,IAAI,CAACmN,EAAL,CAAQhM,KAA3K;AACD;;AAED2/B,EAAAA,UAAU,CAAC9gC,IAAD,EAAO0Y,WAAP,EAAoBC,UAApB,EAAgC;AACxC,SAAK5O,IAAL;AACA,SAAK+6B,cAAL,CAAoB9kC,IAApB;AACA,UAAMq4C,SAAS,GAAG,KAAK1zC,KAAL,CAAWyD,MAA7B;AACA,SAAKzD,KAAL,CAAWyD,MAAX,GAAoB,IAApB;AACA,SAAKqQ,YAAL,CAAkBzY,IAAlB,EAAwB0Y,WAAxB,EAAqCC,UAArC;AACA,SAAKmB,eAAL,CAAqB9Z,IAArB;AACAA,IAAAA,IAAI,CAACoD,IAAL,GAAY,KAAK2hC,cAAL,CAAoB,CAAC,CAAC/kC,IAAI,CAACK,UAA3B,CAAZ;AACA,SAAKsE,KAAL,CAAWyD,MAAX,GAAoBiwC,SAApB;AACA,WAAO,KAAKhzC,UAAL,CAAgBrF,IAAhB,EAAsB0Y,WAAW,GAAG,kBAAH,GAAwB,iBAAzD,CAAP;AACD;;AAEDiB,EAAAA,eAAe,GAAG;AAChB,WAAO,KAAK5M,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,KAAwB,KAAK4S,KAAL,CAAWzU,KAAK,CAACe,IAAjB,CAAxB,IAAkD,KAAK0T,KAAL,CAAWzU,KAAK,CAACU,MAAjB,CAAzD;AACD;;AAED0gB,EAAAA,aAAa,GAAG;AACd,WAAO,KAAK3M,KAAL,CAAWzU,KAAK,CAACY,MAAjB,CAAP;AACD;;AAED0gB,EAAAA,sBAAsB,CAACzZ,MAAD,EAAS;AAC7B,WAAO,CAACA,MAAM,CAAC0C,QAAR,IAAoB,CAAC1C,MAAM,CAACmS,MAA5B,KAAuCnS,MAAM,CAAC4C,GAAP,CAAW9K,IAAX,KAAoB,aAApB,IAAqCkI,MAAM,CAAC4C,GAAP,CAAWhM,KAAX,KAAqB,aAAjG,CAAP;AACD;;AAEDguC,EAAAA,cAAc,CAAC9B,sBAAD,EAAyB;AACrC,SAAKt+B,KAAL,CAAWimC,UAAX;AACA,UAAMjmC,KAAK,GAAG;AACZ64C,MAAAA,cAAc,EAAE;AADJ,KAAd;AAGA,QAAI7b,UAAU,GAAG,EAAjB;AACA,UAAMx9B,SAAS,GAAG,KAAKiB,SAAL,EAAlB;AACAjB,IAAAA,SAAS,CAACf,IAAV,GAAiB,EAAjB;AACA,SAAK8I,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;AACA,SAAK0gD,0BAAL,CAAgC,MAAM;AACpC,aAAO,CAAC,KAAK7sC,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAR,EAAgC;AAC9B,YAAI,KAAK2T,GAAL,CAASrU,KAAK,CAACe,IAAf,CAAJ,EAA0B;AACxB,cAAIsoC,UAAU,CAAC1/B,MAAX,GAAoB,CAAxB,EAA2B;AACzB,kBAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWsD,UAAtB,EAAkC,gDAAlC,CAAN;AACD;;AAED;AACD;;AAED,YAAI,KAAK8E,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAJ,EAA0B;AACxB2nC,UAAAA,UAAU,CAACn9B,IAAX,CAAgB,KAAK2uC,cAAL,EAAhB;AACA;AACD;;AAED,cAAMryB,MAAM,GAAG,KAAK1b,SAAL,EAAf;;AAEA,YAAIu8B,UAAU,CAAC1/B,MAAf,EAAuB;AACrB6e,UAAAA,MAAM,CAAC6gB,UAAP,GAAoBA,UAApB;AACA,eAAKzlB,0BAAL,CAAgC4E,MAAhC,EAAwC6gB,UAAU,CAAC,CAAD,CAAlD;AACAA,UAAAA,UAAU,GAAG,EAAb;AACD;;AAED,aAAKqB,gBAAL,CAAsB7+B,SAAtB,EAAiC2c,MAAjC,EAAyCnc,KAAzC,EAAgDs+B,sBAAhD;;AAEA,YAAIniB,MAAM,CAAC5gB,IAAP,KAAgB,aAAhB,IAAiC4gB,MAAM,CAAC6gB,UAAxC,IAAsD7gB,MAAM,CAAC6gB,UAAP,CAAkB1/B,MAAlB,GAA2B,CAArF,EAAwF;AACtF,eAAKC,KAAL,CAAW4e,MAAM,CAAC3f,KAAlB,EAAyB,iFAAzB;AACD;AACF;AACF,KA7BD;;AA+BA,QAAIwgC,UAAU,CAAC1/B,MAAf,EAAuB;AACrB,YAAM,KAAKC,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,6CAA7B,CAAN;AACD;;AAED,SAAKwD,KAAL,CAAWimC,UAAX;AACA,WAAO,KAAKvlC,UAAL,CAAgBlB,SAAhB,EAA2B,WAA3B,CAAP;AACD;;AAED6+B,EAAAA,gBAAgB,CAAC7+B,SAAD,EAAY2c,MAAZ,EAAoBnc,KAApB,EAA2Bs+B,sBAA3B,EAAmD;AACjE,QAAI5wB,QAAQ,GAAG,KAAf;AACA,UAAM7M,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;;AAEA,QAAI,KAAKuH,KAAL,CAAWzU,KAAK,CAACL,IAAjB,KAA0B,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,QAAnD,EAA6D;AAC3D,YAAMgM,GAAG,GAAG,KAAKqK,eAAL,CAAqB,IAArB,CAAZ;;AAEA,UAAI,KAAKsM,aAAL,EAAJ,EAA0B;AACxB,cAAMvZ,MAAM,GAAG2gB,MAAf;AACA3gB,QAAAA,MAAM,CAACD,IAAP,GAAc,QAAd;AACAC,QAAAA,MAAM,CAAC0C,QAAP,GAAkB,KAAlB;AACA1C,QAAAA,MAAM,CAAC4C,GAAP,GAAaA,GAAb;AACA5C,QAAAA,MAAM,CAACmS,MAAP,GAAgB,KAAhB;AACA,aAAKpO,eAAL,CAAqBC,SAArB,EAAgChE,MAAhC,EAAwC,KAAxC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,KAA7D;AACA;AACD,OARD,MAQO,IAAI,KAAKwZ,eAAL,EAAJ,EAA4B;AACjC,cAAM7X,IAAI,GAAGgf,MAAb;AACAhf,QAAAA,IAAI,CAACe,QAAL,GAAgB,KAAhB;AACAf,QAAAA,IAAI,CAACiB,GAAL,GAAWA,GAAX;AACAjB,QAAAA,IAAI,CAACwQ,MAAL,GAAc,KAAd;AACAnO,QAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoB,KAAKgV,kBAAL,CAAwB1X,IAAxB,CAApB;AACA;AACD,OAPM,MAOA,IAAI0D,WAAJ,EAAiB;AACtB,cAAM,KAAKoJ,UAAL,EAAN;AACD;;AAEDyD,MAAAA,QAAQ,GAAG,IAAX;AACD;;AAED,SAAK6wB,4BAAL,CAAkC/+B,SAAlC,EAA6C2c,MAA7C,EAAqDnc,KAArD,EAA4D0N,QAA5D,EAAsE4wB,sBAAtE;AACD;;AAEDC,EAAAA,4BAA4B,CAAC/+B,SAAD,EAAY2c,MAAZ,EAAoBnc,KAApB,EAA2B0N,QAA3B,EAAqC4wB,sBAArC,EAA6D;AACvF,UAAMwa,YAAY,GAAG38B,MAArB;AACA,UAAM48B,aAAa,GAAG58B,MAAtB;AACA,UAAM68B,UAAU,GAAG78B,MAAnB;AACA,UAAM88B,WAAW,GAAG98B,MAApB;AACA,UAAM3gB,MAAM,GAAGs9C,YAAf;AACA,UAAMI,YAAY,GAAGJ,YAArB;AACA38B,IAAAA,MAAM,CAACxO,MAAP,GAAgBD,QAAhB;;AAEA,QAAI,KAAK1F,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAJ,EAA0B;AACxB+E,MAAAA,MAAM,CAACD,IAAP,GAAc,QAAd;AACA,WAAK49C,sBAAL,CAA4B39C,MAA5B;;AAEA,UAAIA,MAAM,CAAC4C,GAAP,CAAW9C,IAAX,KAAoB,aAAxB,EAAuC;AACrC,aAAK4Z,sBAAL,CAA4B1V,SAA5B,EAAuCu5C,aAAvC,EAAsD,IAAtD,EAA4D,KAA5D;AACA;AACD;;AAED,UAAI,KAAK9jC,sBAAL,CAA4B6jC,YAA5B,CAAJ,EAA+C;AAC7C,aAAKv7C,KAAL,CAAWu7C,YAAY,CAAC16C,GAAb,CAAiB5B,KAA5B,EAAmC,kCAAnC;AACD;;AAED,WAAK+C,eAAL,CAAqBC,SAArB,EAAgCs5C,YAAhC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D,KAA3D,EAAkE,KAAlE;AACA;AACD;;AAED,UAAMj4C,WAAW,GAAG,KAAKb,KAAL,CAAWa,WAA/B;AACA,UAAMzC,GAAG,GAAG,KAAK+6C,sBAAL,CAA4Bh9B,MAA5B,CAAZ;AACA,UAAMy1B,SAAS,GAAGxzC,GAAG,CAAC9C,IAAJ,KAAa,aAA/B;AACA,UAAM89C,QAAQ,GAAGh7C,GAAG,CAAC9C,IAAJ,KAAa,YAA9B;AACA,UAAM+9C,uBAAuB,GAAG,KAAKr5C,KAAL,CAAWxD,KAA3C;AACA,SAAKgiC,4BAAL,CAAkC0a,YAAlC;;AAEA,QAAI,KAAKnkC,aAAL,EAAJ,EAA0B;AACxBvZ,MAAAA,MAAM,CAACD,IAAP,GAAc,QAAd;;AAEA,UAAIq2C,SAAJ,EAAe;AACb,aAAK18B,sBAAL,CAA4B1V,SAA5B,EAAuCu5C,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACA;AACD;;AAED,YAAMt5C,aAAa,GAAG,KAAKwV,sBAAL,CAA4B6jC,YAA5B,CAAtB;AACA,UAAIp5C,iBAAiB,GAAG,KAAxB;;AAEA,UAAID,aAAJ,EAAmB;AACjBq5C,QAAAA,YAAY,CAACv9C,IAAb,GAAoB,aAApB;;AAEA,YAAIyE,KAAK,CAAC64C,cAAN,IAAwB,CAAC,KAAK1hC,SAAL,CAAe,YAAf,CAA7B,EAA2D;AACzD,eAAK5Z,KAAL,CAAWa,GAAG,CAAC5B,KAAf,EAAsB,yCAAtB;AACD;;AAEDwD,QAAAA,KAAK,CAAC64C,cAAN,GAAuB,IAAvB;AACAn5C,QAAAA,iBAAiB,GAAG4+B,sBAApB;AACD;;AAED,WAAK/+B,eAAL,CAAqBC,SAArB,EAAgCs5C,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4Dr5C,aAA5D,EAA2EC,iBAA3E;AACD,KAvBD,MAuBO,IAAI,KAAKsV,eAAL,EAAJ,EAA4B;AACjC,UAAI48B,SAAJ,EAAe;AACb,aAAK0H,wBAAL,CAA8B95C,SAA9B,EAAyCy5C,WAAzC;AACD,OAFD,MAEO;AACL,aAAKM,iBAAL,CAAuB/5C,SAAvB,EAAkCw5C,UAAlC;AACD;AACF,KANM,MAMA,IAAII,QAAQ,IAAIh7C,GAAG,CAAC9K,IAAJ,KAAa,OAAzB,IAAoC,CAACuN,WAArC,IAAoD,CAAC,KAAKm7B,gBAAL,EAAzD,EAAkF;AACvF,YAAMniC,WAAW,GAAG,KAAKmO,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAApB;;AAEA,UAAIyiD,YAAY,CAACprC,QAAjB,EAA2B;AACzB,aAAK7D,UAAL,CAAgBovC,uBAAhB;AACD;;AAED79C,MAAAA,MAAM,CAACD,IAAP,GAAc,QAAd;AACA,WAAK49C,sBAAL,CAA4B39C,MAA5B;AACA,WAAKgjC,4BAAL,CAAkC0a,YAAlC;;AAEA,UAAI19C,MAAM,CAAC4C,GAAP,CAAW9C,IAAX,KAAoB,aAAxB,EAAuC;AACrC,aAAK4Z,sBAAL,CAA4B1V,SAA5B,EAAuCu5C,aAAvC,EAAsDl/C,WAAtD,EAAmE,IAAnE;AACD,OAFD,MAEO;AACL,YAAI,KAAKob,sBAAL,CAA4B6jC,YAA5B,CAAJ,EAA+C;AAC7C,eAAKv7C,KAAL,CAAWu7C,YAAY,CAAC16C,GAAb,CAAiB5B,KAA5B,EAAmC,wCAAnC;AACD;;AAED,aAAK+C,eAAL,CAAqBC,SAArB,EAAgCs5C,YAAhC,EAA8Cj/C,WAA9C,EAA2D,IAA3D,EAAiE,KAAjE,EAAwE,KAAxE;AACD;AACF,KApBM,MAoBA,IAAIu/C,QAAQ,KAAKh7C,GAAG,CAAC9K,IAAJ,KAAa,KAAb,IAAsB8K,GAAG,CAAC9K,IAAJ,KAAa,KAAxC,CAAR,IAA0D,CAACuN,WAA3D,IAA0E,EAAE,KAAKuH,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,KAA0B,KAAKulC,gBAAL,EAA5B,CAA9E,EAAoI;AACzIxgC,MAAAA,MAAM,CAACD,IAAP,GAAc6C,GAAG,CAAC9K,IAAlB;AACA,WAAK6lD,sBAAL,CAA4BL,YAA5B;;AAEA,UAAIt9C,MAAM,CAAC4C,GAAP,CAAW9C,IAAX,KAAoB,aAAxB,EAAuC;AACrC,aAAK4Z,sBAAL,CAA4B1V,SAA5B,EAAuCu5C,aAAvC,EAAsD,KAAtD,EAA6D,KAA7D;AACD,OAFD,MAEO;AACL,YAAI,KAAK9jC,sBAAL,CAA4B6jC,YAA5B,CAAJ,EAA+C;AAC7C,eAAKv7C,KAAL,CAAWu7C,YAAY,CAAC16C,GAAb,CAAiB5B,KAA5B,EAAmC,yCAAnC;AACD;;AAED,aAAK+C,eAAL,CAAqBC,SAArB,EAAgCs5C,YAAhC,EAA8C,KAA9C,EAAqD,KAArD,EAA4D,KAA5D,EAAmE,KAAnE;AACD;;AAED,WAAK57C,uBAAL,CAA6B47C,YAA7B;AACD,KAfM,MAeA,IAAI,KAAK9c,gBAAL,EAAJ,EAA6B;AAClC,UAAI4V,SAAJ,EAAe;AACb,aAAK0H,wBAAL,CAA8B95C,SAA9B,EAAyCy5C,WAAzC;AACD,OAFD,MAEO;AACL,aAAKM,iBAAL,CAAuB/5C,SAAvB,EAAkCw5C,UAAlC;AACD;AACF,KANM,MAMA;AACL,WAAK/uC,UAAL;AACD;AACF;;AAEDkvC,EAAAA,sBAAsB,CAACh9B,MAAD,EAAS;AAC7B,UAAM/d,GAAG,GAAG,KAAKkX,iBAAL,CAAuB6G,MAAvB,CAAZ;;AAEA,QAAI,CAACA,MAAM,CAACje,QAAR,IAAoBie,MAAM,CAACxO,MAA3B,KAAsCvP,GAAG,CAAC9K,IAAJ,KAAa,WAAb,IAA4B8K,GAAG,CAAChM,KAAJ,KAAc,WAAhF,CAAJ,EAAkG;AAChG,WAAKmL,KAAL,CAAWa,GAAG,CAAC5B,KAAf,EAAsB,sDAAtB;AACD;;AAED,QAAI4B,GAAG,CAAC9C,IAAJ,KAAa,aAAb,IAA8B8C,GAAG,CAACoK,EAAJ,CAAOlV,IAAP,KAAgB,aAAlD,EAAiE;AAC/D,WAAKiK,KAAL,CAAWa,GAAG,CAAC5B,KAAf,EAAsB,2DAAtB;AACD;;AAED,WAAO4B,GAAP;AACD;;AAEDm7C,EAAAA,iBAAiB,CAAC/5C,SAAD,EAAYrC,IAAZ,EAAkB;AACjC,QAAI,CAACA,IAAI,CAACe,QAAN,KAAmBf,IAAI,CAACiB,GAAL,CAAS9K,IAAT,KAAkB,aAAlB,IAAmC6J,IAAI,CAACiB,GAAL,CAAShM,KAAT,KAAmB,aAAzE,CAAJ,EAA6F;AAC3F,WAAKmL,KAAL,CAAWJ,IAAI,CAACiB,GAAL,CAAS5B,KAApB,EAA2B,kDAA3B;AACD;;AAEDgD,IAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoB,KAAKgV,kBAAL,CAAwB1X,IAAxB,CAApB;AACD;;AAEDm8C,EAAAA,wBAAwB,CAAC95C,SAAD,EAAYrC,IAAZ,EAAkB;AACxC,SAAKwb,YAAL,CAAkB,wBAAlB,EAA4Cxb,IAAI,CAACiB,GAAL,CAAS5B,KAArD;AACAgD,IAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoB,KAAKiV,yBAAL,CAA+B3X,IAA/B,CAApB;AACD;;AAEDoC,EAAAA,eAAe,CAACC,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C6F,aAA1C,EAAyDC,iBAAzD,EAA4E;AACzFF,IAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoB,KAAKF,WAAL,CAAiBnE,MAAjB,EAAyB3B,WAAzB,EAAsCD,OAAtC,EAA+C6F,aAA/C,EAA8DC,iBAA9D,EAAiF,aAAjF,EAAgG,IAAhG,CAApB;AACD;;AAEDwV,EAAAA,sBAAsB,CAAC1V,SAAD,EAAYhE,MAAZ,EAAoB3B,WAApB,EAAiCD,OAAjC,EAA0C;AAC9D,SAAK+e,YAAL,CAAkB,qBAAlB,EAAyCnd,MAAM,CAAC4C,GAAP,CAAW5B,KAApD;AACAgD,IAAAA,SAAS,CAACf,IAAV,CAAeoB,IAAf,CAAoB,KAAKF,WAAL,CAAiBnE,MAAjB,EAAyB3B,WAAzB,EAAsCD,OAAtC,EAA+C,KAA/C,EAAsD,KAAtD,EAA6D,oBAA7D,EAAmF,IAAnF,CAApB;AACD;;AAED4kC,EAAAA,4BAA4B,CAACC,YAAD,EAAe,CAAE;;AAE7CvB,EAAAA,mBAAmB,GAAG;AACpB,WAAO12B,SAAP;AACD;;AAEDsO,EAAAA,yBAAyB,CAACzZ,IAAD,EAAO;AAC9B,SAAK2E,KAAL,CAAW2lC,eAAX,GAA6B,IAA7B;AACA,SAAK5iC,KAAL,CAAWqH,KAAX,CAAiB5Q,WAAW,GAAGF,WAA/B;AACA+B,IAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK4V,GAAL,CAASrU,KAAK,CAAC6B,EAAf,IAAqB,KAAK2c,gBAAL,EAArB,GAA+C,IAA5D;AACA,SAAK/I,SAAL;AACA,SAAKpJ,KAAL,CAAW2lC,eAAX,GAA6B,KAA7B;AACA,SAAK5iC,KAAL,CAAWwH,IAAX;AACA,WAAO,KAAK7J,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAEDwZ,EAAAA,kBAAkB,CAACxZ,IAAD,EAAO;AACvB,QAAI,CAACA,IAAI,CAAC6N,cAAV,EAA0B;AACxB,WAAKyP,YAAL,CAAkB,iBAAlB;AACD;;AAED,SAAK3Y,KAAL,CAAW2lC,eAAX,GAA6B,IAA7B;AACA,SAAK5iC,KAAL,CAAWqH,KAAX,CAAiB5Q,WAAW,GAAGF,WAA/B;;AAEA,QAAI,KAAK8O,KAAL,CAAWzU,KAAK,CAAC6B,EAAjB,CAAJ,EAA0B;AACxB,WAAKmjB,YAAL,CAAkB,iBAAlB;AACA,WAAKvT,IAAL;AACA/J,MAAAA,IAAI,CAACjJ,KAAL,GAAa,KAAK+f,gBAAL,EAAb;AACD,KAJD,MAIO;AACL9W,MAAAA,IAAI,CAACjJ,KAAL,GAAa,IAAb;AACD;;AAED,SAAKgX,SAAL;AACA,SAAKpJ,KAAL,CAAW2lC,eAAX,GAA6B,KAA7B;AACA,SAAK5iC,KAAL,CAAWwH,IAAX;AACA,WAAO,KAAK7J,UAAL,CAAgBrF,IAAhB,EAAsB,eAAtB,CAAP;AACD;;AAEDyY,EAAAA,YAAY,CAACzY,IAAD,EAAO0Y,WAAP,EAAoBC,UAApB,EAAgCtW,WAAW,GAAGlD,UAA9C,EAA0D;AACpE,QAAI,KAAK4N,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1B+H,MAAAA,IAAI,CAACmN,EAAL,GAAU,KAAKC,eAAL,EAAV;;AAEA,UAAIsL,WAAJ,EAAiB;AACf,aAAKvW,SAAL,CAAenC,IAAI,CAACmN,EAApB,EAAwB9K,WAAxB,EAAqC8I,SAArC,EAAgD,YAAhD;AACD;AACF,KAND,MAMO;AACL,UAAIwN,UAAU,IAAI,CAACD,WAAnB,EAAgC;AAC9B1Y,QAAAA,IAAI,CAACmN,EAAL,GAAU,IAAV;AACD,OAFD,MAEO;AACL,aAAKyB,UAAL,CAAgB,IAAhB,EAAsB,0BAAtB;AACD;AACF;AACF;;AAEDkL,EAAAA,eAAe,CAAC9Z,IAAD,EAAO;AACpBA,IAAAA,IAAI,CAACK,UAAL,GAAkB,KAAKsM,GAAL,CAASrU,KAAK,CAACyE,QAAf,IAA2B,KAAK43C,mBAAL,EAA3B,GAAwD,IAA1E;AACD;;AAEDnlC,EAAAA,WAAW,CAACxP,IAAD,EAAO;AAChB,UAAMm+C,UAAU,GAAG,KAAKlZ,gCAAL,CAAsCjlC,IAAtC,CAAnB;AACA,UAAMo+C,iBAAiB,GAAG,CAACD,UAAD,IAAe,KAAKxxC,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAzC;AACA,UAAMilD,OAAO,GAAGD,iBAAiB,IAAI,KAAK/lC,aAAL,CAAmBrY,IAAnB,CAArC;AACA,UAAMwY,YAAY,GAAG6lC,OAAO,IAAI,KAAK9lC,kCAAL,CAAwCvY,IAAxC,CAAhC;AACA,UAAMs+C,mBAAmB,GAAGF,iBAAiB,KAAK,CAAC5lC,YAAD,IAAiB,KAAK7L,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAtB,CAA7C;AACA,UAAMmlD,cAAc,GAAGJ,UAAU,IAAIE,OAArC;;AAEA,QAAIA,OAAO,IAAI,CAAC7lC,YAAhB,EAA8B;AAC5B,UAAI2lC,UAAJ,EAAgB,KAAKvvC,UAAL;AAChB,WAAKwJ,eAAL,CAAqBpY,IAArB,EAA2B,IAA3B;AACA,aAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,sBAAtB,CAAP;AACD;;AAED,UAAMw+C,aAAa,GAAG,KAAKC,+BAAL,CAAqCz+C,IAArC,CAAtB;;AAEA,QAAIm+C,UAAU,IAAIC,iBAAd,IAAmC,CAACC,OAApC,IAA+C,CAACG,aAAhD,IAAiEhmC,YAAY,IAAI8lC,mBAAhB,IAAuC,CAACE,aAA7G,EAA4H;AAC1H,YAAM,KAAK5vC,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAACQ,MAA5B,CAAN;AACD;;AAED,QAAI4lD,cAAJ;;AAEA,QAAIH,cAAc,IAAIC,aAAtB,EAAqC;AACnCE,MAAAA,cAAc,GAAG,KAAjB;AACA,WAAKtmC,eAAL,CAAqBpY,IAArB,EAA2Bu+C,cAA3B;AACD,KAHD,MAGO;AACLG,MAAAA,cAAc,GAAG,KAAKC,2BAAL,CAAiC3+C,IAAjC,CAAjB;AACD;;AAED,QAAIu+C,cAAc,IAAIC,aAAlB,IAAmCE,cAAvC,EAAuD;AACrD,WAAKxZ,WAAL,CAAiBllC,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,CAAC,CAACA,IAAI,CAACgG,MAA3C;AACA,aAAO,KAAKX,UAAL,CAAgBrF,IAAhB,EAAsB,wBAAtB,CAAP;AACD;;AAED,QAAI,KAAK2M,GAAL,CAASrU,KAAK,CAACsD,QAAf,CAAJ,EAA8B;AAC5BoE,MAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAKwL,4BAAL,EAAnB;AACA,WAAKsvB,WAAL,CAAiBllC,IAAjB,EAAuB,IAAvB,EAA6B,IAA7B;AACA,aAAO,KAAKqF,UAAL,CAAgBrF,IAAhB,EAAsB,0BAAtB,CAAP;AACD;;AAED,UAAM,KAAK4O,UAAL,CAAgB,IAAhB,EAAsBtW,KAAK,CAACQ,MAA5B,CAAN;AACD;;AAEDuf,EAAAA,aAAa,CAACrY,IAAD,EAAO;AAClB,WAAO,KAAK2M,GAAL,CAASrU,KAAK,CAAC8C,IAAf,CAAP;AACD;;AAED6pC,EAAAA,gCAAgC,CAACjlC,IAAD,EAAO;AACrC,QAAI,KAAK2V,wBAAL,EAAJ,EAAqC;AACnC,WAAK2H,YAAL,CAAkB,mBAAlB;AACA,YAAM9C,SAAS,GAAG,KAAKpV,SAAL,EAAlB;AACAoV,MAAAA,SAAS,CAACwqB,QAAV,GAAqB,KAAK53B,eAAL,CAAqB,IAArB,CAArB;AACApN,MAAAA,IAAI,CAACkY,UAAL,GAAkB,CAAC,KAAK7S,UAAL,CAAgBmV,SAAhB,EAA2B,wBAA3B,CAAD,CAAlB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDjC,EAAAA,kCAAkC,CAACvY,IAAD,EAAO;AACvC,QAAI,KAAKuO,YAAL,CAAkB,IAAlB,CAAJ,EAA6B;AAC3B,UAAI,CAACvO,IAAI,CAACkY,UAAV,EAAsBlY,IAAI,CAACkY,UAAL,GAAkB,EAAlB;AACtB,YAAMsC,SAAS,GAAG,KAAKtZ,WAAL,CAAiB,KAAKyD,KAAL,CAAW0J,YAA5B,EAA0C,KAAK1J,KAAL,CAAW8kC,eAArD,CAAlB;AACA,WAAK1/B,IAAL;AACAyQ,MAAAA,SAAS,CAACwqB,QAAV,GAAqB,KAAK53B,eAAL,CAAqB,IAArB,CAArB;AACApN,MAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,KAAKa,UAAL,CAAgBmV,SAAhB,EAA2B,0BAA3B,CAArB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDikC,EAAAA,+BAA+B,CAACz+C,IAAD,EAAO;AACpC,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAACQ,MAAjB,CAAJ,EAA8B;AAC5B,UAAI,CAACkH,IAAI,CAACkY,UAAV,EAAsBlY,IAAI,CAACkY,UAAL,GAAkB,EAAlB;AACtBlY,MAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,GAAG,KAAK2T,qBAAL,EAAxB;AACAnY,MAAAA,IAAI,CAACgG,MAAL,GAAc,IAAd;AACAhG,MAAAA,IAAI,CAACoK,WAAL,GAAmB,IAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDu0C,EAAAA,2BAA2B,CAAC3+C,IAAD,EAAO;AAChC,QAAI,KAAK0V,4BAAL,EAAJ,EAAyC;AACvC,UAAI,KAAKnH,YAAL,CAAkB,OAAlB,CAAJ,EAAgC;AAC9B,cAAMxE,IAAI,GAAG,KAAKwiC,cAAL,EAAb;;AAEA,YAAI,CAAC,KAAK6E,oBAAL,CAA0BrnC,IAA1B,EAAgC,UAAhC,CAAL,EAAkD;AAChD,eAAK6E,UAAL,CAAgB7E,IAAhB,EAAuB,uCAAvB;AACD;AACF;;AAED/J,MAAAA,IAAI,CAACkY,UAAL,GAAkB,EAAlB;AACAlY,MAAAA,IAAI,CAACgG,MAAL,GAAc,IAAd;AACAhG,MAAAA,IAAI,CAACoK,WAAL,GAAmB,KAAK4N,sBAAL,CAA4BhY,IAA5B,CAAnB;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDm7C,EAAAA,eAAe,GAAG;AAChB,QAAI,CAAC,KAAK5sC,YAAL,CAAkB,OAAlB,CAAL,EAAiC,OAAO,KAAP;AACjC,UAAMxE,IAAI,GAAG,KAAKwiC,cAAL,EAAb;AACA,WAAO,CAACzmC,SAAS,CAACiC,IAAV,CAAe,KAAKC,KAAL,CAAWtG,KAAX,CAAiB,KAAKiD,KAAL,CAAW8E,GAA5B,EAAiCM,IAAjC,CAAf,CAAD,IAA2D,KAAKqnC,oBAAL,CAA0BrnC,IAA1B,EAAgC,UAAhC,CAAlE;AACD;;AAED6L,EAAAA,4BAA4B,GAAG;AAC7B,UAAMxT,IAAI,GAAG,KAAKgD,SAAL,EAAb;AACA,UAAM7G,OAAO,GAAG,KAAK48C,eAAL,EAAhB;;AAEA,QAAI,KAAKpuC,KAAL,CAAWzU,KAAK,CAAC2D,SAAjB,KAA+BsC,OAAnC,EAA4C;AAC1C,WAAKwL,IAAL;;AAEA,UAAIxL,OAAJ,EAAa;AACX,aAAKwL,IAAL;AACD;;AAED,aAAO,KAAK+rC,aAAL,CAAmB1zC,IAAnB,EAAyBy3C,cAAc,GAAGE,gBAA1C,EAA4Dx7C,OAA5D,CAAP;AACD,KARD,MAQO,IAAI,KAAKwO,KAAL,CAAWzU,KAAK,CAACwE,MAAjB,CAAJ,EAA8B;AACnC,aAAO,KAAKgkC,UAAL,CAAgB1+B,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAFM,MAEA,IAAI,KAAK2K,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAJ,EAA0B;AAC/B,UAAI,KAAK8hB,SAAL,CAAe,YAAf,KAAgC,KAAKzQ,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAApC,EAAkG;AAChG,aAAKnJ,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,6DAA6D,kEAA7D,GAAkI,0CAA/J;AACD;;AAED,WAAKg1C,eAAL,CAAqB,KAArB;AACA,aAAO,KAAKrV,UAAL,CAAgB1+B,IAAhB,EAAsB,IAAtB,EAA4B,IAA5B,CAAP;AACD,KAPM,MAOA,IAAI,KAAK2K,KAAL,CAAWzU,KAAK,CAACkE,MAAjB,KAA4B,KAAKuQ,KAAL,CAAWzU,KAAK,CAACiE,IAAjB,CAA5B,IAAsD,KAAK+S,KAAL,EAA1D,EAAwE;AAC7E,YAAM,KAAKpN,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,6EAA7B,CAAN;AACD,KAFM,MAEA;AACL,YAAMo/B,GAAG,GAAG,KAAKzpB,gBAAL,EAAZ;AACA,WAAK/I,SAAL;AACA,aAAOwyB,GAAP;AACD;AACF;;AAEDvoB,EAAAA,sBAAsB,CAAChY,IAAD,EAAO;AAC3B,WAAO,KAAKuV,cAAL,CAAoB,IAApB,CAAP;AACD;;AAEDI,EAAAA,wBAAwB,GAAG;AACzB,QAAI,KAAK5I,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAJ,EAA4B;AAC1B,aAAO,KAAK0M,KAAL,CAAW5N,KAAX,KAAqB,OAArB,IAAgC,KAAK4N,KAAL,CAAW5N,KAAX,KAAqB,KAA5D;AACD;;AAED,QAAI,CAAC,KAAKgW,KAAL,CAAWzU,KAAK,CAACsD,QAAjB,CAAL,EAAiC;AAC/B,aAAO,KAAP;AACD;;AAED,UAAMmO,IAAI,GAAG,KAAKwiC,cAAL,EAAb;AACA,WAAO,KAAKvkC,KAAL,CAAW6Q,UAAX,CAAsB9O,IAAtB,MAAgC,EAAhC,IAAsC,KAAKqnC,oBAAL,CAA0BrnC,IAA1B,EAAgC,MAAhC,CAA7C;AACD;;AAEDqO,EAAAA,eAAe,CAACpY,IAAD,EAAOkM,MAAP,EAAe;AAC5B,QAAI,KAAKiC,aAAL,CAAmB,MAAnB,CAAJ,EAAgC;AAC9BnO,MAAAA,IAAI,CAACgG,MAAL,GAAc,KAAKu/B,iBAAL,EAAd;AACA,WAAKL,WAAL,CAAiBllC,IAAjB;AACD,KAHD,MAGO;AACL,UAAIkM,MAAJ,EAAY;AACV,aAAK0C,UAAL;AACD,OAFD,MAEO;AACL5O,QAAAA,IAAI,CAACgG,MAAL,GAAc,IAAd;AACD;AACF;;AAED,SAAK+H,SAAL;AACD;;AAED2H,EAAAA,4BAA4B,GAAG;AAC7B,QAAI,KAAK3I,KAAL,CAAWzU,KAAK,CAAC0B,EAAjB,CAAJ,EAA0B;AACxB,WAAKw3C,eAAL,CAAqB,CAAC,YAAD,EAAe,mBAAf,CAArB;;AAEA,UAAI,KAAK11B,SAAL,CAAe,YAAf,CAAJ,EAAkC;AAChC,YAAI,KAAKzQ,eAAL,CAAqB,YAArB,EAAmC,wBAAnC,CAAJ,EAAkE;AAChE,eAAKuD,UAAL,CAAgB,KAAKjK,KAAL,CAAWxD,KAA3B,EAAkC,6DAA6D,kEAA7D,GAAkI,0CAApK;AACD,SAFD,MAEO;AACL,iBAAO,IAAP;AACD;AACF;AACF;;AAED,WAAO,KAAKwD,KAAL,CAAW1E,IAAX,CAAgBvI,OAAhB,KAA4B,KAA5B,IAAqC,KAAKiN,KAAL,CAAW1E,IAAX,CAAgBvI,OAAhB,KAA4B,OAAjE,IAA4E,KAAKiN,KAAL,CAAW1E,IAAX,CAAgBvI,OAAhB,KAA4B,UAAxG,IAAsH,KAAKiN,KAAL,CAAW1E,IAAX,CAAgBvI,OAAhB,KAA4B,OAAlJ,IAA6J,KAAK4X,KAAL,EAA7J,IAA6K,KAAK6rC,eAAL,EAApL;AACD;;AAEDjW,EAAAA,WAAW,CAACllC,IAAD,EAAO4+C,UAAP,EAAmBC,SAAnB,EAA8BC,MAA9B,EAAsC;AAC/C,QAAIF,UAAJ,EAAgB;AACd,UAAIC,SAAJ,EAAe;AACb,aAAKjc,qBAAL,CAA2B5iC,IAA3B,EAAiC,SAAjC;AACD,OAFD,MAEO,IAAIA,IAAI,CAACkY,UAAL,IAAmBlY,IAAI,CAACkY,UAAL,CAAgBjW,MAAvC,EAA+C;AACpD,aAAK,IAAIuf,GAAG,GAAG,CAAV,EAAau9B,gBAAgB,GAAG/+C,IAAI,CAACkY,UAA1C,EAAsDsJ,GAAG,GAAGu9B,gBAAgB,CAAC98C,MAA7E,EAAqFuf,GAAG,EAAxF,EAA4F;AAC1F,gBAAMhH,SAAS,GAAGukC,gBAAgB,CAACv9B,GAAD,CAAlC;AACA,eAAKohB,qBAAL,CAA2BpoB,SAA3B,EAAsCA,SAAS,CAACwqB,QAAV,CAAmB/sC,IAAzD;;AAEA,cAAI,CAAC6mD,MAAD,IAAWtkC,SAAS,CAACC,KAAzB,EAAgC;AAC9B,iBAAKY,iBAAL,CAAuBb,SAAS,CAACC,KAAV,CAAgBxiB,IAAvC,EAA6CuiB,SAAS,CAACC,KAAV,CAAgBtZ,KAA7D,EAAoE,IAApE,EAA0E,KAA1E;AACA,iBAAKuG,KAAL,CAAWsuB,gBAAX,CAA4Bxb,SAAS,CAACC,KAAtC;AACD;AACF;AACF,OAVM,MAUA,IAAIza,IAAI,CAACoK,WAAT,EAAsB;AAC3B,YAAIpK,IAAI,CAACoK,WAAL,CAAiBnK,IAAjB,KAA0B,qBAA1B,IAAmDD,IAAI,CAACoK,WAAL,CAAiBnK,IAAjB,KAA0B,kBAAjF,EAAqG;AACnG,gBAAMkN,EAAE,GAAGnN,IAAI,CAACoK,WAAL,CAAiB+C,EAA5B;AACA,cAAI,CAACA,EAAL,EAAS,MAAM,IAAItB,KAAJ,CAAU,mBAAV,CAAN;AACT,eAAK+2B,qBAAL,CAA2B5iC,IAA3B,EAAiCmN,EAAE,CAAClV,IAApC;AACD,SAJD,MAIO,IAAI+H,IAAI,CAACoK,WAAL,CAAiBnK,IAAjB,KAA0B,qBAA9B,EAAqD;AAC1D,eAAK,IAAIyhB,GAAG,GAAG,CAAV,EAAas9B,qBAAqB,GAAGh/C,IAAI,CAACoK,WAAL,CAAiB2xC,YAA3D,EAAyEr6B,GAAG,GAAGs9B,qBAAqB,CAAC/8C,MAArG,EAA6Gyf,GAAG,EAAhH,EAAoH;AAClH,kBAAMtX,WAAW,GAAG40C,qBAAqB,CAACt9B,GAAD,CAAzC;AACA,iBAAK9f,gBAAL,CAAsBwI,WAAW,CAAC+C,EAAlC;AACD;AACF;AACF;AACF;;AAED,UAAMouC,wBAAwB,GAAG,KAAK52C,KAAL,CAAWmmC,cAAX,CAA0B,KAAKnmC,KAAL,CAAWmmC,cAAX,CAA0B7oC,MAA1B,GAAmC,CAA7D,CAAjC;;AAEA,QAAIs5C,wBAAwB,CAACt5C,MAA7B,EAAqC;AACnC,YAAM4N,OAAO,GAAG7P,IAAI,CAACoK,WAAL,KAAqBpK,IAAI,CAACoK,WAAL,CAAiBnK,IAAjB,KAA0B,kBAA1B,IAAgDD,IAAI,CAACoK,WAAL,CAAiBnK,IAAjB,KAA0B,iBAA/F,CAAhB;;AAEA,UAAI,CAACD,IAAI,CAACoK,WAAN,IAAqB,CAACyF,OAA1B,EAAmC;AACjC,cAAM,KAAK3N,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuB,iEAAvB,CAAN;AACD;;AAED,WAAK2jC,cAAL,CAAoB9kC,IAAI,CAACoK,WAAzB;AACD;AACF;;AAEDxI,EAAAA,gBAAgB,CAAC5B,IAAD,EAAO;AACrB,QAAIA,IAAI,CAACC,IAAL,KAAc,YAAlB,EAAgC;AAC9B,WAAK2iC,qBAAL,CAA2B5iC,IAA3B,EAAiCA,IAAI,CAAC/H,IAAtC;AACD,KAFD,MAEO,IAAI+H,IAAI,CAACC,IAAL,KAAc,eAAlB,EAAmC;AACxC,WAAK,IAAIg/C,GAAG,GAAG,CAAV,EAAaC,gBAAgB,GAAGl/C,IAAI,CAACyC,UAA1C,EAAsDw8C,GAAG,GAAGC,gBAAgB,CAACj9C,MAA7E,EAAqFg9C,GAAG,EAAxF,EAA4F;AAC1F,cAAMn9C,IAAI,GAAGo9C,gBAAgB,CAACD,GAAD,CAA7B;AACA,aAAKr9C,gBAAL,CAAsBE,IAAtB;AACD;AACF,KALM,MAKA,IAAI9B,IAAI,CAACC,IAAL,KAAc,cAAlB,EAAkC;AACvC,WAAK,IAAIk/C,GAAG,GAAG,CAAV,EAAaC,cAAc,GAAGp/C,IAAI,CAACiZ,QAAxC,EAAkDkmC,GAAG,GAAGC,cAAc,CAACn9C,MAAvE,EAA+Ek9C,GAAG,EAAlF,EAAsF;AACpF,cAAM5L,IAAI,GAAG6L,cAAc,CAACD,GAAD,CAA3B;;AAEA,YAAI5L,IAAJ,EAAU;AACR,eAAK3xC,gBAAL,CAAsB2xC,IAAtB;AACD;AACF;AACF,KARM,MAQA,IAAIvzC,IAAI,CAACC,IAAL,KAAc,gBAAlB,EAAoC;AACzC,WAAK2B,gBAAL,CAAsB5B,IAAI,CAACjJ,KAA3B;AACD,KAFM,MAEA,IAAIiJ,IAAI,CAACC,IAAL,KAAc,aAAlB,EAAiC;AACtC,WAAK2B,gBAAL,CAAsB5B,IAAI,CAAC2T,QAA3B;AACD,KAFM,MAEA,IAAI3T,IAAI,CAACC,IAAL,KAAc,mBAAlB,EAAuC;AAC5C,WAAK2B,gBAAL,CAAsB5B,IAAI,CAACqa,IAA3B;AACD;AACF;;AAEDuoB,EAAAA,qBAAqB,CAAC5iC,IAAD,EAAO/H,IAAP,EAAa;AAChC,QAAI,KAAK0M,KAAL,CAAWymC,mBAAX,CAA+BzzB,OAA/B,CAAuC1f,IAAvC,IAA+C,CAAC,CAApD,EAAuD;AACrD,WAAKiK,KAAL,CAAWlC,IAAI,CAACmB,KAAhB,EAAuBlJ,IAAI,KAAK,SAAT,GAAqB,6CAArB,GAAsE,KAAIA,IAAK,oEAAtG;AACD;;AAED,SAAK0M,KAAL,CAAWymC,mBAAX,CAA+B5mC,IAA/B,CAAoCvM,IAApC;AACD;;AAEDkgB,EAAAA,qBAAqB,GAAG;AACtB,UAAMknC,KAAK,GAAG,EAAd;AACA,QAAInM,KAAK,GAAG,IAAZ;AACA,SAAKhnC,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;;AAEA,WAAO,CAAC,KAAK6T,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAR,EAAgC;AAC9B,UAAIk6C,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,aAAKhnC,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACA,YAAI,KAAKuT,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAJ,EAA4B;AAC7B;;AAED,YAAMgH,IAAI,GAAG,KAAKoF,SAAL,EAAb;AACApF,MAAAA,IAAI,CAACya,KAAL,GAAa,KAAKrN,eAAL,CAAqB,IAArB,CAAb;AACApN,MAAAA,IAAI,CAACglC,QAAL,GAAgB,KAAK72B,aAAL,CAAmB,IAAnB,IAA2B,KAAKf,eAAL,CAAqB,IAArB,CAA3B,GAAwDpN,IAAI,CAACya,KAAL,CAAWS,OAAX,EAAxE;AACAmkC,MAAAA,KAAK,CAAC76C,IAAN,CAAW,KAAKa,UAAL,CAAgBrF,IAAhB,EAAsB,iBAAtB,CAAX;AACD;;AAED,WAAOq/C,KAAP;AACD;;AAEDpwC,EAAAA,WAAW,CAACjP,IAAD,EAAO;AAChBA,IAAAA,IAAI,CAACkY,UAAL,GAAkB,EAAlB;;AAEA,QAAI,CAAC,KAAKnL,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAL,EAA+B;AAC7B,YAAMylD,UAAU,GAAG,KAAKzjC,gCAAL,CAAsC1a,IAAtC,CAAnB;AACA,YAAMs/C,SAAS,GAAG,CAACnB,UAAD,IAAe,KAAKxxC,GAAL,CAASrU,KAAK,CAACc,KAAf,CAAjC;AACA,YAAMilD,OAAO,GAAGiB,SAAS,IAAI,KAAKja,6BAAL,CAAmCrlC,IAAnC,CAA7B;AACA,UAAIs/C,SAAS,IAAI,CAACjB,OAAlB,EAA2B,KAAK/Y,0BAAL,CAAgCtlC,IAAhC;AAC3B,WAAKwM,gBAAL,CAAsB,MAAtB;AACD;;AAEDxM,IAAAA,IAAI,CAACgG,MAAL,GAAc,KAAKu/B,iBAAL,EAAd;AACA,SAAKx3B,SAAL;AACA,WAAO,KAAK1I,UAAL,CAAgBrF,IAAhB,EAAsB,mBAAtB,CAAP;AACD;;AAEDulC,EAAAA,iBAAiB,GAAG;AAClB,QAAI,CAAC,KAAKx4B,KAAL,CAAWzU,KAAK,CAACI,MAAjB,CAAL,EAA+B,KAAKkW,UAAL;AAC/B,WAAO,KAAKnK,aAAL,EAAP;AACD;;AAED6V,EAAAA,wBAAwB,CAACta,IAAD,EAAO;AAC7B,WAAO,KAAK+M,KAAL,CAAWzU,KAAK,CAACL,IAAjB,CAAP;AACD;;AAEDsiB,EAAAA,yBAAyB,CAACva,IAAD,EAAOwa,SAAP,EAAkBva,IAAlB,EAAwBsC,kBAAxB,EAA4C;AACnEiY,IAAAA,SAAS,CAACC,KAAV,GAAkB,KAAKrN,eAAL,EAAlB;AACA,SAAKjL,SAAL,CAAeqY,SAAS,CAACC,KAAzB,EAAgCrb,YAAhC,EAA8C+L,SAA9C,EAAyD5I,kBAAzD;AACAvC,IAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,KAAKa,UAAL,CAAgBmV,SAAhB,EAA2Bva,IAA3B,CAArB;AACD;;AAEDya,EAAAA,gCAAgC,CAAC1a,IAAD,EAAO;AACrC,QAAI,KAAKsa,wBAAL,CAA8Bta,IAA9B,CAAJ,EAAyC;AACvC,WAAKua,yBAAL,CAA+Bva,IAA/B,EAAqC,KAAKoF,SAAL,EAArC,EAAuD,wBAAvD,EAAiF,0BAAjF;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAEDigC,EAAAA,6BAA6B,CAACrlC,IAAD,EAAO;AAClC,QAAI,KAAK+M,KAAL,CAAWzU,KAAK,CAAC8C,IAAjB,CAAJ,EAA4B;AAC1B,YAAMof,SAAS,GAAG,KAAKpV,SAAL,EAAlB;AACA,WAAK2E,IAAL;AACA,WAAKyC,gBAAL,CAAsB,IAAtB;AACA,WAAK+N,yBAAL,CAA+Bva,IAA/B,EAAqCwa,SAArC,EAAgD,0BAAhD,EAA4E,4BAA5E;AACA,aAAO,IAAP;AACD;;AAED,WAAO,KAAP;AACD;;AAED8qB,EAAAA,0BAA0B,CAACtlC,IAAD,EAAO;AAC/B,QAAIkzC,KAAK,GAAG,IAAZ;AACA,SAAKhnC,MAAL,CAAY5T,KAAK,CAACQ,MAAlB;;AAEA,WAAO,CAAC,KAAK6T,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAR,EAAgC;AAC9B,UAAIk6C,KAAJ,EAAW;AACTA,QAAAA,KAAK,GAAG,KAAR;AACD,OAFD,MAEO;AACL,YAAI,KAAKvmC,GAAL,CAASrU,KAAK,CAACgB,KAAf,CAAJ,EAA2B;AACzB,gBAAM,KAAK4I,KAAL,CAAW,KAAKyC,KAAL,CAAWxD,KAAtB,EAA6B,8CAA8C,2DAA3E,CAAN;AACD;;AAED,aAAK+K,MAAL,CAAY5T,KAAK,CAACc,KAAlB;AACA,YAAI,KAAKuT,GAAL,CAASrU,KAAK,CAACU,MAAf,CAAJ,EAA4B;AAC7B;;AAED,WAAK2hB,oBAAL,CAA0B3a,IAA1B;AACD;AACF;;AAED2a,EAAAA,oBAAoB,CAAC3a,IAAD,EAAO;AACzB,UAAMwa,SAAS,GAAG,KAAKpV,SAAL,EAAlB;AACAoV,IAAAA,SAAS,CAACS,QAAV,GAAqB,KAAK7N,eAAL,CAAqB,IAArB,CAArB;;AAEA,QAAI,KAAKe,aAAL,CAAmB,IAAnB,CAAJ,EAA8B;AAC5BqM,MAAAA,SAAS,CAACC,KAAV,GAAkB,KAAKrN,eAAL,EAAlB;AACD,KAFD,MAEO;AACL,WAAKiO,iBAAL,CAAuBb,SAAS,CAACS,QAAV,CAAmBhjB,IAA1C,EAAgDuiB,SAAS,CAACrZ,KAA1D,EAAiE,IAAjE,EAAuE,IAAvE;AACAqZ,MAAAA,SAAS,CAACC,KAAV,GAAkBD,SAAS,CAACS,QAAV,CAAmBC,OAAnB,EAAlB;AACD;;AAED,SAAK/Y,SAAL,CAAeqY,SAAS,CAACC,KAAzB,EAAgCrb,YAAhC,EAA8C+L,SAA9C,EAAyD,kBAAzD;AACAnL,IAAAA,IAAI,CAACkY,UAAL,CAAgB1T,IAAhB,CAAqB,KAAKa,UAAL,CAAgBmV,SAAhB,EAA2B,iBAA3B,CAArB;AACD;;AAh9C4C;;AAo9C/C,MAAM+kC,MAAN,SAAqBvF,eAArB,CAAqC;AACnCziD,EAAAA,WAAW,CAACW,OAAD,EAAU8P,KAAV,EAAiB;AAC1B9P,IAAAA,OAAO,GAAGqvC,UAAU,CAACrvC,OAAD,CAApB;AACA,UAAMA,OAAN,EAAe8P,KAAf;AACA,UAAM+sB,YAAY,GAAG,KAAKgC,eAAL,EAArB;AACA,SAAK7+B,OAAL,GAAeA,OAAf;AACA,SAAKyQ,QAAL,GAAgB,KAAKzQ,OAAL,CAAawuC,UAAb,KAA4B,QAA5C;AACA,SAAKh/B,KAAL,GAAa,IAAIqtB,YAAJ,CAAiB,KAAK7yB,KAAL,CAAWq1B,IAAX,CAAgB,IAAhB,CAAjB,EAAwC,KAAK5uB,QAA7C,CAAb;AACA,SAAKi9B,OAAL,GAAe4Z,UAAU,CAAC,KAAKtnD,OAAL,CAAa0tC,OAAd,CAAzB;AACA,SAAK0C,QAAL,GAAgBpwC,OAAO,CAACyuC,cAAxB;AACD;;AAED5P,EAAAA,eAAe,GAAG;AAChB,WAAOhC,YAAP;AACD;;AAEDrd,EAAAA,KAAK,GAAG;AACN,SAAKhQ,KAAL,CAAWqH,KAAX,CAAiBpR,aAAjB;AACA,UAAMwgB,IAAI,GAAG,KAAK/Y,SAAL,EAAb;AACA,UAAMgZ,OAAO,GAAG,KAAKhZ,SAAL,EAAhB;AACA,SAAK4Y,SAAL;AACAG,IAAAA,IAAI,CAAC6rB,MAAL,GAAc,IAAd;AACA,SAAK9rB,aAAL,CAAmBC,IAAnB,EAAyBC,OAAzB;AACAD,IAAAA,IAAI,CAAC6rB,MAAL,GAAc,KAAKrlC,KAAL,CAAWqlC,MAAzB;AACA,WAAO7rB,IAAP;AACD;;AAzBkC;;AA6BrC,SAASqhC,UAAT,CAAoB5Z,OAApB,EAA6B;AAC3B,QAAM6Z,SAAS,GAAG,IAAI1nD,GAAJ,EAAlB;;AAEA,OAAK,IAAIsL,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGuiC,OAAO,CAAC3jC,MAA9B,EAAsCoB,EAAE,EAAxC,EAA4C;AAC1C,UAAMyiC,MAAM,GAAGF,OAAO,CAACviC,EAAD,CAAtB;;AAD0C,iBAElB0iC,KAAK,CAACC,OAAN,CAAcF,MAAd,IAAwBA,MAAxB,GAAiC,CAACA,MAAD,EAAS,EAAT,CAFf;AAAA;AAAA,UAEnC7tC,IAFmC;AAAA,UAE7BC,OAF6B;;AAG1C,QAAI,CAACunD,SAAS,CAAC52C,GAAV,CAAc5Q,IAAd,CAAL,EAA0BwnD,SAAS,CAACrnD,GAAV,CAAcH,IAAd,EAAoBC,OAAO,IAAI,EAA/B;AAC3B;;AAED,SAAOunD,SAAP;AACD;;AAED,SAAS/nC,KAAT,CAAe1P,KAAf,EAAsB9P,OAAtB,EAA+B;AAC7B,MAAIA,OAAO,IAAIA,OAAO,CAACwuC,UAAR,KAAuB,aAAtC,EAAqD;AACnDxuC,IAAAA,OAAO,GAAGtB,MAAM,CAACwD,MAAP,CAAc,EAAd,EAAkBlC,OAAlB,CAAV;;AAEA,QAAI;AACFA,MAAAA,OAAO,CAACwuC,UAAR,GAAqB,QAArB;AACA,YAAMsL,MAAM,GAAG0N,SAAS,CAACxnD,OAAD,EAAU8P,KAAV,CAAxB;AACA,YAAM23C,GAAG,GAAG3N,MAAM,CAACt6B,KAAP,EAAZ;;AAEA,UAAIs6B,MAAM,CAAC9J,iBAAX,EAA8B;AAC5B,eAAOyX,GAAP;AACD;;AAED,UAAI3N,MAAM,CAAC7J,2BAAX,EAAwC;AACtC,YAAI;AACFjwC,UAAAA,OAAO,CAACwuC,UAAR,GAAqB,QAArB;AACA,iBAAOgZ,SAAS,CAACxnD,OAAD,EAAU8P,KAAV,CAAT,CAA0B0P,KAA1B,EAAP;AACD,SAHD,CAGE,OAAOkoC,OAAP,EAAgB,CAAE;AACrB,OALD,MAKO;AACLD,QAAAA,GAAG,CAACvhC,OAAJ,CAAYsoB,UAAZ,GAAyB,QAAzB;AACD;;AAED,aAAOiZ,GAAP;AACD,KAnBD,CAmBE,OAAOE,WAAP,EAAoB;AACpB,UAAI;AACF3nD,QAAAA,OAAO,CAACwuC,UAAR,GAAqB,QAArB;AACA,eAAOgZ,SAAS,CAACxnD,OAAD,EAAU8P,KAAV,CAAT,CAA0B0P,KAA1B,EAAP;AACD,OAHD,CAGE,OAAOooC,QAAP,EAAiB,CAAE;;AAErB,YAAMD,WAAN;AACD;AACF,GA9BD,MA8BO;AACL,WAAOH,SAAS,CAACxnD,OAAD,EAAU8P,KAAV,CAAT,CAA0B0P,KAA1B,EAAP;AACD;AACF;;AACD,SAAS9K,eAAT,CAAyB5E,KAAzB,EAAgC9P,OAAhC,EAAyC;AACvC,QAAM85C,MAAM,GAAG0N,SAAS,CAACxnD,OAAD,EAAU8P,KAAV,CAAxB;;AAEA,MAAIgqC,MAAM,CAAC95C,OAAP,CAAegvC,UAAnB,EAA+B;AAC7B8K,IAAAA,MAAM,CAACrtC,KAAP,CAAayD,MAAb,GAAsB,IAAtB;AACD;;AAED,SAAO4pC,MAAM,CAAC0B,aAAP,EAAP;AACD;;AAED,SAASgM,SAAT,CAAmBxnD,OAAnB,EAA4B8P,KAA5B,EAAmC;AACjC,MAAIq5B,GAAG,GAAGke,MAAV;;AAEA,MAAIrnD,OAAO,IAAIA,OAAO,CAAC0tC,OAAvB,EAAgC;AAC9BO,IAAAA,eAAe,CAACjuC,OAAO,CAAC0tC,OAAT,CAAf;AACAvE,IAAAA,GAAG,GAAG0e,cAAc,CAAC7nD,OAAO,CAAC0tC,OAAT,CAApB;AACD;;AAED,SAAO,IAAIvE,GAAJ,CAAQnpC,OAAR,EAAiB8P,KAAjB,CAAP;AACD;;AAED,MAAMg4C,gBAAgB,GAAG,EAAzB;;AAEA,SAASD,cAAT,CAAwBE,kBAAxB,EAA4C;AAC1C,QAAMC,UAAU,GAAG3Z,gBAAgB,CAACpB,MAAjB,CAAwBltC,IAAI,IAAI6jB,SAAS,CAACmkC,kBAAD,EAAqBhoD,IAArB,CAAzC,CAAnB;AACA,QAAM8K,GAAG,GAAGm9C,UAAU,CAAC7Z,IAAX,CAAgB,GAAhB,CAAZ;AACA,MAAIhF,GAAG,GAAG2e,gBAAgB,CAACj9C,GAAD,CAA1B;;AAEA,MAAI,CAACs+B,GAAL,EAAU;AACRA,IAAAA,GAAG,GAAGke,MAAN;;AAEA,SAAK,IAAIl8C,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG68C,UAAU,CAACj+C,MAAjC,EAAyCoB,EAAE,EAA3C,EAA+C;AAC7C,YAAMyiC,MAAM,GAAGoa,UAAU,CAAC78C,EAAD,CAAzB;AACAg+B,MAAAA,GAAG,GAAGiF,YAAY,CAACR,MAAD,CAAZ,CAAqBzE,GAArB,CAAN;AACD;;AAED2e,IAAAA,gBAAgB,CAACj9C,GAAD,CAAhB,GAAwBs+B,GAAxB;AACD;;AAED,SAAOA,GAAP;AACD;;AAEDvqC,OAAO,CAAC4gB,KAAR,GAAgBA,KAAhB;AACA5gB,OAAO,CAAC8V,eAAR,GAA0BA,eAA1B;AACA9V,OAAO,CAACqpD,QAAR,GAAmB7nD,KAAnB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass TokenType {\n  constructor(label, conf = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    this.updateContext = null;\n  }\n\n}\nconst keywords = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = new TokenType(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return new TokenType(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nconst types = {\n  num: new TokenType(\"num\", {\n    startsExpr\n  }),\n  bigint: new TokenType(\"bigint\", {\n    startsExpr\n  }),\n  regexp: new TokenType(\"regexp\", {\n    startsExpr\n  }),\n  string: new TokenType(\"string\", {\n    startsExpr\n  }),\n  name: new TokenType(\"name\", {\n    startsExpr\n  }),\n  eof: new TokenType(\"eof\"),\n  bracketL: new TokenType(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: new TokenType(\"]\"),\n  braceL: new TokenType(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: new TokenType(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: new TokenType(\"}\"),\n  braceBarR: new TokenType(\"|}\"),\n  parenL: new TokenType(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: new TokenType(\")\"),\n  comma: new TokenType(\",\", {\n    beforeExpr\n  }),\n  semi: new TokenType(\";\", {\n    beforeExpr\n  }),\n  colon: new TokenType(\":\", {\n    beforeExpr\n  }),\n  doubleColon: new TokenType(\"::\", {\n    beforeExpr\n  }),\n  dot: new TokenType(\".\"),\n  question: new TokenType(\"?\", {\n    beforeExpr\n  }),\n  questionDot: new TokenType(\"?.\"),\n  arrow: new TokenType(\"=>\", {\n    beforeExpr\n  }),\n  template: new TokenType(\"template\"),\n  ellipsis: new TokenType(\"...\", {\n    beforeExpr\n  }),\n  backQuote: new TokenType(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: new TokenType(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: new TokenType(\"@\"),\n  hash: new TokenType(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: new TokenType(\"#!...\"),\n  eq: new TokenType(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: new TokenType(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: new TokenType(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: new TokenType(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: new TokenType(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 2),\n  logicalAND: createBinop(\"&&\", 3),\n  bitwiseOR: createBinop(\"|\", 4),\n  bitwiseXOR: createBinop(\"^\", 5),\n  bitwiseAND: createBinop(\"&\", 6),\n  equality: createBinop(\"==/!=/===/!==\", 7),\n  relational: createBinop(\"</>/<=/>=\", 8),\n  bitShift: createBinop(\"<</>>/>>>\", 9),\n  plusMin: new TokenType(\"+/-\", {\n    beforeExpr,\n    binop: 10,\n    prefix,\n    startsExpr\n  }),\n  modulo: new TokenType(\"%\", {\n    beforeExpr,\n    binop: 11,\n    startsExpr\n  }),\n  star: createBinop(\"*\", 11),\n  slash: createBinop(\"/\", 11),\n  exponent: new TokenType(\"**\", {\n    beforeExpr,\n    binop: 12,\n    rightAssociative: true\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 8\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 8\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  })\n};\n\nconst SCOPE_OTHER = 0b0000000000,\n      SCOPE_PROGRAM = 0b0000000001,\n      SCOPE_FUNCTION = 0b0000000010,\n      SCOPE_ASYNC = 0b0000000100,\n      SCOPE_GENERATOR = 0b0000001000,\n      SCOPE_ARROW = 0b0000010000,\n      SCOPE_SIMPLE_CATCH = 0b0000100000,\n      SCOPE_SUPER = 0b0001000000,\n      SCOPE_DIRECT_SUPER = 0b0010000000,\n      SCOPE_CLASS = 0b0100000000,\n      SCOPE_TS_MODULE = 0b1000000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nfunction functionFlags(isAsync, isGenerator) {\n  return SCOPE_FUNCTION | (isAsync ? SCOPE_ASYNC : 0) | (isGenerator ? SCOPE_GENERATOR : 0);\n}\nconst BIND_KIND_VALUE = 0b00000000001,\n      BIND_KIND_TYPE = 0b00000000010,\n      BIND_SCOPE_VAR = 0b00000000100,\n      BIND_SCOPE_LEXICAL = 0b00000001000,\n      BIND_SCOPE_FUNCTION = 0b00000010000,\n      BIND_FLAGS_NONE = 0b00001000000,\n      BIND_FLAGS_CLASS = 0b00010000000,\n      BIND_FLAGS_TS_ENUM = 0b00100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b01000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b10000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY;\n\nfunction isSimpleProperty(node) {\n  return node != null && node.type === \"Property\" && node.kind === \"init\" && node.method === false;\n}\n\nvar estree = (superClass => class extends superClass {\n  estreeParseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.value;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (isSimpleProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    const prop = method;\n    const paramCount = prop.kind === \"get\" ? 0 : 1;\n    const start = prop.start;\n\n    if (prop.value.params.length !== paramCount) {\n      if (prop.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    } else if (prop.kind === \"set\" && prop.value.params[0].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding) {\n    switch (expr.type) {\n      case \"ObjectPattern\":\n        expr.properties.forEach(prop => {\n          this.checkLVal(prop.type === \"Property\" ? prop.value : prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        });\n        break;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription, disallowLetBinding);\n    }\n  }\n\n  checkDuplicatedProto(prop, protoRef) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.method || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\" && prop.kind === \"init\") {\n      if (protoRef.used && !protoRef.start) {\n        protoRef.start = key.start;\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.body.length > 0) {\n      for (let _i = 0, _node$body$body = node.body.body; _i < _node$body$body.length; _i++) {\n        const directive = _node$body$body[_i];\n\n        if (directive.type === \"ExpressionStatement\" && directive.expression.type === \"Literal\") {\n          if (directive.expression.value === \"use strict\") return true;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && (!stmt.expression.extra || !stmt.expression.extra.parenthesized);\n  }\n\n  stmtToDirective(stmt) {\n    const directive = super.stmtToDirective(stmt);\n    const value = stmt.expression.value;\n    directive.value.value = value;\n    return directive;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    switch (this.state.type) {\n      case types.regexp:\n        return this.estreeParseRegExpLiteral(this.state.value);\n\n      case types.num:\n      case types.string:\n        return this.estreeParseLiteral(this.state.value);\n\n      case types._null:\n        return this.estreeParseLiteral(null);\n\n      case types._true:\n        return this.estreeParseLiteral(true);\n\n      case types._false:\n        return this.estreeParseLiteral(false);\n\n      default:\n        return super.parseExprAtom(refShorthandDefaultPos);\n    }\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    const node = super.parseLiteral(value, type, startPos, startLoc);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    type = type === \"ClassMethod\" ? \"MethodDefinition\" : type;\n    return this.finishNode(node, type);\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (isSimpleProperty(node)) {\n      this.toAssignable(node.value, isBinding, contextDescription);\n      return node;\n    }\n\n    return super.toAssignable(node, isBinding, contextDescription);\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      throw this.raise(prop.key.start, \"Object pattern can't contain getter or setter\");\n    } else if (prop.method) {\n      throw this.raise(prop.key.start, \"Object pattern can't contain methods\");\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n    }\n  }\n\n});\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass TokContext {\n  constructor(token, isExpr, preserveSpace, override) {\n    this.token = token;\n    this.isExpr = !!isExpr;\n    this.preserveSpace = !!preserveSpace;\n    this.override = override;\n  }\n\n}\nconst types$1 = {\n  braceStatement: new TokContext(\"{\", false),\n  braceExpression: new TokContext(\"{\", true),\n  templateQuasi: new TokContext(\"${\", false),\n  parenStatement: new TokContext(\"(\", false),\n  parenExpression: new TokContext(\"(\", true),\n  template: new TokContext(\"`\", true, true, p => p.readTmplToken()),\n  functionExpression: new TokContext(\"function\", true),\n  functionStatement: new TokContext(\"function\", false)\n};\n\ntypes.parenR.updateContext = types.braceR.updateContext = function () {\n  if (this.state.context.length === 1) {\n    this.state.exprAllowed = true;\n    return;\n  }\n\n  let out = this.state.context.pop();\n\n  if (out === types$1.braceStatement && this.curContext().token === \"function\") {\n    out = this.state.context.pop();\n  }\n\n  this.state.exprAllowed = !out.isExpr;\n};\n\ntypes.name.updateContext = function (prevType) {\n  let allowed = false;\n\n  if (prevType !== types.dot) {\n    if (this.state.value === \"of\" && !this.state.exprAllowed || this.state.value === \"yield\" && this.scope.inGenerator) {\n      allowed = true;\n    }\n  }\n\n  this.state.exprAllowed = allowed;\n\n  if (this.state.isIterator) {\n    this.state.isIterator = false;\n  }\n};\n\ntypes.braceL.updateContext = function (prevType) {\n  this.state.context.push(this.braceIsBlock(prevType) ? types$1.braceStatement : types$1.braceExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.dollarBraceL.updateContext = function () {\n  this.state.context.push(types$1.templateQuasi);\n  this.state.exprAllowed = true;\n};\n\ntypes.parenL.updateContext = function (prevType) {\n  const statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;\n  this.state.context.push(statementParens ? types$1.parenStatement : types$1.parenExpression);\n  this.state.exprAllowed = true;\n};\n\ntypes.incDec.updateContext = function () {};\n\ntypes._function.updateContext = types._class.updateContext = function (prevType) {\n  if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {\n    this.state.context.push(types$1.functionExpression);\n  } else {\n    this.state.context.push(types$1.functionStatement);\n  }\n\n  this.state.exprAllowed = false;\n};\n\ntypes.backQuote.updateContext = function () {\n  if (this.curContext() === types$1.template) {\n    this.state.context.pop();\n  } else {\n    this.state.context.push(types$1.template);\n  }\n\n  this.state.exprAllowed = false;\n};\n\nconst reservedWords = {\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nconst isReservedWord = (word, inModule) => {\n  return inModule && word === \"await\" || word === \"enum\";\n};\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nconst keywordRelationalOperator = /^in(stanceof)?$/;\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7bf\\ua7c2-\\ua7c6\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab67\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d82\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(state) {\n  return (state.type === types.name || !!state.type.keyword) && state.value !== \"from\";\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(options, input) {\n    super(options, input);\n    this.flowPragma = undefined;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== types.string && type !== types.semi && type !== types.interpreterDirective) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || types.colon);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    const moduloPos = this.state.start;\n    this.expect(types.modulo);\n    const checksLoc = this.state.startLoc;\n    this.expectContextual(\"checks\");\n\n    if (moduloLoc.line !== checksLoc.line || moduloLoc.column !== checksLoc.column - 1) {\n      this.raise(moduloPos, \"Spaces between ´%´ and ´checks´ are not allowed here.\");\n    }\n\n    if (this.eat(types.parenL)) {\n      node.value = this.parseExpression();\n      this.expect(types.parenR);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(types.colon);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(types.modulo)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(types.modulo)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.isRelational(\"<\")) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(types.parenL);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    this.expect(types.parenR);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(types._class)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(types._function)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(types._var)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(\"module\")) {\n      if (this.match(types.dot)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, \"`declare module` cannot be used inside another `declare module`\");\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(\"type\")) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(\"opaque\")) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(\"interface\")) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(types._export)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(types.braceL);\n\n    while (!this.match(types.braceR)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(types._import)) {\n        this.next();\n\n        if (!this.isContextual(\"type\") && !this.match(types._typeof)) {\n          this.raise(this.state.lastTokStart, \"Imports within a `declare module` body must always be `import type` or `import typeof`\");\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(\"declare\", \"Only declares and type imports are allowed inside declare module\");\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(types.braceR);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    const errorMessage = \"Found both `declare module.exports` and `declare export` in the same module. \" + \"Modules can only have 1 since they are either an ES module or they are a CommonJS module\";\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, errorMessage);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, \"Duplicate `declare module.exports` statement\");\n        }\n\n        if (kind === \"ES\") this.raise(bodyElement.start, errorMessage);\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(types._export);\n\n    if (this.eat(types._default)) {\n      if (this.match(types._function) || this.match(types._class)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(types._const) || this.isLet() || (this.isContextual(\"type\") || this.isContextual(\"interface\")) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        this.unexpected(this.state.start, `\\`declare export ${label}\\` is not supported. Use \\`${suggestion}\\` instead`);\n      }\n\n      if (this.match(types._var) || this.match(types._function) || this.match(types._class) || this.isContextual(\"opaque\")) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (this.match(types.star) || this.match(types.braceL) || this.isContextual(\"interface\") || this.isContextual(\"type\") || this.isContextual(\"opaque\")) {\n          node = this.parseExport(node);\n\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n          return node;\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(\"exports\");\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"mixins\")) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, \"`_` is only allowed as a type argument to call or new\");\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n\n    if (declaration) {\n      this.raise(startLoc, `Cannot overwrite reserved type ${word}`);\n      return;\n    }\n\n    this.raise(startLoc, `Unexpected reserved type ${word}`);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(\"type\");\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(types.colon)) {\n      node.supertype = this.flowParseTypeInitialiser(types.colon);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(types.eq);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(types.eq)) {\n      this.eat(types.eq);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\");\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    } while (!this.isRelational(\">\"));\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseType());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expectRelational(\"<\");\n\n    while (!this.isRelational(\">\")) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.isRelational(\">\")) {\n        this.expect(types.comma);\n      }\n    }\n\n    this.expectRelational(\">\");\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(\"interface\");\n    node.extends = [];\n\n    if (this.eat(types._extends)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(types.comma));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === types.colon) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(types.bracketR);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(types.bracketR);\n    this.expect(types.bracketR);\n\n    if (this.isRelational(\"<\") || this.match(types.parenL)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(types.question)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(types.parenL);\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      node.params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      node.rest = this.flowParseFunctionTypeParam();\n    }\n\n    this.expect(types.parenR);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(types.braceBarL)) {\n      this.expect(types.braceBarL);\n      endDelim = types.braceBarR;\n      exact = true;\n    } else {\n      this.expect(types.braceL);\n      endDelim = types.braceR;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(\"proto\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(\"static\")) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== types.colon && lookahead.type !== types.question) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(types.bracketL)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(types.bracketL)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        var _allowInexact;\n\n        let kind = \"init\";\n\n        if (this.isContextual(\"get\") || this.isContextual(\"set\")) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type === types.name || lookahead.type === types.string || lookahead.type === types.num) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, (_allowInexact = allowInexact) != null ? _allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n        this.raise(inexactStart, \"Explicit inexact syntax must appear at the end of an inexact object\");\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(types.ellipsis)) {\n      const isInexactToken = this.match(types.comma) || this.match(types.semi) || this.match(types.braceR) || this.match(types.braceBarR);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear in class or interface definitions\");\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, \"Explicit inexact syntax cannot appear inside an explicit exact object type\");\n        }\n\n        if (variance) {\n          this.raise(variance.start, \"Explicit inexact syntax cannot have variance\");\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, \"Spread operator cannot appear in class or interface definitions\");\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, \"Spread properties cannot have variance\");\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.isRelational(\"<\") || this.match(types.parenL)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(types.question)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(types.semi) && !this.eat(types.comma) && !this.match(types.braceR) && !this.match(types.braceBarR)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(types.dot)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(types.bracketL);\n\n    while (this.state.pos < this.length && !this.match(types.bracketR)) {\n      node.types.push(this.flowParseType());\n      if (this.match(types.bracketR)) break;\n      this.expect(types.comma);\n    }\n\n    this.expect(types.bracketR);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam() {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n\n    if (lh.type === types.colon || lh.type === types.question) {\n      name = this.parseIdentifier();\n\n      if (this.eat(types.question)) {\n        optional = true;\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n\n    while (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n      params.push(this.flowParseFunctionTypeParam());\n\n      if (!this.match(types.parenR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    if (this.eat(types.ellipsis)) {\n      rest = this.flowParseFunctionTypeParam();\n    }\n\n    return {\n      params,\n      rest\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case types.name:\n        if (this.isContextual(\"interface\")) {\n          return this.flowParseInterfaceType();\n        }\n\n        return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n\n      case types.braceL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case types.braceBarL:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case types.bracketL:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case types.relational:\n        if (this.state.value === \"<\") {\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(types.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          this.expect(types.parenR);\n          this.expect(types.arrow);\n          node.returnType = this.flowParseType();\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n        }\n\n        break;\n\n      case types.parenL:\n        this.next();\n\n        if (!this.match(types.parenR) && !this.match(types.ellipsis)) {\n          if (this.match(types.name)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== types.question && token !== types.colon;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(types.comma) || this.match(types.parenR) && this.lookahead().type === types.arrow)) {\n            this.expect(types.parenR);\n            return type;\n          } else {\n            this.eat(types.comma);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        this.expect(types.parenR);\n        this.expect(types.arrow);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case types._true:\n      case types._false:\n        node.value = this.match(types._true);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(types.num)) {\n            return this.parseLiteral(-this.state.value, \"NumberLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          if (this.match(types.bigint)) {\n            return this.parseLiteral(-this.state.value, \"BigIntLiteralTypeAnnotation\", node.start, node.loc.start);\n          }\n\n          throw this.raise(this.state.start, `Unexpected token, expected \"number\" or \"bigint\"`);\n        }\n\n        this.unexpected();\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case types._void:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case types._null:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case types._this:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case types.star:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      default:\n        if (this.state.type.keyword === \"typeof\") {\n          return this.flowParseTypeofType();\n        } else if (this.state.type.keyword) {\n          const label = this.state.type.label;\n          this.next();\n          return super.createIdentifier(node, label);\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start,\n          startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n\n    while (this.match(types.bracketL) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.elementType = type;\n      this.expect(types.bracketL);\n      this.expect(types.bracketR);\n      type = this.finishNode(node, \"ArrayTypeAnnotation\");\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(types.question)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(types.arrow)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseAND);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseAND)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(types.bitwiseOR);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(types.bitwiseOR)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    this.state.exprAllowed = this.state.exprAllowed || this.state.noAnonFunctionType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === types.name && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(types.colon)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(types.plusMin)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.match(types.name) && this.state.value === \"interface\") {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseInterface(node);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    } else {\n      const stmt = super.parseStatement(context, topLevel);\n\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n\n      return stmt;\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(types._class) || this.match(types.name) || this.match(types._function) || this.match(types._var) || this.match(types._export)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (this.match(types.name)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    return this.isContextual(\"type\") || this.isContextual(\"interface\") || this.isContextual(\"opaque\") || this.shouldParseEnums() && this.isContextual(\"enum\") || super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name) && (this.state.value === \"type\" || this.state.value === \"interface\" || this.state.value === \"opaque\" || this.shouldParseEnums() && this.state.value === \"enum\")) {\n      return false;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!this.match(types.question)) return expr;\n\n    if (refNeedsArrowPos) {\n      const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n      if (!result.node) {\n        refNeedsArrowPos.start = result.error.pos || this.state.start;\n        return expr;\n      }\n\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    this.expect(types.question);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\");\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt.concat(valid[0].start);\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(types.colon);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(noIn, undefined, undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssign();\n    const failed = !this.match(types.colon);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, true, \"arrow function parameters\", (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma);\n    this.scope.enter(functionFlags(false, false) | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(\"type\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(types.braceL)) {\n        node.specifiers = this.parseExportSpecifiers();\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(\"opaque\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(\"interface\")) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(\"enum\")) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(\"type\") && this.lookahead().type === types.star) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(types.braceBarL, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.isIterator = true;\n      return super.readWord();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type === \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n      case \"TypeCastExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n    } else {\n      return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && (!expr.extra || !expr.extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, \"The type cast expression is expected to be wrapped with parenthesis\");\n      }\n    }\n\n    return exprList;\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(types.colon)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.colon) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(types.colon) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.isRelational(\"<\")) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(\"implements\")) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.isRelational(\"<\")) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(types.comma));\n    }\n  }\n\n  parsePropertyName(node) {\n    const variance = this.flowParseVariance();\n    const key = super.parsePropertyName(node);\n    node.variance = variance;\n    return key;\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.isRelational(\"<\")) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(types.parenL)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(types.colon)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(types._typeof)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(\"type\")) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n\n      if (kind === \"type\" && lh.type === types.star) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(lh) || lh.type === types.braceL || lh.type === types.star) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    const firstIdentLoc = this.state.start;\n    const firstIdent = this.parseIdentifier(true);\n    let specifierTypeKind = null;\n\n    if (firstIdent.name === \"type\") {\n      specifierTypeKind = \"type\";\n    } else if (firstIdent.name === \"typeof\") {\n      specifierTypeKind = \"typeof\";\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(\"as\") && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !this.match(types.name) && !this.state.type.keyword) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = as_ident.__clone();\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else if (specifierTypeKind !== null && (this.match(types.name) || this.state.type.keyword)) {\n      specifier.imported = this.parseIdentifier(true);\n      specifier.importKind = specifierTypeKind;\n\n      if (this.eatContextual(\"as\")) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = specifier.imported.__clone();\n      }\n    } else {\n      isBinding = true;\n      specifier.imported = firstIdent;\n      specifier.importKind = null;\n      specifier.local = specifier.imported.__clone();\n    }\n\n    const nodeIsTypeImport = hasTypeImportKind(node);\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (nodeIsTypeImport && specifierIsTypeImport) {\n      this.raise(firstIdentLoc, \"The `type` and `typeof` keywords on named imports can only be used on regular \" + \"`import` statements. It cannot be used with `import type` or `import typeof` statements\");\n    }\n\n    if (nodeIsTypeImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !nodeIsTypeImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.isRelational(\"<\")) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(types.colon)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(types.jsxTagStart) || this.isRelational(\"<\"))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (jsx && jsx.error || this.isRelational(\"<\")) {\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(() => {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos));\n        arrowExpression.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(arrowExpression, typeParameters);\n        return arrowExpression;\n      }, state);\n      const arrowExpression = arrow.node && arrow.node.type === \"ArrowFunctionExpression\" ? arrow.node : null;\n      if (!arrow.error && arrowExpression) return arrowExpression;\n\n      if (jsx && jsx.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if (jsx && jsx.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, \"Expected an arrow function after this type parameter declaration\");\n    }\n\n    return super.parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos);\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(types.arrow)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.isRelational(\"<\")) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(types.questionDot) && this.isLookaheadRelational(\"<\")) {\n      this.expectPlugin(\"optionalChaining\");\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(types.parenL);\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.isRelational(\"<\")) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(types.parenL);\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.isRelational(\"<\")) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(types.braceBarR, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, \"Unterminated flow-comment\");\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, \"Cannot have a flow comment inside another flow comment\");\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, \"Unterminated comment\");\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, \"Unterminated comment\");\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` ` + `or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using ` + `\\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used ` + `before in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or ` + `consistently use literals (either booleans, numbers, or strings) for all member initializers.`);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    const suggestion = `Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in ` + `enum \\`${enumName}\\`.`;\n    const message = suppliedType === null ? `Supplied enum type is not valid. ${suggestion}` : `Enum type \\`${suppliedType}\\` is not valid. ${suggestion}`;\n    return this.raise(pos, message);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of ` + `\\`${memberName}\\` needs to be a ${explicitType} literal.`;\n        break;\n\n      case \"symbol\":\n        message = `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in ` + `enum \\`${enumName}\\`.`;\n        break;\n\n      default:\n        message = `The enum member initializer for \\`${memberName}\\` needs to be a literal (either ` + `a boolean, number, or string) in enum \\`${enumName}\\`.`;\n    }\n\n    return this.raise(pos, message);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, `String enum members need to consistently either all use initializers, or use no initializers, ` + `in enum \\`${enumName}\\`.`);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(types.comma) || this.match(types.braceR);\n\n    switch (this.state.type) {\n      case types.num:\n        {\n          const literal = this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types.string:\n        {\n          const literal = this.parseLiteral(this.state.value, \"StringLiteral\");\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case types._true:\n      case types._false:\n        {\n          const literal = this.parseBooleanLiteral();\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(types.eq) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n\n    while (!this.match(types.braceR)) {\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(types.braceR)) {\n        this.expect(types.comma);\n      }\n    }\n\n    return members;\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (let _i = 0; _i < initializedMembers.length; _i++) {\n        const member = initializedMembers[_i];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (let _i2 = 0; _i2 < defaultedMembers.length; _i2++) {\n        const member = defaultedMembers[_i2];\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(\"of\")) {\n      if (!this.match(types.name)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(types.braceL);\n    const members = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(types.braceR);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (let _i3 = 0, _members$defaultedMem = members.defaultedMembers; _i3 < _members$defaultedMem.length; _i3++) {\n              const member = _members$defaultedMem[_i3];\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (let _i4 = 0, _members$defaultedMem2 = members.defaultedMembers; _i4 < _members$defaultedMem2.length; _i4++) {\n              const member = _members$defaultedMem2[_i4];\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(types.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\ntypes$1.j_oTag = new TokContext(\"<tag\", false);\ntypes$1.j_cTag = new TokContext(\"</tag\", false);\ntypes$1.j_expr = new TokContext(\"<tag>...</tag>\", true, true);\ntypes.jsxName = new TokenType(\"jsxName\");\ntypes.jsxText = new TokenType(\"jsxText\", {\n  beforeExpr: true\n});\ntypes.jsxTagStart = new TokenType(\"jsxTagStart\", {\n  startsExpr: true\n});\ntypes.jsxTagEnd = new TokenType(\"jsxTagEnd\");\n\ntypes.jsxTagStart.updateContext = function () {\n  this.state.context.push(types$1.j_expr);\n  this.state.context.push(types$1.j_oTag);\n  this.state.exprAllowed = false;\n};\n\ntypes.jsxTagEnd.updateContext = function (prevType) {\n  const out = this.state.context.pop();\n\n  if (out === types$1.j_oTag && prevType === types.slash || out === types$1.j_cTag) {\n    this.state.context.pop();\n    this.state.exprAllowed = this.curContext() === types$1.j_expr;\n  } else {\n    this.state.exprAllowed = true;\n  }\n};\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated JSX contents\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.exprAllowed) {\n              ++this.state.pos;\n              return this.finishToken(types.jsxTagStart);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(types.jsxText, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(types.string, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(types.jsxName, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(types.jsxName)) {\n      node.name = this.state.value;\n    } else if (this.state.type.keyword) {\n      node.name = this.state.type.keyword;\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(types.colon)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(types.dot)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case types.braceL:\n        node = this.startNode();\n        this.next();\n        node = this.jsxParseExpressionContainer(node);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, \"JSX attributes must only be assigned a non-empty expression\");\n        }\n\n        return node;\n\n      case types.jsxTagStart:\n      case types.string:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, \"JSX value should be either an expression or a quoted JSX text\");\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node) {\n    if (this.match(types.braceR)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      node.expression = this.parseExpression();\n    }\n\n    this.expect(types.braceR);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.eat(types.braceL)) {\n      this.expect(types.ellipsis);\n      node.argument = this.parseMaybeAssign();\n      this.expect(types.braceR);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(types.eq) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(types.slash) && !this.match(types.jsxTagEnd)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(types.slash);\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(types.jsxTagEnd)) {\n      this.expect(types.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(types.jsxTagEnd);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case types.jsxTagStart:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(types.slash)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case types.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case types.braceL:\n            {\n              const node = this.startNode();\n              this.next();\n\n              if (this.match(types.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <>\");\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, \"Expected corresponding JSX closing tag for <\" + getQualifiedJSXName(openingElement.name) + \">\");\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.isRelational(\"<\")) {\n      throw this.raise(this.state.start, \"Adjacent JSX elements must be wrapped in an enclosing tag. \" + \"Did you want a JSX fragment <>...</>?\");\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  parseExprAtom(refShortHandDefaultPos) {\n    if (this.match(types.jsxText)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(types.jsxTagStart)) {\n      return this.jsxParseElement();\n    } else if (this.isRelational(\"<\") && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.finishToken(types.jsxTagStart);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refShortHandDefaultPos);\n    }\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inPropertyName) return super.getTokenFromCode(code);\n    const context = this.curContext();\n\n    if (context === types$1.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types$1.j_oTag || context === types$1.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(types.jsxTagEnd);\n      }\n\n      if ((code === 34 || code === 39) && context === types$1.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.exprAllowed && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(types.jsxTagStart);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    if (this.match(types.braceL)) {\n      const curContext = this.curContext();\n\n      if (curContext === types$1.j_oTag) {\n        this.state.context.push(types$1.braceExpression);\n      } else if (curContext === types$1.j_expr) {\n        this.state.context.push(types$1.templateQuasi);\n      } else {\n        super.updateContext(prevType);\n      }\n\n      this.state.exprAllowed = true;\n    } else if (this.match(types.slash) && prevType === types.jsxTagStart) {\n      this.state.context.length -= 2;\n      this.state.context.push(types$1.j_cTag);\n      this.state.exprAllowed = false;\n    } else {\n      return super.updateContext(prevType);\n    }\n  }\n\n});\n\nclass Scope {\n  constructor(flags) {\n    this.var = [];\n    this.lexical = [];\n    this.functions = [];\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get inGenerator() {\n    return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;\n  }\n\n  get inAsync() {\n    return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScope().flags & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.push(name);\n      } else {\n        scope.lexical.push(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.push(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, `Identifier '${name}' has already been declared`);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.indexOf(name) > -1 || !this.treatFunctionsAsVarInScope(scope) && scope.var.indexOf(name) > -1;\n    }\n\n    return scope.lexical.indexOf(name) > -1 && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.indexOf(name) > -1;\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1 && this.scopeStack[0].functions.indexOf(id.name) === -1) {\n      this.undefinedExports.set(id.name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if (scope.flags & SCOPE_VAR) {\n        return scope;\n      }\n    }\n  }\n\n  currentThisScope() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const scope = this.scopeStack[i];\n\n      if ((scope.flags & SCOPE_VAR || scope.flags & SCOPE_CLASS) && !(scope.flags & SCOPE_ARROW)) {\n        return scope;\n      }\n    }\n  }\n\n}\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = [];\n    this.enums = [];\n    this.constEnums = [];\n    this.classes = [];\n    this.exportOnlyBindings = [];\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.push(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.push(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.push(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.push(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.push(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.indexOf(name) > -1) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.indexOf(name) > -1;\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.indexOf(name) > -1) {\n      if (scope.lexical.indexOf(name) > -1) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.indexOf(name) > -1) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    if (this.scopeStack[0].types.indexOf(id.name) === -1 && this.scopeStack[0].exportOnlyBindings.indexOf(id.name) === -1) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return this.match(types.name);\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return !this.hasPrecedingLineBreak() && !this.match(types.parenL) && !this.match(types.parenR) && !this.match(types.colon) && !this.match(types.eq) && !this.match(types.question) && !this.match(types.bang);\n  }\n\n  tsParseModifier(allowedModifiers) {\n    if (!this.match(types.name)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1 && this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n      return modifier;\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(allowedModifiers) {\n    const modifiers = Object.create(null);\n\n    while (true) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers);\n      if (!modifier) break;\n\n      if (Object.hasOwnProperty.call(modifiers, modifier)) {\n        this.raise(startPos, `Duplicate modifier: '${modifier}'`);\n      }\n\n      modifiers[modifier] = true;\n    }\n\n    return modifiers;\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(types.braceR);\n\n      case \"HeritageClauseElement\":\n        return this.match(types.braceL);\n\n      case \"TupleElementTypes\":\n        return this.match(types.bracketR);\n\n      case \"TypeParametersOrArguments\":\n        return this.isRelational(\">\");\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess) {\n    const result = [];\n\n    while (true) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(types.comma)) {\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(types.comma);\n      }\n\n      return undefined;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(types.bracketL);\n      } else {\n        this.expectRelational(\"<\");\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement);\n\n    if (bracket) {\n      this.expect(types.bracketR);\n    } else {\n      this.expectRelational(\">\");\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(types._import);\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      this.raise(this.state.start, \"Argument in a type import must be a string literal\");\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(types.parenR);\n\n    if (this.eat(types.dot)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(types.dot)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(types._typeof);\n\n    if (this.match(types._import)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsEatThenParseType(types._extends);\n    node.default = this.tsEatThenParseType(types.eq);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.isRelational(\"<\")) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.isRelational(\"<\") || this.match(types.jsxTagStart)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true);\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === types._const) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === types.arrow;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(types.parenL);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(types.parenR, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern,\" + `instead got ${pattern.type}`);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(types.comma)) {\n      this.semicolon();\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(types.colon, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    return this.eat(types.name) && this.match(types.colon);\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(types.bracketL) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(types.bracketL);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(types.bracketR);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(types.question)) node.optional = true;\n    const nodeAny = node;\n\n    if (!readonly && (this.match(types.parenL) || this.isRelational(\"<\"))) {\n      const method = nodeAny;\n      this.tsFillSignature(types.colon, method);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(types.parenL) || this.isRelational(\"<\")) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(types._new)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL) || this.isRelational(\"<\")) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    const readonly = !!this.tsParseModifier([\"readonly\"]);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      if (readonly) node.readonly = true;\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n    return this.tsParsePropertyOrMethodSignature(node, readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(types.braceL);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(types.braceR);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(types.plusMin)) {\n      return this.isContextual(\"readonly\");\n    }\n\n    if (this.isContextual(\"readonly\")) {\n      this.next();\n    }\n\n    if (!this.match(types.bracketL)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(types._in);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.parseIdentifierName(node.start);\n    node.constraint = this.tsExpectThenParseType(types._in);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (this.match(types.plusMin)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(\"readonly\");\n    } else if (this.eatContextual(\"readonly\")) {\n      node.readonly = true;\n    }\n\n    this.expect(types.bracketL);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    this.expect(types.bracketR);\n\n    if (this.match(types.plusMin)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(types.question);\n    } else if (this.eat(types.question)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    node.elementTypes.forEach(elementNode => {\n      if (elementNode.type === \"TSOptionalType\") {\n        seenOptionalElement = true;\n      } else if (seenOptionalElement && elementNode.type !== \"TSRestType\") {\n        this.raise(elementNode.start, \"A required element cannot follow an optional element.\");\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    if (this.match(types.ellipsis)) {\n      const restNode = this.startNode();\n      this.next();\n      restNode.typeAnnotation = this.tsParseType();\n      this.checkCommaAfterRest(93);\n      return this.finishNode(restNode, \"TSRestType\");\n    }\n\n    const type = this.tsParseType();\n\n    if (this.eat(types.question)) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      return this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(types.parenL);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      this.expect(types._new);\n    }\n\n    this.tsFillSignature(types.arrow, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case types.num:\n        case types.string:\n        case types._true:\n        case types._false:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    const templateNode = this.parseTemplate(false);\n\n    if (templateNode.expressions.length > 0) {\n      this.raise(templateNode.expressions[0].start, \"Template literal types cannot have any substitution\");\n    }\n\n    node.literal = templateNode;\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case types.name:\n      case types._void:\n      case types._null:\n        {\n          const type = this.match(types._void) ? \"TSVoidKeyword\" : this.match(types._null) ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n          if (type !== undefined && this.lookaheadCharCode() !== 46) {\n            const node = this.startNode();\n            this.next();\n            return this.finishNode(node, type);\n          }\n\n          return this.tsParseTypeReference();\n        }\n\n      case types.string:\n      case types.num:\n      case types._true:\n      case types._false:\n        return this.tsParseLiteralTypeNode();\n\n      case types.plusMin:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n\n          if (this.lookahead().type !== types.num) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case types._this:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case types._typeof:\n        return this.tsParseTypeQuery();\n\n      case types._import:\n        return this.tsParseImportType();\n\n      case types.braceL:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case types.bracketL:\n        return this.tsParseTupleType();\n\n      case types.parenL:\n        return this.tsParseParenthesizedType();\n\n      case types.backQuote:\n        return this.tsParseTemplateLiteralType();\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(types.bracketL)) {\n      if (this.match(types.bracketR)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(types.bracketR);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator(operator) {\n    const node = this.startNode();\n    this.expectContextual(operator);\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, \"'readonly' type modifier is only permitted on array and tuple literal types.\");\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(\"infer\");\n    const typeParameter = this.startNode();\n    typeParameter.name = this.parseIdentifierName(typeParameter.start);\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const operator = [\"keyof\", \"unique\", \"readonly\"].find(kw => this.isContextual(kw));\n    return operator ? this.tsParseTypeOperator(operator) : this.isContextual(\"infer\") ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    this.eat(operator);\n    let type = parseConstituentType();\n\n    if (this.match(operator)) {\n      const types = [type];\n\n      while (this.eat(operator)) {\n        types.push(parseConstituentType());\n      }\n\n      const node = this.startNodeAtNode(type);\n      node.types = types;\n      type = this.finishNode(node, kind);\n    }\n\n    return type;\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), types.bitwiseAND);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), types.bitwiseOR);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.isRelational(\"<\")) {\n      return true;\n    }\n\n    return this.match(types.parenL) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (this.match(types.name) || this.match(types._this)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(types.braceL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.braceL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.braceR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(types.bracketL)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(types.bracketL)) {\n          ++braceStackCounter;\n        } else if (this.match(types.bracketR)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(types.parenR) || this.match(types.ellipsis)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(types.colon) || this.match(types.comma) || this.match(types.question) || this.match(types.eq)) {\n        return true;\n      }\n\n      if (this.match(types.parenR)) {\n        this.next();\n\n        if (this.match(types.arrow)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const asserts = this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(types._this)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          const node = this.startNodeAtNode(t);\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        const node = this.startNodeAtNode(t);\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      const node = this.startNodeAtNode(t);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeOrTypePredicateAnnotation(types.colon) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(types.colon) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(types.colon);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(\"is\") && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (!this.match(types.name) || this.state.value !== \"asserts\" || this.hasPrecedingLineBreak()) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!this.match(types.name) && !this.match(types._this)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, \"Escape sequence in keyword asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(types.colon);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(types._extends)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(types.question);\n    node.trueType = this.tsParseType();\n    this.expect(types.colon);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(types._new)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expectRelational(\">\");\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, `'${descriptor}' list cannot be empty.`);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.isRelational(\"<\")) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_INTERFACE, undefined, \"typescript interface declaration\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(types._extends)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_TS_TYPE, undefined, \"typescript type alias\");\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsExpectThenParseType(types.eq);\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(types.string) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(types.eq)) {\n      node.initializer = this.parseMaybeAssign();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM, undefined, \"typescript enum declaration\");\n    this.expect(types.braceL);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(types.braceR);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.braceL);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, types.braceR);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, BIND_TS_NAMESPACE, null, \"module or namespace declaration\");\n    }\n\n    if (this.eat(types.dot)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      node.body = this.tsParseModuleBlock();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(\"global\")) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(types.string)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(types.braceL)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      node.body = this.tsParseModuleBlock();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, BIND_LEXICAL, undefined, \"import equals declaration\");\n    this.expect(types.eq);\n    node.moduleReference = this.tsParseModuleReference();\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(\"require\") && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(\"require\");\n    this.expect(types.parenL);\n\n    if (!this.match(types.string)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(types.parenR);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(\"let\")) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._function:\n        return this.parseFunctionStatement(nany, false, true);\n\n      case types._class:\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n\n      case types._const:\n        if (this.match(types._const) && this.isLookaheadContextual(\"enum\")) {\n          this.expect(types._const);\n          this.expectContextual(\"enum\");\n          return this.tsParseEnumDeclaration(nany, true);\n        }\n\n      case types._var:\n        kind = kind || this.state.value;\n        return this.parseVarStatement(nany, kind);\n\n      case types.name:\n        {\n          const value = this.state.value;\n\n          if (value === \"global\") {\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          } else {\n            return this.tsParseDeclaration(nany, value, true);\n          }\n        }\n    }\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(types.braceL)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminatorAndMatch(types._class, next)) {\n          const cls = node;\n          cls.abstract = true;\n\n          if (next) {\n            this.next();\n\n            if (!this.match(types._class)) {\n              this.unexpected(null, types._class);\n            }\n          }\n\n          return this.parseClass(cls, true, false);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || this.match(types.name)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (next) this.next();\n\n        if (this.match(types.string)) {\n          return this.tsParseAmbientExternalModuleDeclaration(node);\n        } else if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminatorAndMatch(types.name, next)) {\n          if (next) this.next();\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminatorAndMatch(tokenType, next) {\n    return (next || this.match(tokenType)) && !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.isRelational(\"<\")) {\n      return undefined;\n    }\n\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(types.arrow);\n      return node;\n    });\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expectRelational(\"<\");\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    this.state.exprAllowed = false;\n    this.expectRelational(\">\");\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    if (this.match(types.name)) {\n      switch (this.state.value) {\n        case \"abstract\":\n        case \"declare\":\n        case \"enum\":\n        case \"interface\":\n        case \"module\":\n        case \"namespace\":\n        case \"type\":\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n\n    if (allowModifiers) {\n      accessibility = this.parseAccessModifier();\n      readonly = !!this.tsParseModifier([\"readonly\"]);\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, \"A parameter property may not be declared using a binding pattern.\");\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(types.braceL) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, BIND_TS_AMBIENT, null, \"function name\");\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(types.bang)) {\n      this.state.exprAllowed = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    if (this.isRelational(\"<\")) {\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsync(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (!noCalls && this.eat(types.parenL)) {\n            node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n            node.typeParameters = typeArguments;\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (this.match(types.backQuote)) {\n            return this.parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments);\n          }\n        }\n\n        this.unexpected();\n      });\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.isRelational(\"<\")) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(types.parenL)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    if (nonNull(types._in.binop) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(\"as\")) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    if (this.match(types.name) && this.lookahead().type === types.eq) {\n      return this.tsParseImportEqualsDeclaration(node);\n    }\n\n    return super.parseImport(node);\n  }\n\n  parseExport(node) {\n    if (this.match(types._import)) {\n      this.expect(types._import);\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(types.eq)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(\"as\")) {\n      const decl = node;\n      this.expectContextual(\"namespace\");\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(\"abstract\") && this.lookahead().type === types._class;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      this.parseClass(cls, true, true);\n      cls.abstract = true;\n      return cls;\n    }\n\n    if (this.state.value === \"interface\") {\n      const result = this.tsParseDeclaration(this.startNode(), this.state.value, true);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === types._const) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === types.name && ahead.value === \"enum\") {\n        const node = this.startNode();\n        this.expect(types._const);\n        this.expectContextual(\"enum\");\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    const accessibility = this.parseAccessModifier();\n    if (accessibility) member.accessibility = accessibility;\n    super.parseClassMember(classBody, member, state, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const modifiers = this.tsParseModifiers([\"abstract\", \"readonly\", \"declare\"]);\n    Object.assign(member, modifiers);\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (modifiers.abstract) {\n        this.raise(member.start, \"Index signatures cannot have the 'abstract' modifier\");\n      }\n\n      if (isStatic) {\n        this.raise(member.start, \"Index signatures cannot have the 'static' modifier\");\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, `Index signatures cannot have an accessibility modifier ('${member.accessibility}')`);\n      }\n\n      return;\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(types.question);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, \"Class methods cannot have the 'readonly' modifier\");\n    }\n\n    if (methodOrProp.declare && this.match(types.parenL)) {\n      this.raise(methodOrProp.start, \"Class methods cannot have the 'declare' modifier\");\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (!refNeedsArrowPos || !this.match(types.question)) {\n      return super.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, noIn, startPos, startLoc));\n\n    if (!result.node) {\n      refNeedsArrowPos.start = result.error.pos || this.state.start;\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(types.question)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(types.colon)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(\"declare\");\n    let declaration;\n\n    if (this.match(types.name)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(\"implements\")) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(types.bang)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (node.declare && this.match(types.equal)) {\n      this.raise(this.state.start, \"'declare' class fields cannot have an initializer\");\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, \"Private elements cannot have the 'abstract' modifier.\");\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, `Private elements cannot have an accessibility modifier ('${node.accessibility}')`);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.isRelational(\"<\")) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(\"implements\")) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(types.bang)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(types.colon)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.match(types.jsxTagStart)) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n\n      if (context[context.length - 1] === types$1.j_oTag) {\n        context.length -= 2;\n      } else if (context[context.length - 1] === types$1.j_expr) {\n        context.length -= 1;\n      }\n    }\n\n    if (!(jsx && jsx.error) && !this.isRelational(\"<\")) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || expr.extra && expr.extra.parenthesized) {\n        abort();\n      }\n\n      if (typeParameters && typeParameters.params.length !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) return arrow.node;\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if (jsx && jsx.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      return arrow.node;\n    }\n\n    if (typeCast && typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if (jsx && jsx.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if (typeCast && typeCast.thrown) throw typeCast.error;\n    throw jsx && jsx.error || arrow.error || typeCast && typeCast.error;\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (!this.hasPlugin(\"jsx\") && this.isRelational(\"<\")) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refShorthandDefaultPos);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(types.colon)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(types.colon);\n        if (this.canInsertSemicolon() || !this.match(types.arrow)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(types.question)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, \"A binding pattern parameter cannot be optional in an implementation signature.\");\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  toAssignable(node, isBinding, contextDescription) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isBinding, contextDescription);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isBinding, contextDescription);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n        return node;\n\n      default:\n        return super.toAssignable(node, isBinding, contextDescription);\n    }\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription) {\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, bindingType, checkClashes, \"parameter property\");\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, contextDescription);\n        return;\n\n      default:\n        super.checkLVal(expr, bindingType, checkClashes, contextDescription);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types._this:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(types.parenL)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, types.parenL);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  isClassMethod() {\n    return this.isRelational(\"<\") || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(types.bang) || this.match(types.colon) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, \"Type annotations must come before default assignments, \" + \"e.g. instead of `age = 25: number` use `age: number = 25`\");\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(types.relational, 1);\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  toAssignableList(exprList, isBinding) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!isBinding) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, \"Unexpected type cast in parameter position.\");\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  toReferencedList(exprList, isInParens) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if (expr && expr._exprListItem && expr.type === \"TsTypeCastExpression\") {\n        this.raise(expr.start, \"Did not expect a type annotation here.\");\n      }\n    }\n\n    return exprList;\n  }\n\n  shouldParseArrow() {\n    return this.match(types.colon) || super.shouldParseArrow();\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.colon) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.isRelational(\"<\")) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const firstParam = method.params[0];\n    const hasContextParam = firstParam && firstParam.type === \"Identifier\" && firstParam.name === \"this\";\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n});\n\ntypes.placeholder = new TokenType(\"%%\", {\n  startsExpr: true\n});\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(types.placeholder)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(types.placeholder);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(types.placeholder, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(types.colon)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(types._extends) || this.match(types.placeholder) || this.match(types.braceL)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(\"from\") && !this.match(types.comma)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(types.comma)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(\"from\");\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(types.modulo)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.eat(types.modulo);\n\n      if (this.match(types.name)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(types.parenL)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, name) {\n  return plugins.some(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"smart\", \"fsharp\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\") && !PIPELINE_PROPOSALS.includes(getPluginOption(plugins, \"pipelineOperator\", \"proposal\"))) {\n    throw new Error(\"'pipelineOperator' requires 'proposal' option whose value should be one of: \" + PIPELINE_PROPOSALS.map(p => `'${p}'`).join(\", \"));\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (let _i = 0, _Object$keys = Object.keys(defaultOptions); _i < _Object$keys.length; _i++) {\n    const key = _Object$keys[_i];\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(name) {\n    return this.plugins.has(name);\n  }\n\n  getPluginOption(plugin, name) {\n    if (this.hasPlugin(plugin)) return this.plugins.get(plugin)[name];\n  }\n\n}\n\nfunction last(stack) {\n  return stack[stack.length - 1];\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.trailingComments.push(comment);\n    this.state.leadingComments.push(comment);\n  }\n\n  adjustCommentsAfterTrailingComma(node, elements, takeAllComments) {\n    if (this.state.leadingComments.length === 0) {\n      return;\n    }\n\n    let lastElement = null;\n    let i = elements.length;\n\n    while (lastElement === null && i > 0) {\n      lastElement = elements[--i];\n    }\n\n    if (lastElement === null) {\n      return;\n    }\n\n    for (let j = 0; j < this.state.leadingComments.length; j++) {\n      if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n        this.state.leadingComments.splice(j, 1);\n        j--;\n      }\n    }\n\n    const newTrailingComments = [];\n\n    for (let i = 0; i < this.state.leadingComments.length; i++) {\n      const leadingComment = this.state.leadingComments[i];\n\n      if (leadingComment.end < node.end) {\n        newTrailingComments.push(leadingComment);\n\n        if (!takeAllComments) {\n          this.state.leadingComments.splice(i, 1);\n          i--;\n        }\n      } else {\n        if (node.trailingComments === undefined) {\n          node.trailingComments = [];\n        }\n\n        node.trailingComments.push(leadingComment);\n      }\n    }\n\n    if (takeAllComments) this.state.leadingComments = [];\n\n    if (newTrailingComments.length > 0) {\n      lastElement.trailingComments = newTrailingComments;\n    } else if (lastElement.trailingComments !== undefined) {\n      lastElement.trailingComments = [];\n    }\n  }\n\n  processComment(node) {\n    if (node.type === \"Program\" && node.body.length > 0) return;\n    const stack = this.state.commentStack;\n    let firstChild, lastChild, trailingComments, i, j;\n\n    if (this.state.trailingComments.length > 0) {\n      if (this.state.trailingComments[0].start >= node.end) {\n        trailingComments = this.state.trailingComments;\n        this.state.trailingComments = [];\n      } else {\n        this.state.trailingComments.length = 0;\n      }\n    } else if (stack.length > 0) {\n      const lastInStack = last(stack);\n\n      if (lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {\n        trailingComments = lastInStack.trailingComments;\n        delete lastInStack.trailingComments;\n      }\n    }\n\n    if (stack.length > 0 && last(stack).start >= node.start) {\n      firstChild = stack.pop();\n    }\n\n    while (stack.length > 0 && last(stack).start >= node.start) {\n      lastChild = stack.pop();\n    }\n\n    if (!lastChild && firstChild) lastChild = firstChild;\n\n    if (firstChild) {\n      switch (node.type) {\n        case \"ObjectExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties);\n          break;\n\n        case \"ObjectPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.properties, true);\n          break;\n\n        case \"CallExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.arguments);\n          break;\n\n        case \"ArrayExpression\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements);\n          break;\n\n        case \"ArrayPattern\":\n          this.adjustCommentsAfterTrailingComma(node, node.elements, true);\n          break;\n      }\n    } else if (this.state.commentPreviousNode && (this.state.commentPreviousNode.type === \"ImportSpecifier\" && node.type !== \"ImportSpecifier\" || this.state.commentPreviousNode.type === \"ExportSpecifier\" && node.type !== \"ExportSpecifier\")) {\n      this.adjustCommentsAfterTrailingComma(node, [this.state.commentPreviousNode], true);\n    }\n\n    if (lastChild) {\n      if (lastChild.leadingComments) {\n        if (lastChild !== node && lastChild.leadingComments.length > 0 && last(lastChild.leadingComments).end <= node.start) {\n          node.leadingComments = lastChild.leadingComments;\n          delete lastChild.leadingComments;\n        } else {\n          for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {\n            if (lastChild.leadingComments[i].end <= node.start) {\n              node.leadingComments = lastChild.leadingComments.splice(0, i + 1);\n              break;\n            }\n          }\n        }\n      }\n    } else if (this.state.leadingComments.length > 0) {\n      if (last(this.state.leadingComments).end <= node.start) {\n        if (this.state.commentPreviousNode) {\n          for (j = 0; j < this.state.leadingComments.length; j++) {\n            if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {\n              this.state.leadingComments.splice(j, 1);\n              j--;\n            }\n          }\n        }\n\n        if (this.state.leadingComments.length > 0) {\n          node.leadingComments = this.state.leadingComments;\n          this.state.leadingComments = [];\n        }\n      } else {\n        for (i = 0; i < this.state.leadingComments.length; i++) {\n          if (this.state.leadingComments[i].end > node.start) {\n            break;\n          }\n        }\n\n        const leadingComments = this.state.leadingComments.slice(0, i);\n\n        if (leadingComments.length) {\n          node.leadingComments = leadingComments;\n        }\n\n        trailingComments = this.state.leadingComments.slice(i);\n\n        if (trailingComments.length === 0) {\n          trailingComments = null;\n        }\n      }\n    }\n\n    this.state.commentPreviousNode = node;\n\n    if (trailingComments) {\n      if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {\n        node.innerComments = trailingComments;\n      } else {\n        node.trailingComments = trailingComments;\n      }\n    }\n\n    stack.push(node);\n  }\n\n}\n\nclass LocationParser extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, message, {\n    missingPluginNames,\n    code\n  } = {}) {\n    const loc = this.getLocationForPosition(pos);\n    message += ` (${loc.line}:${loc.column})`;\n    const err = new SyntaxError(message);\n    err.pos = pos;\n    err.loc = loc;\n\n    if (missingPluginNames) {\n      err.missingPlugin = missingPluginNames;\n    }\n\n    if (code !== undefined) {\n      err.code = code;\n    }\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.inParameters = false;\n    this.maybeInArrowParameters = false;\n    this.inPipeline = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.inPropertyName = false;\n    this.inClassProperty = false;\n    this.hasFlowComment = false;\n    this.isIterator = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.classLevel = 0;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.yieldPos = -1;\n    this.awaitPos = -1;\n    this.tokens = [];\n    this.comments = [];\n    this.trailingComments = [];\n    this.leadingComments = [];\n    this.commentStack = [];\n    this.commentPreviousNode = null;\n    this.pos = 0;\n    this.lineStart = 0;\n    this.type = types.eof;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types$1.braceStatement];\n    this.exprAllowed = true;\n    this.containsEsc = false;\n    this.containsOctal = false;\n    this.octalPosition = null;\n    this.exportedIdentifiers = [];\n    this.invalidTemplateEscapePosition = null;\n  }\n\n  init(options) {\n    this.strict = options.strictMode === false ? false : options.sourceType === \"module\";\n    this.curLine = options.startLine;\n    this.startLoc = this.endLoc = this.curPosition();\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([\"g\", \"m\", \"s\", \"i\", \"y\", \"u\"]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends LocationParser {\n  constructor(options, input) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  next() {\n    if (!this.isLookahead) {\n      this.checkKeywordEscapes();\n\n      if (this.options.tokens) {\n        this.state.tokens.push(new Token(this.state));\n      }\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = old.clone(true);\n    this.isLookahead = true;\n    this.next();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    const thisTokEnd = this.state.pos;\n    skipWhiteSpace.lastIndex = thisTokEnd;\n    const skip = skipWhiteSpace.exec(this.input);\n    return thisTokEnd + skip[0].length;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (!this.match(types.num) && !this.match(types.string)) return;\n    this.state.pos = this.state.start;\n\n    while (this.state.pos < this.state.lineStart) {\n      this.state.lineStart = this.input.lastIndexOf(\"\\n\", this.state.lineStart - 2) + 1;\n      --this.state.curLine;\n    }\n\n    this.nextToken();\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    const curContext = this.curContext();\n    if (!curContext || !curContext.preserveSpace) this.skipSpace();\n    this.state.containsOctal = false;\n    this.state.octalPosition = null;\n    this.state.start = this.state.pos;\n    this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(types.eof);\n      return;\n    }\n\n    if (curContext.override) {\n      curContext.override(this);\n    } else {\n      this.getTokenFromCode(this.input.codePointAt(this.state.pos));\n    }\n  }\n\n  pushComment(block, text, start, end, startLoc, endLoc) {\n    const comment = {\n      type: block ? \"CommentBlock\" : \"CommentLine\",\n      value: text,\n      start: start,\n      end: end,\n      loc: new SourceLocation(startLoc, endLoc)\n    };\n    if (this.options.tokens) this.state.tokens.push(comment);\n    this.state.comments.push(comment);\n    this.addComment(comment);\n  }\n\n  skipBlockComment() {\n    const startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", this.state.pos + 2);\n    if (end === -1) throw this.raise(start, \"Unterminated comment\");\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start;\n    let match;\n\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.state.pos) {\n      ++this.state.curLine;\n      this.state.lineStart = match.index + match[0].length;\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());\n  }\n\n  skipSpace() {\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              this.skipBlockComment();\n              break;\n\n            case 47:\n              this.skipLineComment(2);\n              break;\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else {\n            break loop;\n          }\n\n      }\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) this.updateContext(prevType);\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.input.charCodeAt(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, \"Unexpected digit after hash token\");\n    }\n\n    if ((this.hasPlugin(\"classPrivateProperties\") || this.hasPlugin(\"classPrivateMethods\")) && this.state.classLevel > 0) {\n      ++this.state.pos;\n      this.finishToken(types.hash);\n      return;\n    } else if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      this.finishOp(types.hash, 1);\n    } else {\n      throw this.raise(this.state.pos, \"Unexpected character '#'\");\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(types.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.dot);\n    }\n  }\n\n  readToken_slash() {\n    if (this.state.exprAllowed && !this.state.inType) {\n      ++this.state.pos;\n      this.readRegexp();\n      return;\n    }\n\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.slash, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    let ch = this.input.charCodeAt(this.state.pos);\n    if (ch !== 33) return false;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(types.interpreterDirective, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? types.star : types.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    const exprAllowed = this.state.exprAllowed;\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = types.exponent;\n    }\n\n    if (next === 61 && !exprAllowed) {\n      width++;\n      type = types.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(types.pipeline, 2);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (next === 45 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 62 && (this.state.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos)))) {\n        this.skipLineComment(3);\n        this.skipSpace();\n        this.nextToken();\n        return;\n      }\n\n      this.finishOp(types.incDec, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(types.assign, 2);\n    } else {\n      this.finishOp(types.plusMin, 1);\n    }\n  }\n\n  readToken_lt_gt(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    let size = 1;\n\n    if (next === code) {\n      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(this.state.pos + size) === 61) {\n        this.finishOp(types.assign, size + 1);\n        return;\n      }\n\n      this.finishOp(types.bitShift, size);\n      return;\n    }\n\n    if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {\n      this.skipLineComment(4);\n      this.skipSpace();\n      this.nextToken();\n      return;\n    }\n\n    if (next === 61) {\n      size = 2;\n    }\n\n    this.finishOp(types.relational, size);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(types.arrow);\n      return;\n    }\n\n    this.finishOp(code === 61 ? types.eq : types.bang, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63 && !this.state.inType) {\n      if (next2 === 61) {\n        this.finishOp(types.assign, 3);\n      } else {\n        this.finishOp(types.nullishCoalescing, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(types.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(types.question);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(types.parenL);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(types.parenR);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(types.semi);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(types.comma);\n        return;\n\n      case 91:\n        ++this.state.pos;\n        this.finishToken(types.bracketL);\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(types.bracketR);\n        return;\n\n      case 123:\n        ++this.state.pos;\n        this.finishToken(types.braceL);\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(types.braceR);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(types.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(types.colon);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        ++this.state.pos;\n        this.finishToken(types.backQuote);\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n      case 62:\n        this.readToken_lt_gt(code);\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(types.tilde, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(types.at);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord();\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, `Unexpected character '${String.fromCodePoint(code)}'`);\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.pos;\n    let escaped, inClass;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n\n      const ch = this.input.charAt(this.state.pos);\n\n      if (lineBreak.test(ch)) {\n        throw this.raise(start, \"Unterminated regular expression\");\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === \"[\") {\n          inClass = true;\n        } else if (ch === \"]\" && inClass) {\n          inClass = false;\n        } else if (ch === \"/\" && !inClass) {\n          break;\n        }\n\n        escaped = ch === \"\\\\\";\n      }\n\n      ++this.state.pos;\n    }\n\n    const content = this.input.slice(start, this.state.pos);\n    ++this.state.pos;\n    let mods = \"\";\n\n    while (this.state.pos < this.length) {\n      const char = this.input[this.state.pos];\n      const charCode = this.input.codePointAt(this.state.pos);\n\n      if (VALID_REGEX_FLAGS.has(char)) {\n        if (mods.indexOf(char) > -1) {\n          this.raise(this.state.pos + 1, \"Duplicate regular expression flag\");\n        }\n      } else if (isIdentifierChar(charCode) || charCode === 92) {\n        this.raise(this.state.pos + 1, \"Invalid regular expression flag\");\n      } else {\n        break;\n      }\n\n      ++this.state.pos;\n      mods += char;\n    }\n\n    this.finishToken(types.regexp, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (this.hasPlugin(\"numericSeparator\")) {\n        if (code === 95) {\n          const prev = this.input.charCodeAt(this.state.pos - 1);\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (allowedSiblings.indexOf(next) === -1) {\n            this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n          } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n            this.raise(this.state.pos, \"A numeric separator is only allowed between two digits\");\n          }\n\n          if (!allowNumSeparator) {\n            this.raise(this.state.pos, \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences\");\n          }\n\n          ++this.state.pos;\n          continue;\n        }\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, \"Expected number in radix \" + radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, \"Expected number in radix \" + radix);\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (this.input.charCodeAt(this.state.pos) === 110) {\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    this.finishToken(types.num, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isNonOctalDecimalInt = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, \"Invalid number\");\n    }\n\n    let octal = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (octal) {\n      if (this.state.strict) {\n        this.raise(start, \"Legacy octal literals are not allowed in strict mode\");\n      }\n\n      if (/[89]/.test(this.input.slice(start, this.state.pos))) {\n        octal = false;\n        isNonOctalDecimalInt = true;\n      }\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !octal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !octal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) this.raise(start, \"Invalid number\");\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (this.hasPlugin(\"numericSeparator\") && (octal || isNonOctalDecimalInt)) {\n      const underscorePos = this.input.slice(start, this.state.pos).indexOf(\"_\");\n\n      if (underscorePos > 0) {\n        this.raise(underscorePos + start, \"Numeric separator can not be used after leading 0\");\n      }\n    }\n\n    if (this.hasPlugin(\"bigInt\")) {\n      if (next === 110) {\n        if (isFloat || octal || isNonOctalDecimalInt) {\n          this.raise(start, \"Invalid BigIntLiteral\");\n        }\n\n        ++this.state.pos;\n        isBigInt = true;\n      }\n    }\n\n    if (isIdentifierStart(this.input.codePointAt(this.state.pos))) {\n      throw this.raise(this.state.pos, \"Identifier directly after number\");\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(types.bigint, str);\n      return;\n    }\n\n    const val = octal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(types.num, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code === null) {\n        --this.state.invalidTemplateEscapePosition;\n      } else if (code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, \"Code point out of bounds\");\n        } else {\n          this.state.invalidTemplateEscapePosition = codePos - 2;\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, \"Unterminated string constant\");\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(types.string, out);\n  }\n\n  readTmplToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, \"Unterminated template\");\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        if (this.state.pos === this.state.start && this.match(types.template)) {\n          if (ch === 36) {\n            this.state.pos += 2;\n            this.finishToken(types.dollarBraceL);\n            return;\n          } else {\n            ++this.state.pos;\n            this.finishToken(types.backQuote);\n            return;\n          }\n        }\n\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(types.template, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          const codePos = this.state.pos - 1;\n          this.state.invalidTemplateEscapePosition = codePos;\n          return null;\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          let octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              this.state.invalidTemplateEscapePosition = codePos;\n              return null;\n            } else if (this.state.strict) {\n              this.raise(codePos, \"Octal literal in strict mode\");\n            } else if (!this.state.containsOctal) {\n              this.state.containsOctal = true;\n              this.state.octalPosition = codePos;\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, \"Bad character escape sequence\");\n      } else {\n        this.state.pos = codePos - 1;\n        this.state.invalidTemplateEscapePosition = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1() {\n    let word = \"\";\n    this.state.containsEsc = false;\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    while (this.state.pos < this.length) {\n      const ch = this.input.codePointAt(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (this.state.isIterator && ch === 64) {\n        ++this.state.pos;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, \"Expecting Unicode escape sequence \\\\uXXXX\");\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, \"Invalid Unicode escape\");\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  isIterator(word) {\n    return word === \"@@iterator\" || word === \"@@asyncIterator\";\n  }\n\n  readWord() {\n    const word = this.readWord1();\n    const type = keywords.get(word) || types.name;\n\n    if (this.state.isIterator && (!this.isIterator(word) || !this.state.inType)) {\n      this.raise(this.state.pos, `Invalid identifier ${word}`);\n    }\n\n    this.finishToken(type, word);\n  }\n\n  checkKeywordEscapes() {\n    const kw = this.state.type.keyword;\n\n    if (kw && this.state.containsEsc) {\n      this.raise(this.state.start, `Escape sequence in keyword ${kw}`);\n    }\n  }\n\n  braceIsBlock(prevType) {\n    const parent = this.curContext();\n\n    if (parent === types$1.functionExpression || parent === types$1.functionStatement) {\n      return true;\n    }\n\n    if (prevType === types.colon && (parent === types$1.braceStatement || parent === types$1.braceExpression)) {\n      return !parent.isExpr;\n    }\n\n    if (prevType === types._return || prevType === types.name && this.state.exprAllowed) {\n      return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n    }\n\n    if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {\n      return true;\n    }\n\n    if (prevType === types.braceL) {\n      return parent === types$1.braceStatement;\n    }\n\n    if (prevType === types._var || prevType === types._const || prevType === types.name) {\n      return false;\n    }\n\n    if (prevType === types.relational) {\n      return true;\n    }\n\n    return !this.state.exprAllowed;\n  }\n\n  updateContext(prevType) {\n    const type = this.state.type;\n    let update;\n\n    if (type.keyword && (prevType === types.dot || prevType === types.questionDot)) {\n      this.state.exprAllowed = false;\n    } else if (update = type.updateContext) {\n      update.call(this, prevType);\n    } else {\n      this.state.exprAllowed = type.beforeExpr;\n    }\n  }\n\n}\n\nconst literal = /^('|\")((?:\\\\?.)*?)\\1/;\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isRelational(op) {\n    return this.match(types.relational) && this.state.value === op;\n  }\n\n  isLookaheadRelational(op) {\n    const next = this.nextTokenStart();\n\n    if (this.input.charAt(next) === op) {\n      if (next + 1 === this.input.length) {\n        return true;\n      }\n\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== op.charCodeAt(0) && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  expectRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n    } else {\n      this.unexpected(null, types.relational);\n    }\n  }\n\n  eatRelational(op) {\n    if (this.isRelational(op)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  isContextual(name) {\n    return this.match(types.name) && this.state.value === name && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    return this.input.slice(nameStart, nameEnd) === name && (nameEnd === this.input.length || !isIdentifierChar(this.input.charCodeAt(nameEnd)));\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(name) {\n    return this.isContextual(name) && this.eat(types.name);\n  }\n\n  expectContextual(name, message) {\n    if (!this.eatContextual(name)) this.unexpected(null, message);\n  }\n\n  canInsertSemicolon() {\n    return this.match(types.eof) || this.match(types.braceR) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  isLineTerminator() {\n    return this.eat(types.semi) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    if (!this.isLineTerminator()) this.unexpected(null, types.semi);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, message);\n    }\n  }\n\n  unexpected(pos, messageOrType = \"Unexpected token\") {\n    if (typeof messageOrType !== \"string\") {\n      messageOrType = `Unexpected token, expected \"${messageOrType.label}\"`;\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  expectPlugin(name, pos) {\n    if (!this.hasPlugin(name)) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling the parser plugin: '${name}'`, {\n        missingPluginNames: [name]\n      });\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(names, pos) {\n    if (!names.some(n => this.hasPlugin(n))) {\n      throw this.raise(pos != null ? pos : this.state.start, `This experimental syntax requires enabling one of the following parser plugin(s): '${names.join(\", \")}'`, {\n        missingPluginNames: names\n      });\n    }\n  }\n\n  checkYieldAwaitInDefaultParams() {\n    if (this.state.yieldPos !== -1 && (this.state.awaitPos === -1 || this.state.yieldPos < this.state.awaitPos)) {\n      this.raise(this.state.yieldPos, \"Yield cannot be used as name inside a generator function\");\n    }\n\n    if (this.state.awaitPos !== -1) {\n      this.raise(this.state.awaitPos, \"Await cannot be used as name inside an async function\");\n    }\n  }\n\n  strictDirective(start) {\n    for (;;) {\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n      const match = literal.exec(this.input.slice(start));\n      if (!match) break;\n      if (match[2] === \"use strict\") return true;\n      start += match[0].length;\n      skipWhiteSpace.lastIndex = start;\n      start += skipWhiteSpace.exec(this.input)[0].length;\n\n      if (this.input[start] === \";\") {\n        start++;\n      }\n    }\n\n    return false;\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser && parser.options.ranges) this.range = [pos, 0];\n    if (parser && parser.filename) this.loc.filename = parser.filename;\n  }\n\n  __clone() {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  }\n\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isBinding, contextDescription) {\n    var _node$extra2;\n\n    if (node) {\n      switch (node.type) {\n        case \"Identifier\":\n        case \"ObjectPattern\":\n        case \"ArrayPattern\":\n        case \"AssignmentPattern\":\n          break;\n\n        case \"ObjectExpression\":\n          node.type = \"ObjectPattern\";\n\n          for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n            var _node$extra;\n\n            const prop = node.properties[i];\n            const isLast = i === last;\n            this.toAssignableObjectExpressionProp(prop, isBinding, isLast);\n\n            if (isLast && prop.type === \"RestElement\" && ((_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma)) {\n              this.raiseRestNotLast(node.extra.trailingComma);\n            }\n          }\n\n          break;\n\n        case \"ObjectProperty\":\n          this.toAssignable(node.value, isBinding, contextDescription);\n          break;\n\n        case \"SpreadElement\":\n          {\n            this.checkToRestConversion(node);\n            node.type = \"RestElement\";\n            const arg = node.argument;\n            this.toAssignable(arg, isBinding, contextDescription);\n            break;\n          }\n\n        case \"ArrayExpression\":\n          node.type = \"ArrayPattern\";\n          this.toAssignableList(node.elements, isBinding, contextDescription, (_node$extra2 = node.extra) == null ? void 0 : _node$extra2.trailingComma);\n          break;\n\n        case \"AssignmentExpression\":\n          if (node.operator !== \"=\") {\n            this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\");\n          }\n\n          node.type = \"AssignmentPattern\";\n          delete node.operator;\n          this.toAssignable(node.left, isBinding, contextDescription);\n          break;\n\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isBinding, contextDescription);\n          break;\n\n        case \"MemberExpression\":\n          if (!isBinding) break;\n\n        default:\n      }\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isBinding, isLast) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? \"Object pattern can't contain getter or setter\" : \"Object pattern can't contain methods\";\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isBinding, \"object destructuring pattern\");\n    }\n  }\n\n  toAssignableList(exprList, isBinding, contextDescription, trailingCommaPos) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if (last && last.type === \"RestElement\") {\n        --end;\n      } else if (last && last.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        const arg = last.argument;\n        this.toAssignable(arg, isBinding, contextDescription);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isBinding, contextDescription);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (let _i = 0; _i < exprList.length; _i++) {\n      const expr = exprList[_i];\n\n      if (expr && expr.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseSpread(refShorthandDefaultPos, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssign(false, refShorthandDefaultPos, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case types.bracketL:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(types.bracketR, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case types.braceL:\n        return this.parseObj(true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n      }\n\n      if (allowEmpty && this.match(types.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(types.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(types.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, \"Stage 2 decorators cannot be used to decorate parameters\");\n        }\n\n        while (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    startLoc = startLoc || this.state.startLoc;\n    startPos = startPos || this.state.start;\n    left = left || this.parseBindingAtom();\n    if (!this.eat(types.eq)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssign();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, bindingType = BIND_NONE, checkClashes, contextDescription, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(expr.name, this.inModule) : isStrictBindOnlyReservedWord(expr.name))) {\n          this.raise(expr.start, `${bindingType === BIND_NONE ? \"Assigning to\" : \"Binding\"} '${expr.name}' in strict mode`);\n        }\n\n        if (checkClashes) {\n          const key = `_${expr.name}`;\n\n          if (checkClashes[key]) {\n            this.raise(expr.start, \"Argument name clash\");\n          } else {\n            checkClashes[key] = true;\n          }\n        }\n\n        if (disallowLetBinding && expr.name === \"let\") {\n          this.raise(expr.start, \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\");\n        }\n\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(expr.name, bindingType, expr.start);\n        }\n\n        break;\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, \"Binding member expression\");\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let _i2 = 0, _expr$properties = expr.properties; _i2 < _expr$properties.length; _i2++) {\n          let prop = _expr$properties[_i2];\n          if (prop.type === \"ObjectProperty\") prop = prop.value;else if (prop.type === \"ObjectMethod\") continue;\n          this.checkLVal(prop, bindingType, checkClashes, \"object destructuring pattern\", disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (let _i3 = 0, _expr$elements = expr.elements; _i3 < _expr$elements.length; _i3++) {\n          const elem = _expr$elements[_i3];\n\n          if (elem) {\n            this.checkLVal(elem, bindingType, checkClashes, \"array destructuring pattern\", disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, bindingType, checkClashes, \"assignment pattern\");\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, bindingType, checkClashes, \"rest element\");\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, bindingType, checkClashes, \"parenthesized expression\");\n        break;\n\n      default:\n        {\n          const message = (bindingType === BIND_NONE ? \"Invalid\" : \"Binding invalid\") + \" left-hand side\" + (contextDescription ? \" in \" + contextDescription : \"expression\");\n          this.raise(expr.start, message);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, \"Invalid rest operator's argument\");\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(types.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, `Rest element must be last element`);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, `Unexpected trailing comma after rest element`);\n  }\n\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass ExpressionParser extends LValParser {\n  checkDuplicatedProto(prop, protoRef) {\n    if (prop.type === \"SpreadElement\" || prop.computed || prop.kind || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : String(key.value);\n\n    if (name === \"__proto__\") {\n      if (protoRef.used && !protoRef.start) {\n        protoRef.start = key.start;\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  getExpression() {\n    this.scope.enter(SCOPE_PROGRAM);\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(types.eof)) {\n      this.unexpected();\n    }\n\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    return expr;\n  }\n\n  parseExpression(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);\n\n    if (this.match(types.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(types.comma)) {\n        node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssign(noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(\"yield\")) {\n      if (this.scope.inGenerator) {\n        let left = this.parseYield(noIn);\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      } else {\n        this.state.exprAllowed = false;\n      }\n    }\n\n    let failOnShorthandAssign;\n\n    if (refShorthandDefaultPos) {\n      failOnShorthandAssign = false;\n    } else {\n      refShorthandDefaultPos = {\n        start: 0\n      };\n      failOnShorthandAssign = true;\n    }\n\n    if (this.match(types.parenL) || this.match(types.name)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (this.state.type.isAssign) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (operator === \"??=\") {\n        this.expectPlugin(\"nullishCoalescingOperator\");\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      if (operator === \"||=\" || operator === \"&&=\") {\n        this.expectPlugin(\"logicalAssignment\");\n      }\n\n      node.left = this.match(types.eq) ? this.toAssignable(left, undefined, \"assignment expression\") : left;\n\n      if (refShorthandDefaultPos.start >= node.left.start) {\n        refShorthandDefaultPos.start = 0;\n      }\n\n      this.checkLVal(left, undefined, undefined, \"assignment expression\");\n      const maybePattern = unwrapParenthesizedExpression(left);\n      let patternErrorMsg;\n\n      if (maybePattern.type === \"ObjectPattern\") {\n        patternErrorMsg = \"`({a}) = 0` use `({a} = 0)`\";\n      } else if (maybePattern.type === \"ArrayPattern\") {\n        patternErrorMsg = \"`([a]) = 0` use `([a] = 0)`\";\n      }\n\n      if (patternErrorMsg && (left.extra && left.extra.parenthesized || left.type === \"ParenthesizedExpression\")) {\n        this.raise(maybePattern.start, `You're trying to assign to a parenthesized expression, eg. instead of ${patternErrorMsg}`);\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(noIn, refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n    return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);\n  }\n\n  parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos) {\n    if (this.eat(types.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssign();\n      this.expect(types.colon);\n      node.alternate = this.parseMaybeAssign(noIn);\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprOps(noIn, refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnary(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec, noIn) {\n    const prec = this.state.type.binop;\n\n    if (prec != null && (!noIn || !this.match(types._in))) {\n      if (prec > minPrec) {\n        const operator = this.state.value;\n\n        if (operator === \"|>\" && this.state.inFSharpPipelineDirectBody) {\n          return left;\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = operator;\n\n        if (operator === \"**\" && left.type === \"UnaryExpression\" && (this.options.createParenthesizedExpressions || !(left.extra && left.extra.parenthesized))) {\n          this.raise(left.argument.start, \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\");\n        }\n\n        const op = this.state.type;\n\n        if (op === types.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          this.state.inPipeline = true;\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        } else if (op === types.nullishCoalescing) {\n          this.expectPlugin(\"nullishCoalescingOperator\");\n        }\n\n        this.next();\n\n        if (op === types.pipeline && this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"minimal\") {\n          if (this.match(types.name) && this.state.value === \"await\" && this.scope.inAsync) {\n            throw this.raise(this.state.start, `Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal`);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec, noIn);\n\n        if (op === types.nullishCoalescing) {\n          if (left.type === \"LogicalExpression\" && left.operator !== \"??\" && !(left.extra && left.extra.parenthesized)) {\n            throw this.raise(left.start, `Nullish coalescing operator(??) requires parens when mixing with logical operators`);\n          } else if (node.right.type === \"LogicalExpression\" && node.right.operator !== \"??\" && !(node.right.extra && node.right.extra.parenthesized)) {\n            throw this.raise(node.right.start, `Nullish coalescing operator(??) requires parens when mixing with logical operators`);\n          }\n        }\n\n        this.finishNode(node, op === types.logicalOR || op === types.logicalAND || op === types.nullishCoalescing ? \"LogicalExpression\" : \"BinaryExpression\");\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case types.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"smart\":\n            return this.withTopicPermittingContext(() => {\n              return this.parseSmartPipelineBody(this.parseExprOpBaseRightExpr(op, prec, noIn), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec, noIn);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec, noIn);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);\n  }\n\n  parseMaybeUnary(refShorthandDefaultPos) {\n    if (this.isContextual(\"await\") && this.isAwaitAllowed()) {\n      return this.parseAwait();\n    } else if (this.state.type.prefix) {\n      const node = this.startNode();\n      const update = this.match(types.incDec);\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (node.operator === \"throw\") {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      this.next();\n      node.argument = this.parseMaybeUnary();\n\n      if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n        this.unexpected(refShorthandDefaultPos.start);\n      }\n\n      if (update) {\n        this.checkLVal(node.argument, undefined, undefined, \"prefix operation\");\n      } else if (this.state.strict && node.operator === \"delete\") {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, \"Deleting local variable in strict mode\");\n        } else if (arg.type === \"MemberExpression\" && arg.property.type === \"PrivateName\") {\n          this.raise(node.start, \"Deleting a private field is not allowed\");\n        }\n      }\n\n      return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refShorthandDefaultPos);\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;\n\n    while (this.state.type.postfix && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, undefined, undefined, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refShorthandDefaultPos) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refShorthandDefaultPos);\n\n    if (expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt) {\n      return expr;\n    }\n\n    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsync(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!noCalls && this.eat(types.doubleColon)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.callee = this.parseNoCallExpr();\n      state.stop = true;\n      return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n    } else if (this.match(types.questionDot)) {\n      this.expectPlugin(\"optionalChaining\");\n      state.optionalChainMember = true;\n\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n\n      if (this.eat(types.bracketL)) {\n        node.object = base;\n        node.property = this.parseExpression();\n        node.computed = true;\n        node.optional = true;\n        this.expect(types.bracketR);\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      } else if (this.eat(types.parenL)) {\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, true);\n      } else {\n        node.object = base;\n        node.property = this.parseIdentifier(true);\n        node.computed = false;\n        node.optional = true;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n    } else if (this.eat(types.dot)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseMaybePrivateName();\n      node.computed = false;\n\n      if (node.property.type === \"PrivateName\" && node.object.type === \"Super\") {\n        this.raise(startPos, \"Private fields can't be accessed on super\");\n      }\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (this.eat(types.bracketL)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.object = base;\n      node.property = this.parseExpression();\n      node.computed = true;\n      this.expect(types.bracketR);\n\n      if (state.optionalChainMember) {\n        node.optional = false;\n        return this.finishNode(node, \"OptionalMemberExpression\");\n      }\n\n      return this.finishNode(node, \"MemberExpression\");\n    } else if (!noCalls && this.match(types.parenL)) {\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      const oldYieldPos = this.state.yieldPos;\n      const oldAwaitPos = this.state.awaitPos;\n      this.state.maybeInArrowParameters = true;\n      this.state.yieldPos = -1;\n      this.state.awaitPos = -1;\n      this.next();\n      let node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, state.maybeAsyncArrow, base.type === \"Import\", base.type !== \"Super\", node);\n      this.finishCallExpression(node, state.optionalChainMember);\n\n      if (state.maybeAsyncArrow && this.shouldParseAsyncArrow()) {\n        state.stop = true;\n        node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n        this.checkYieldAwaitInDefaultParams();\n        this.state.yieldPos = oldYieldPos;\n        this.state.awaitPos = oldAwaitPos;\n      } else {\n        this.toReferencedListDeep(node.arguments);\n        if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n\n        if (!this.isAwaitAllowed() && !oldMaybeInArrowParameters || oldAwaitPos !== -1) {\n          this.state.awaitPos = oldAwaitPos;\n        }\n      }\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n      return node;\n    } else if (this.match(types.backQuote)) {\n      return this.parseTaggedTemplateExpression(startPos, startLoc, base, state);\n    } else {\n      state.stop = true;\n      return base;\n    }\n  }\n\n  parseTaggedTemplateExpression(startPos, startLoc, base, state, typeArguments) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (typeArguments) node.typeParameters = typeArguments;\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, \"Tagged Template Literals are not allowed in optionalChain\");\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsync(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === \"async\";\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length !== 1) {\n        this.raise(node.start, \"import() requires exactly one argument\");\n      } else {\n        const importArg = node.arguments[0];\n\n        if (importArg && importArg.type === \"SpreadElement\") {\n          this.raise(importArg.start, \"... is not allowed in import()\");\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, possibleAsyncArrow, dynamicImport, allowPlaceholder, nodeForExtra) {\n    const elts = [];\n    let innerParenStart;\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (dynamicImport) {\n            this.raise(this.state.lastTokStart, \"Trailing comma is disallowed inside import(...) arguments\");\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      if (this.match(types.parenL) && !innerParenStart) {\n        innerParenStart = this.state.start;\n      }\n\n      elts.push(this.parseExprListItem(false, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, possibleAsyncArrow ? {\n        start: 0\n      } : undefined, allowPlaceholder));\n    }\n\n    if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {\n      this.unexpected();\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(types.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.expect(types.arrow);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refShorthandDefaultPos) {\n    if (this.state.type === types.slash) this.readRegexp();\n    const canBeArrow = this.state.potentialArrowAt === this.state.start;\n    let node;\n\n    switch (this.state.type) {\n      case types._super:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.parenL) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super() is only valid inside a class constructor of a subclass. \" + \"Maybe a typo in the method name ('constructor') or not extending another class?\");\n        } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n          this.raise(node.start, \"super is only allowed in object methods and classes\");\n        }\n\n        if (!this.match(types.parenL) && !this.match(types.bracketL) && !this.match(types.dot)) {\n          this.raise(node.start, \"super can only be used with function calls (i.e. super()) or \" + \"in property accesses (i.e. super.prop or super[prop])\");\n        }\n\n        return this.finishNode(node, \"Super\");\n\n      case types._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(types.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        this.expectPlugin(\"dynamicImport\", node.start);\n\n        if (!this.match(types.parenL)) {\n          this.unexpected(null, types.parenL);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case types._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case types.name:\n        {\n          node = this.startNode();\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && this.match(types._function) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseFunction(node, undefined, true);\n          } else if (canBeArrow && !containsEsc && id.name === \"async\" && this.match(types.name) && !this.canInsertSemicolon()) {\n            const params = [this.parseIdentifier()];\n            this.expect(types.arrow);\n            this.parseArrowExpression(node, params, true);\n            return node;\n          }\n\n          if (canBeArrow && this.match(types.arrow) && !this.canInsertSemicolon()) {\n            this.next();\n            this.parseArrowExpression(node, [id], false);\n            return node;\n          }\n\n          return id;\n        }\n\n      case types._do:\n        {\n          this.expectPlugin(\"doExpressions\");\n          const node = this.startNode();\n          this.next();\n          const oldLabels = this.state.labels;\n          this.state.labels = [];\n          node.body = this.parseBlock();\n          this.state.labels = oldLabels;\n          return this.finishNode(node, \"DoExpression\");\n        }\n\n      case types.regexp:\n        {\n          const value = this.state.value;\n          node = this.parseLiteral(value.value, \"RegExpLiteral\");\n          node.pattern = value.pattern;\n          node.flags = value.flags;\n          return node;\n        }\n\n      case types.num:\n        return this.parseLiteral(this.state.value, \"NumericLiteral\");\n\n      case types.bigint:\n        return this.parseLiteral(this.state.value, \"BigIntLiteral\");\n\n      case types.string:\n        return this.parseLiteral(this.state.value, \"StringLiteral\");\n\n      case types._null:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"NullLiteral\");\n\n      case types._true:\n      case types._false:\n        return this.parseBooleanLiteral();\n\n      case types.parenL:\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n\n      case types.bracketL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          node = this.startNode();\n          this.next();\n          node.elements = this.parseExprList(types.bracketR, true, refShorthandDefaultPos, node);\n\n          if (!this.state.maybeInArrowParameters) {\n            this.toReferencedList(node.elements);\n          }\n\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return this.finishNode(node, \"ArrayExpression\");\n        }\n\n      case types.braceL:\n        {\n          const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n          this.state.inFSharpPipelineDirectBody = false;\n          const ret = this.parseObj(false, refShorthandDefaultPos);\n          this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n          return ret;\n        }\n\n      case types._function:\n        return this.parseFunctionExpression();\n\n      case types.at:\n        this.parseDecorators();\n\n      case types._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case types._new:\n        return this.parseNew();\n\n      case types.backQuote:\n        return this.parseTemplate(false);\n\n      case types.doubleColon:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, \"Binding should be performed on object property.\");\n          }\n        }\n\n      case types.hash:\n        {\n          if (this.state.inPipeline) {\n            node = this.startNode();\n\n            if (this.getPluginOption(\"pipelineOperator\", \"proposal\") !== \"smart\") {\n              this.raise(node.start, \"Primary Topic Reference found but pipelineOperator not passed 'smart' for 'proposal' option.\");\n            }\n\n            this.next();\n\n            if (!this.primaryTopicReferenceIsAllowedInCurrentTopicContext()) {\n              this.raise(node.start, `Topic reference was used in a lexical context without topic binding`);\n            }\n\n            this.registerTopicReference();\n            return this.finishNode(node, \"PipelinePrimaryTopicReference\");\n          }\n        }\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseBooleanLiteral() {\n    const node = this.startNode();\n    node.value = this.match(types._true);\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseMaybePrivateName() {\n    const isPrivate = this.match(types.hash);\n\n    if (isPrivate) {\n      this.expectOnePlugin([\"classPrivateProperties\", \"classPrivateMethods\"]);\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space between # and identifier\");\n      node.id = this.parseIdentifier(true);\n      return this.finishNode(node, \"PrivateName\");\n    } else {\n      return this.parseIdentifier(true);\n    }\n  }\n\n  parseFunctionExpression() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"function\");\n\n    if (this.scope.inGenerator && this.eat(types.dot)) {\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n\n    if (meta.name === \"function\" && propertyName === \"sent\") {\n      if (this.isContextual(propertyName)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n    }\n\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, `The only valid meta property for ${meta.name} is ${meta.name}.${propertyName}`);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.expect(types.dot);\n\n    if (this.isContextual(\"meta\")) {\n      this.expectPlugin(\"importMeta\");\n\n      if (!this.inModule) {\n        this.raise(id.start, `import.meta may appear only with 'sourceType: \"module\"'`, {\n          code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n        });\n      }\n\n      this.sawUnambiguousESM = true;\n    } else if (!this.hasPlugin(\"importMeta\")) {\n      this.raise(id.start, `Dynamic imports require a parameter: import('a.js')`);\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteral(value, type, startPos, startLoc) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    const node = this.startNodeAt(startPos, startLoc);\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(startPos, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.expect(types.parenL);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const refNeedsArrowPos = {\n      start: 0\n    };\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(types.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma, refNeedsArrowPos.start || null);\n\n        if (this.match(types.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(types.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));\n      }\n    }\n\n    const innerEndPos = this.state.start;\n    const innerEndLoc = this.state.startLoc;\n    this.expect(types.parenR);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkYieldAwaitInDefaultParams();\n      this.state.yieldPos = oldYieldPos;\n      this.state.awaitPos = oldAwaitPos;\n\n      for (let _i = 0; _i < exprList.length; _i++) {\n        const param = exprList[_i];\n\n        if (param.extra && param.extra.parenthesized) {\n          this.unexpected(param.extra.parenStart);\n        }\n      }\n\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    if (oldYieldPos !== -1) this.state.yieldPos = oldYieldPos;\n    if (oldAwaitPos !== -1) this.state.awaitPos = oldAwaitPos;\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n\n    if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNodeAt(val, \"SequenceExpression\", innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow() {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(types.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNew() {\n    const node = this.startNode();\n    let meta = this.startNode();\n    this.next();\n    meta = this.createIdentifier(meta, \"new\");\n\n    if (this.eat(types.dot)) {\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.state.inClassProperty) {\n        let error = \"new.target can only be used in functions\";\n\n        if (this.hasPlugin(\"classProperties\")) {\n          error += \" or class properties\";\n        }\n\n        this.raise(metaProp.start, error);\n      }\n\n      return metaProp;\n    }\n\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, \"Cannot use new with import(...)\");\n    } else if (node.callee.type === \"OptionalMemberExpression\" || node.callee.type === \"OptionalCallExpression\") {\n      this.raise(this.state.lastTokEnd, \"constructors in/after an Optional Chain are not allowed\");\n    } else if (this.eat(types.questionDot)) {\n      this.raise(this.state.start, \"constructors in/after an Optional Chain are not allowed\");\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(types.parenL)) {\n      const args = this.parseExprList(types.parenR);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const elem = this.startNode();\n\n    if (this.state.value === null) {\n      if (!isTagged) {\n        this.raise(this.state.invalidTemplateEscapePosition || 0, \"Invalid escape sequence in template\");\n      } else {\n        this.state.invalidTemplateEscapePosition = null;\n      }\n    }\n\n    elem.value = {\n      raw: this.input.slice(this.state.start, this.state.end).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: this.state.value\n    };\n    this.next();\n    elem.tail = this.match(types.backQuote);\n    return this.finishNode(elem, \"TemplateElement\");\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    this.next();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      this.expect(types.dollarBraceL);\n      node.expressions.push(this.parseExpression());\n      this.expect(types.braceR);\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    this.next();\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseObj(isPattern, refShorthandDefaultPos) {\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(types.braceR)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          this.next();\n          break;\n        }\n      }\n\n      const prop = this.parseObjectMember(isPattern, refShorthandDefaultPos);\n      if (!isPattern) this.checkDuplicatedProto(prop, propHash);\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    if (!this.match(types.eq) && propHash.start !== undefined) {\n      this.raise(propHash.start, \"Redefinition of __proto__ property\");\n    }\n\n    return this.finishNode(node, isPattern ? \"ObjectPattern\" : \"ObjectExpression\");\n  }\n\n  isAsyncProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && prop.key.name === \"async\" && (this.match(types.name) || this.match(types.num) || this.match(types.string) || this.match(types.bracketL) || this.state.type.keyword || this.match(types.star)) && !this.hasPrecedingLineBreak();\n  }\n\n  parseObjectMember(isPattern, refShorthandDefaultPos) {\n    let decorators = [];\n\n    if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, \"Stage 2 decorators disallow object literal property decorators\");\n      }\n\n      while (this.match(types.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isGenerator = false;\n    let isAsync = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(types.ellipsis)) {\n      if (decorators.length) this.unexpected();\n\n      if (isPattern) {\n        this.next();\n        prop.argument = this.parseIdentifier();\n        this.checkCommaAfterRest(125);\n        return this.finishNode(prop, \"RestElement\");\n      }\n\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (isPattern || refShorthandDefaultPos) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    if (!isPattern) {\n      isGenerator = this.eat(types.star);\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.parsePropertyName(prop);\n\n    if (!isPattern && !containsEsc && !isGenerator && this.isAsyncProp(prop)) {\n      isAsync = true;\n      isGenerator = this.eat(types.star);\n      this.parsePropertyName(prop);\n    } else {\n      isAsync = false;\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc);\n    return prop;\n  }\n\n  isGetterOrSetterMethod(prop, isPattern) {\n    return !isPattern && !prop.computed && prop.key.type === \"Identifier\" && (prop.key.name === \"get\" || prop.key.name === \"set\") && (this.match(types.string) || this.match(types.num) || this.match(types.bracketL) || this.match(types.name) || !!this.state.type.keyword);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  checkGetterSetterParams(method) {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const start = method.start;\n\n    if (method.params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, \"getter must not have any formal parameters\");\n      } else {\n        this.raise(start, \"setter must have exactly one formal parameter\");\n      }\n    }\n\n    if (method.kind === \"set\" && method.params[method.params.length - 1].type === \"RestElement\") {\n      this.raise(start, \"setter function argument must not be a rest parameter\");\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) {\n    if (isAsync || isGenerator || this.match(types.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n\n    if (!containsEsc && this.isGetterOrSetterMethod(prop, isPattern)) {\n      if (isGenerator || isAsync) this.unexpected();\n      prop.kind = prop.key.name;\n      this.parsePropertyName(prop);\n      this.parseMethod(prop, false, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos) {\n    prop.shorthand = false;\n\n    if (this.eat(types.colon)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, true);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else if (this.match(types.eq) && refShorthandDefaultPos) {\n        if (!refShorthandDefaultPos.start) {\n          refShorthandDefaultPos.start = this.state.start;\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());\n      } else {\n        prop.value = prop.key.__clone();\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos, containsEsc) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, containsEsc) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refShorthandDefaultPos);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(types.bracketL)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssign();\n      this.expect(types.bracketR);\n    } else {\n      const oldInPropertyName = this.state.inPropertyName;\n      this.state.inPropertyName = true;\n      prop.key = this.match(types.num) || this.match(types.string) ? this.parseExprAtom() : this.parseMaybePrivateName();\n\n      if (prop.key.type !== \"PrivateName\") {\n        prop.computed = false;\n      }\n\n      this.state.inPropertyName = oldInPropertyName;\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.parseFunctionParams(node, allowModifiers);\n    this.checkYieldAwaitInDefaultParams();\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.scope.exit();\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(functionFlags(isAsync, false) | SCOPE_ARROW);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    if (params) this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    this.parseFunctionBody(node, true);\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, true, \"arrow function parameters\", trailingCommaPos);\n  }\n\n  isStrictBody(node) {\n    const isBlockStatement = node.body.type === \"BlockStatement\";\n\n    if (isBlockStatement && node.body.directives.length) {\n      for (let _i2 = 0, _node$body$directives = node.body.directives; _i2 < _node$body$directives.length; _i2++) {\n        const directive = _node$body$directives[_i2];\n\n        if (directive.value.value === \"use strict\") {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(types.braceL);\n    const oldStrict = this.state.strict;\n    let useStrict = false;\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = false;\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const nonSimple = !this.isSimpleParamList(node.params);\n\n      if (!oldStrict || nonSimple) {\n        useStrict = this.strictDirective(this.state.end);\n\n        if (useStrict && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, \"Illegal 'use strict' directive in function with non-simple parameter list\");\n        }\n      }\n\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      if (useStrict) this.state.strict = true;\n      this.checkParams(node, !oldStrict && !useStrict && !allowExpression && !isMethod && !nonSimple, allowExpression, !oldStrict && useStrict);\n      node.body = this.parseBlock(true, false);\n      this.state.labels = oldLabels;\n    }\n\n    this.state.inParameters = oldInParameters;\n\n    if (this.state.strict && node.id) {\n      this.checkLVal(node.id, BIND_OUTSIDE, undefined, \"function name\", undefined, !oldStrict && useStrict);\n    }\n\n    this.state.strict = oldStrict;\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const nameHash = Object.create(null);\n\n    for (let i = 0; i < node.params.length; i++) {\n      this.checkLVal(node.params[i], BIND_VAR, allowDuplicates ? null : nameHash, \"function parameter list\", undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refShorthandDefaultPos, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refShorthandDefaultPos, refNeedsArrowPos, allowPlaceholder) {\n    let elt;\n\n    if (allowEmpty && this.match(types.comma)) {\n      elt = null;\n    } else if (this.match(types.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refShorthandDefaultPos, refNeedsArrowPos), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(types.question)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, \"Unexpected argument placeholder\");\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n\n    if (this.match(types.name)) {\n      name = this.state.value;\n    } else if (this.state.type.keyword) {\n      name = this.state.type.keyword;\n\n      if ((name === \"class\" || name === \"function\") && (this.state.lastTokEnd !== this.state.lastTokStart + 1 || this.input.charCodeAt(this.state.lastTokStart) !== 46)) {\n        this.state.context.pop();\n      }\n    } else {\n      throw this.unexpected();\n    }\n\n    if (liberal) {\n      this.state.type = types.name;\n    } else {\n      this.checkReservedWord(name, this.state.start, !!this.state.type.keyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (this.scope.inGenerator && word === \"yield\") {\n      this.raise(startLoc, \"Can not use 'yield' as identifier inside a generator\");\n      return;\n    }\n\n    if (word === \"await\") {\n      if (this.scope.inAsync) {\n        this.raise(startLoc, \"Can not use 'await' as identifier inside an async function\");\n        return;\n      }\n\n      if (this.state.awaitPos === -1 && (this.state.maybeInArrowParameters || this.isAwaitAllowed())) {\n        this.state.awaitPos = this.state.start;\n      }\n    }\n\n    if (this.state.inClassProperty && word === \"arguments\") {\n      this.raise(startLoc, \"'arguments' is not allowed in class field initializer\");\n      return;\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, `Unexpected keyword '${word}'`);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      if (!this.scope.inAsync && word === \"await\") {\n        this.raise(startLoc, \"Can not use keyword 'await' outside an async function\");\n      } else {\n        this.raise(startLoc, `Unexpected reserved word '${word}'`);\n      }\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.scope.inFunction) return this.scope.inAsync;\n    if (this.options.allowAwaitOutsideFunction) return true;\n    if (this.hasPlugin(\"topLevelAwait\")) return this.inModule;\n    return false;\n  }\n\n  parseAwait() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"await is not allowed in async function parameters\");\n    } else if (this.state.awaitPos === -1) {\n      this.state.awaitPos = node.start;\n    }\n\n    if (this.eat(types.star)) {\n      this.raise(node.start, \"await* has been removed from the async functions proposal. Use Promise.all() instead.\");\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.hasPrecedingLineBreak() || this.match(types.plusMin) || this.match(types.parenL) || this.match(types.bracketL) || this.match(types.backQuote) || this.match(types.regexp) || this.match(types.slash) || this.hasPlugin(\"v8intrinsic\") && this.match(types.modulo)) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary();\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  parseYield(noIn) {\n    const node = this.startNode();\n\n    if (this.state.inParameters) {\n      this.raise(node.start, \"yield is not allowed in generator parameters\");\n    } else if (this.state.yieldPos === -1) {\n      this.state.yieldPos = node.start;\n    }\n\n    this.next();\n\n    if (this.match(types.semi) || !this.match(types.star) && !this.state.type.startsExpr || this.hasPrecedingLineBreak()) {\n      node.delegate = false;\n      node.argument = null;\n    } else {\n      node.delegate = this.eat(types.star);\n      node.argument = this.parseMaybeAssign(noIn);\n    }\n\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.getPluginOption(\"pipelineOperator\", \"proposal\") === \"smart\") {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, `Pipeline head should not be a comma-separated sequence expression`);\n      }\n    }\n  }\n\n  parseSmartPipelineBody(childExpression, startPos, startLoc) {\n    const pipelineStyle = this.checkSmartPipelineBodyStyle(childExpression);\n    this.checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos);\n    return this.parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc);\n  }\n\n  checkSmartPipelineBodyEarlyErrors(childExpression, pipelineStyle, startPos) {\n    if (this.match(types.arrow)) {\n      throw this.raise(this.state.start, `Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized`);\n    } else if (pipelineStyle === \"PipelineTopicExpression\" && childExpression.type === \"SequenceExpression\") {\n      this.raise(startPos, `Pipeline body may not be a comma-separated sequence expression`);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpression, pipelineStyle, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    switch (pipelineStyle) {\n      case \"PipelineBareFunction\":\n        bodyNode.callee = childExpression;\n        break;\n\n      case \"PipelineBareConstructor\":\n        bodyNode.callee = childExpression.callee;\n        break;\n\n      case \"PipelineBareAwaitedFunction\":\n        bodyNode.callee = childExpression.argument;\n        break;\n\n      case \"PipelineTopicExpression\":\n        if (!this.topicReferenceWasUsedInCurrentTopicContext()) {\n          this.raise(startPos, `Pipeline is in topic style but does not use topic reference`);\n        }\n\n        bodyNode.expression = childExpression;\n        break;\n\n      default:\n        throw new Error(`Internal @babel/parser error: Unknown pipeline style (${pipelineStyle})`);\n    }\n\n    return this.finishNode(bodyNode, pipelineStyle);\n  }\n\n  checkSmartPipelineBodyStyle(expression) {\n    switch (expression.type) {\n      default:\n        return this.isSimpleReference(expression) ? \"PipelineBareFunction\" : \"PipelineTopicExpression\";\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  withTopicPermittingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withTopicForbiddingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  primaryTopicReferenceIsAllowedInCurrentTopicContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentTopicContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec, noIn) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    program.sourceType = this.options.sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, types.eof);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (let _i = 0, _Array$from = Array.from(this.scope.undefinedExports); _i < _Array$from.length; _i++) {\n        const [name] = _Array$from[_i];\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, `Export '${name}' is not defined`);\n      }\n    }\n\n    file.program = this.finishNode(program, \"Program\");\n    file.comments = this.state.comments;\n    if (this.options.tokens) file.tokens = this.state.tokens;\n    return this.finishNode(file, \"File\");\n  }\n\n  stmtToDirective(stmt) {\n    const expr = stmt.expression;\n    const directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);\n    const directive = this.startNodeAt(stmt.start, stmt.loc.start);\n    const raw = this.input.slice(expr.start, expr.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    directive.value = this.finishNodeAt(directiveLiteral, \"DirectiveLiteral\", expr.end, expr.loc.end);\n    return this.finishNodeAt(directive, \"Directive\", stmt.end, stmt.loc.end);\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(types.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(\"let\")) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const nextCh = this.input.charCodeAt(next);\n    if (nextCh === 91) return true;\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      let pos = next + 1;\n\n      while (isIdentifierChar(this.input.charCodeAt(pos))) {\n        ++pos;\n      }\n\n      const ident = this.input.slice(next, pos);\n      if (!keywordRelationalOperator.test(ident)) return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(types.at)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = types._var;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case types._break:\n      case types._continue:\n        return this.parseBreakContinueStatement(node, starttype.keyword);\n\n      case types._debugger:\n        return this.parseDebuggerStatement(node);\n\n      case types._do:\n        return this.parseDoStatement(node);\n\n      case types._for:\n        return this.parseForStatement(node);\n\n      case types._function:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, \"In strict mode code, functions can only be declared at top level or inside a block\");\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, \"In non-strict mode code, functions can only be declared at top level, \" + \"inside a block, or as the body of an if statement\");\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case types._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case types._if:\n        return this.parseIfStatement(node);\n\n      case types._return:\n        return this.parseReturnStatement(node);\n\n      case types._switch:\n        return this.parseSwitchStatement(node);\n\n      case types._throw:\n        return this.parseThrowStatement(node);\n\n      case types._try:\n        return this.parseTryStatement(node);\n\n      case types._const:\n      case types._var:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, \"Lexical declaration cannot appear in a single-statement context\");\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case types._while:\n        return this.parseWhileStatement(node);\n\n      case types._with:\n        return this.parseWithStatement(node);\n\n      case types.braceL:\n        return this.parseBlock();\n\n      case types.semi:\n        return this.parseEmptyStatement(node);\n\n      case types._export:\n      case types._import:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, \"'import' and 'export' may only appear at the top level\");\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === types._import) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, \"Async functions can only be declared at the top level or inside a block\");\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (starttype === types.name && expr.type === \"Identifier\" && this.eat(types.colon)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, `'import' and 'export' may appear only with 'sourceType: \"module\"'`, {\n        code: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n      });\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(types._class);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(types.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(types._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, \"Using the export keyword between a decorator and a class is not allowed. \" + \"Please use `export @dec class` instead.\");\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, \"Leading decorators must be attached to a class declaration\");\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(types.parenL)) {\n        expr = this.parseExpression();\n        this.expect(types.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(types.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(types.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(types.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, keyword) {\n    const isBreak = keyword === \"break\";\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, keyword);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, keyword) {\n    const isBreak = keyword === \"break\";\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, \"Unsyntactic \" + keyword);\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(types.parenL);\n    const val = this.parseExpression();\n    this.expect(types.parenR);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(types._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(types.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(\"await\")) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(types.parenL);\n\n    if (this.match(types.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const isLet = this.isLet();\n\n    if (this.match(types._var) || this.match(types._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(types._in) || this.isContextual(\"of\")) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const refShorthandDefaultPos = {\n      start: 0\n    };\n    const init = this.parseExpression(true, refShorthandDefaultPos);\n\n    if (this.match(types._in) || this.isContextual(\"of\")) {\n      const description = this.isContextual(\"of\") ? \"for-of statement\" : \"for-in statement\";\n      this.toAssignable(init, undefined, description);\n      this.checkLVal(init, undefined, undefined, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else if (refShorthandDefaultPos.start) {\n      this.unexpected(refShorthandDefaultPos.start);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(types._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.scope.inFunction && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, \"'return' outside of function\");\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(types.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(types.braceR);) {\n      if (this.match(types._case) || this.match(types._default)) {\n        const isCase = this.match(types._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, \"Multiple default clauses\");\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(types.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) {\n      this.raise(this.state.lastTokEnd, \"Illegal newline after throw\");\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(types._catch)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(types.parenL)) {\n        this.expect(types.parenL);\n        clause.param = this.parseBindingAtom();\n        const simple = clause.param.type === \"Identifier\";\n        this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n        this.checkLVal(clause.param, BIND_LEXICAL, null, \"catch clause\");\n        this.expect(types.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, \"Missing catch or finally clause\");\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, \"'with' in strict mode\");\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (let _i2 = 0, _this$state$labels = this.state.labels; _i2 < _this$state$labels.length; _i2++) {\n      const label = _this$state$labels[_i2];\n\n      if (label.name === maybeName) {\n        this.raise(expr.start, `Label '${maybeName}' is already declared`);\n      }\n    }\n\n    const kind = this.state.type.isLoop ? \"loop\" : this.match(types._switch) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true) {\n    const node = this.startNode();\n    this.expect(types.braceL);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, types.braceR);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end) {\n    let parsedNonDirective = false;\n    let oldStrict;\n    let octalPosition;\n\n    while (!this.eat(end)) {\n      if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {\n        octalPosition = this.state.octalPosition;\n      }\n\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective && this.isValidDirective(stmt)) {\n        const directive = this.stmtToDirective(stmt);\n        directives.push(directive);\n\n        if (oldStrict === undefined && directive.value.value === \"use strict\") {\n          oldStrict = this.state.strict;\n          this.setStrict(true);\n\n          if (octalPosition) {\n            this.raise(octalPosition, \"Octal literal in strict mode\");\n          }\n        }\n\n        continue;\n      }\n\n      parsedNonDirective = true;\n      body.push(stmt);\n    }\n\n    if (oldStrict === false) {\n      this.setStrict(false);\n    }\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.expect(types.semi);\n    node.test = this.match(types.semi) ? null : this.parseExpression();\n    this.expect(types.semi);\n    node.update = this.match(types.parenR) ? null : this.parseExpression();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(types._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, `${isForIn ? \"for-in\" : \"for-of\"} loop variable declaration may not have an initializer`);\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, \"Invalid left-hand side in for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();\n    this.expect(types.parenR);\n    node.body = this.withTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(types.eq)) {\n        decl.init = this.parseMaybeAssign(isFor);\n      } else {\n        if (kind === \"const\" && !(this.match(types._in) || this.isContextual(\"of\"))) {\n          if (!isTypescript) {\n            this.unexpected();\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(types._in) || this.isContextual(\"of\")))) {\n          this.raise(this.state.lastTokEnd, \"Complex binding patterns require an initialization value\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(types.comma)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, \"variable declaration\", kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(types.star) && isHangingStatement) {\n      this.raise(this.state.start, \"Generators can only be declared at the top level or inside a block\");\n    }\n\n    node.generator = this.eat(types.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInClassProperty = this.state.inClassProperty;\n    const oldYieldPos = this.state.yieldPos;\n    const oldAwaitPos = this.state.awaitPos;\n    this.state.maybeInArrowParameters = false;\n    this.state.inClassProperty = false;\n    this.state.yieldPos = -1;\n    this.state.awaitPos = -1;\n    this.scope.enter(functionFlags(node.async, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node);\n    this.withTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inClassProperty = oldInClassProperty;\n    this.state.yieldPos = oldYieldPos;\n    this.state.awaitPos = oldAwaitPos;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || this.match(types.name) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const oldInParameters = this.state.inParameters;\n    this.state.inParameters = true;\n    this.expect(types.parenL);\n    node.params = this.parseBindingList(types.parenR, 41, false, allowModifiers);\n    this.state.inParameters = oldInParameters;\n    this.checkYieldAwaitInDefaultParams();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass);\n    this.state.strict = oldStrict;\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(types.eq) || this.match(types.semi) || this.match(types.braceR);\n  }\n\n  isClassMethod() {\n    return this.match(types.parenL);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(constructorAllowsSuper) {\n    this.state.classLevel++;\n    const state = {\n      hadConstructor: false\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(types.braceL);\n    this.withTopicForbiddingContext(() => {\n      while (!this.eat(types.braceR)) {\n        if (this.eat(types.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, \"Decorators must not be followed by a semicolon\");\n          }\n\n          continue;\n        }\n\n        if (this.match(types.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state, constructorAllowsSuper);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\");\n        }\n      }\n    });\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, \"You have trailing decorators with no method\");\n    }\n\n    this.state.classLevel--;\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMember(classBody, member, state, constructorAllowsSuper) {\n    let isStatic = false;\n    const containsEsc = this.state.containsEsc;\n\n    if (this.match(types.name) && this.state.value === \"static\") {\n      const key = this.parseIdentifier(true);\n\n      if (this.isClassMethod()) {\n        const method = member;\n        method.kind = \"method\";\n        method.computed = false;\n        method.key = key;\n        method.static = false;\n        this.pushClassMethod(classBody, method, false, false, false, false);\n        return;\n      } else if (this.isClassProperty()) {\n        const prop = member;\n        prop.computed = false;\n        prop.key = key;\n        prop.static = false;\n        classBody.body.push(this.parseClassProperty(prop));\n        return;\n      } else if (containsEsc) {\n        throw this.unexpected();\n      }\n\n      isStatic = true;\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic, constructorAllowsSuper) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n\n    if (this.eat(types.star)) {\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, \"Constructor can't be a generator\");\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    const key = this.parseClassPropertyName(member);\n    const isPrivate = key.type === \"PrivateName\";\n    const isSimple = key.type === \"Identifier\";\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, \"Duplicate constructor in the same class\");\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = constructorAllowsSuper;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isSimple && key.name === \"async\" && !containsEsc && !this.isLineTerminator()) {\n      const isGenerator = this.eat(types.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      this.parseClassPropertyName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't be an async function\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isSimple && (key.name === \"get\" || key.name === \"set\") && !containsEsc && !(this.match(types.star) && this.isLineTerminator())) {\n      method.kind = key.name;\n      this.parseClassPropertyName(publicMethod);\n\n      if (method.key.type === \"PrivateName\") {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, \"Constructor can't have get/set modifier\");\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassPropertyName(member) {\n    const key = this.parsePropertyName(member);\n\n    if (!member.computed && member.static && (key.name === \"prototype\" || key.value === \"prototype\")) {\n      this.raise(key.start, \"Classes may not have static property named prototype\");\n    }\n\n    if (key.type === \"PrivateName\" && key.id.name === \"constructor\") {\n      this.raise(key.start, \"Classes may not have a private field named '#constructor'\");\n    }\n\n    return key;\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, \"Classes may not have a field named 'constructor'\");\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    this.expectPlugin(\"classPrivateProperties\", prop.key.start);\n    classBody.body.push(this.parseClassPrivateProperty(prop));\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    this.expectPlugin(\"classPrivateMethods\", method.key.start);\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true));\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseAccessModifier() {\n    return undefined;\n  }\n\n  parseClassPrivateProperty(node) {\n    this.state.inClassProperty = true;\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    node.value = this.eat(types.eq) ? this.parseMaybeAssign() : null;\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.scope.exit();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    if (!node.typeAnnotation) {\n      this.expectPlugin(\"classProperties\");\n    }\n\n    this.state.inClassProperty = true;\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n\n    if (this.match(types.eq)) {\n      this.expectPlugin(\"classProperties\");\n      this.next();\n      node.value = this.parseMaybeAssign();\n    } else {\n      node.value = null;\n    }\n\n    this.semicolon();\n    this.state.inClassProperty = false;\n    this.scope.exit();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (this.match(types.name)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, bindingType, undefined, \"class name\");\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, \"A class name is required\");\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(types.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(types.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, types.braceL);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(types._default)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, types.braceL);\n  }\n\n  eatExportStar(node) {\n    return this.eat(types.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(\"as\")) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(types.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      node.specifiers.push(...this.parseExportSpecifiers());\n      node.source = null;\n      node.declaration = null;\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      if (this.isContextual(\"async\")) {\n        const next = this.nextTokenStart();\n\n        if (!this.isUnparsedContextual(next, \"function\")) {\n          this.unexpected(next, `Unexpected token, expected \"function\"`);\n        }\n      }\n\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(\"async\")) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(types._function) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(types._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types.at)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(types._const) || this.match(types._var) || this.isLet()) {\n      throw this.raise(this.state.start, \"Only expressions, functions or classes are allowed as the `default` export.\");\n    } else {\n      const res = this.parseMaybeAssign();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(types.name)) {\n      return this.state.value !== \"async\" && this.state.value !== \"let\";\n    }\n\n    if (!this.match(types._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    return this.input.charCodeAt(next) === 44 || this.isUnparsedContextual(next, \"from\");\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(\"from\")) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n    } else {\n      if (expect) {\n        this.unexpected();\n      } else {\n        node.source = null;\n      }\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.match(types.at)) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, \"Decorators must be placed *before* the 'export' keyword.\" + \" You can set the 'decoratorsBeforeExport' option to false to use\" + \" the 'export @decorator class {}' syntax\");\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return this.state.type.keyword === \"var\" || this.state.type.keyword === \"const\" || this.state.type.keyword === \"function\" || this.state.type.keyword === \"class\" || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n      } else if (node.specifiers && node.specifiers.length) {\n        for (let _i3 = 0, _node$specifiers = node.specifiers; _i3 < _node$specifiers.length; _i3++) {\n          const specifier = _node$specifiers[_i3];\n          this.checkDuplicateExports(specifier, specifier.exported.name);\n\n          if (!isFrom && specifier.local) {\n            this.checkReservedWord(specifier.local.name, specifier.local.start, true, false);\n            this.scope.checkLocalExport(specifier.local);\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (let _i4 = 0, _node$declaration$dec = node.declaration.declarations; _i4 < _node$declaration$dec.length; _i4++) {\n            const declaration = _node$declaration$dec[_i4];\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      const isClass = node.declaration && (node.declaration.type === \"ClassDeclaration\" || node.declaration.type === \"ClassExpression\");\n\n      if (!node.declaration || !isClass) {\n        throw this.raise(node.start, \"You can only use decorators on an export when exporting a class\");\n      }\n\n      this.takeDecorators(node.declaration);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (let _i5 = 0, _node$properties = node.properties; _i5 < _node$properties.length; _i5++) {\n        const prop = _node$properties[_i5];\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (let _i6 = 0, _node$elements = node.elements; _i6 < _node$elements.length; _i6++) {\n        const elem = _node$elements[_i6];\n\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.state.exportedIdentifiers.indexOf(name) > -1) {\n      this.raise(node.start, name === \"default\" ? \"Only one default export allowed per module.\" : `\\`${name}\\` has already been exported. Exported identifiers must be unique.`);\n    }\n\n    this.state.exportedIdentifiers.push(name);\n  }\n\n  parseExportSpecifiers() {\n    const nodes = [];\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      const node = this.startNode();\n      node.local = this.parseIdentifier(true);\n      node.exported = this.eatContextual(\"as\") ? this.parseIdentifier(true) : node.local.__clone();\n      nodes.push(this.finishNode(node, \"ExportSpecifier\"));\n    }\n\n    return nodes;\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(types.string)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(types.comma);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(\"from\");\n    }\n\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(types.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return this.match(types.name);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, contextDescription);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(types.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(\"as\");\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(types.braceL);\n\n    while (!this.eat(types.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(types.colon)) {\n          throw this.raise(this.state.start, \"ES2015 named imports do not destructure. \" + \"Use another statement for destructuring after the import.\");\n        }\n\n        this.expect(types.comma);\n        if (this.eat(types.braceR)) break;\n      }\n\n      this.parseImportSpecifier(node);\n    }\n  }\n\n  parseImportSpecifier(node) {\n    const specifier = this.startNode();\n    specifier.imported = this.parseIdentifier(true);\n\n    if (this.eatContextual(\"as\")) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      this.checkReservedWord(specifier.imported.name, specifier.start, true, true);\n      specifier.local = specifier.imported.__clone();\n    }\n\n    this.checkLVal(specifier.local, BIND_LEXICAL, undefined, \"import specifier\");\n    node.specifiers.push(this.finishNode(specifier, \"ImportSpecifier\"));\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    const ScopeHandler = this.getScopeHandler();\n    this.options = options;\n    this.inModule = this.options.sourceType === \"module\";\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.scope.enter(SCOPE_PROGRAM);\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (let _i = 0; _i < plugins.length; _i++) {\n    const plugin = plugins[_i];\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  if (options && options.sourceType === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (let _i = 0; _i < pluginList.length; _i++) {\n      const plugin = pluginList[_i];\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = types;\n"]},"metadata":{},"sourceType":"script"}